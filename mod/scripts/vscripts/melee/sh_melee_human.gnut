untyped

global function MeleeHumanShared_Init

global function HumanUnsyncedMelee
global function HumanMeleeAttack

function MeleeHumanShared_Init()
{
	PrecacheParticleSystem( $"P_melee_player" )
	RegisterSignal( "StopSlowMoMelee" )
	RegisterSignal( "StopHighlightValidMeleeEnemy" )

	// modified signal to stop melee dash
	RegisterSignal( "MeleeImpact" )
	RegisterSignal( "MeleeDash" )
	// to stop last jet fx
	RegisterSignal( "MeleeJetFX" )
	// to end last thread
	RegisterSignal( "KickMeleeApplyingThink" )
	RegisterSignal( "FakeGroundExecutionThink" )
}

function HumanUnsyncedMelee( entity player, bool movestunBlocked )
{
	entity activeWeapon = player.GetActiveWeapon()
	if ( !IsValid( activeWeapon ) )
	{
/*
#if SERVER
		print( "SERVER: " + player + " has no valid active weapon\n" )
#else
		print( "CLIENT: " + player + " has no valid active weapon\n" )
#endif
*/
		return
	}

	entity meleeWeapon = player.GetMeleeWeapon()
	if ( !IsValid( meleeWeapon ) )
	{
/*
#if SERVER
		print( "SERVER: " + player + " has no valid melee weapon\n" )
#else
		print( "CLIENT: " + player + " has no valid melee weapon\n" )
#endif
*/
		return
	}

	// warns!!! states other than PLAYER_MELEE_STATE_NONE will make player unable to melee
	local meleeAttackType = PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK
	if ( activeWeapon.GetWeaponClassName() == "mp_weapon_dash_melee" )
		meleeAttackType = PLAYER_MELEE_STATE_HUMAN_EVISCERATE_ATTACK

	player.PlayerMelee_StartAttack( meleeAttackType )
	
	bool isDashMelee = meleeWeapon.HasMod( "apex_melee" ) || meleeWeapon.HasMod( "pushback_melee" )
	bool doJetPackFX = meleeWeapon.HasMod( "jetpack_fx_melee" )
	bool lungeDisabled = meleeWeapon.HasMod( "no_damage" ) // hardcoded!

// serverside only
#if SERVER
	if( !( "applyKickDamage" in player.s ) )
		player.s.applyKickDamage <- false

	bool applyKickDamage = meleeWeapon.HasMod( "fake_human_melee" ) && IsDoingMeleeKickEvent( player )
	bool doFakeGroundExecution = meleeWeapon.HasMod( "fake_ground_execute" )
	if( applyKickDamage )
		thread KickMeleeApplyingThink( player )
#endif

	if ( player.PlayerMelee_GetState() == PLAYER_MELEE_STATE_HUMAN_EVISCERATE_ATTACK ) // fix: this will player unable to melee! // respawn messed this up, but maybe useful if we want to make client don't predict a lunging event
	{
		vector lungeTargetPos = (player.GetOrigin() + (player.GetViewVector() * 300))
		player.Lunge_SetTargetPosition( lungeTargetPos )
		player.Lunge_EnableFlying()
	}
	else
	{
		if( isDashMelee )
		{
#if SERVER
			thread HumanMeleeAttack_DashThread( player, meleeWeapon )
#endif
		}
		
		entity lungeTarget = GetLungeTargetForPlayer( player )
		if ( IsAlive( lungeTarget ) )
		{
			//if ( !movestunBlocked )
			if ( !movestunBlocked && !lungeDisabled )
			{
/*
#if SERVER
				print( "SERVER: " + player + " is calling Lunge_SetTargetEntity() from HumanUnsyncedMelee()\n" )
#else
				print( "CLIENT: " + player + " is calling Lunge_SetTargetEntity() from HumanUnsyncedMelee()\n" )
#endif
*/
				if ( player.Lunge_SetTargetEntity( lungeTarget, true ) )
				{
					#if SERVER
						if ( doFakeGroundExecution )
						{
							PlayerTryFakeGroundExecutionAttack( player, lungeTarget )
						}
					#endif

					if ( lungeTarget.IsTitan() )
					{
						player.Lunge_EnableFlying()
						vector oldOffset = player.Lunge_GetEndPositionOffset()
						player.Lunge_SetEndPositionOffset( oldOffset + <0, 0, 128> )
					}
					else
					{
						if ( player.IsOnGround() )
							player.Lunge_LockPitch( true )
					}
					#if SERVER
					if ( doJetPackFX )
					{
						if ( isDashMelee ) // for dash melee, player not in a valid state won't play a fx, should do it manually
						{
							if ( !IsValidMeleeDashState( player ) ) 
								thread HumanMeleeJetFX( player )
						}
						else
							thread HumanMeleeJetFX( player ) // if we're lunging to a target do an extra jetpack fx
					}
					#endif
				}
			}
		}
	}
#if SERVER
	// if we don't lunge at anything stop slowmo
	if ( IsSingleplayer() && PROTO_IsSlowMoWeapon( meleeWeapon ) )
	{
		player.Signal( "StopSlowMoMelee" )
	}
#endif // #if SERVER

#if SERVER
	meleeWeapon.EmitWeaponNpcSound_DontUpdateLastFiredTime( 200, 0.2 )
#endif // #if SERVER

	//player.Weapon_StartCustomActivity( meleeActivity1p, false )
	player.SetSelectedOffhandToMelee()
}

function DoReactionForTitanHit( entity player, entity titan )
{
/*
#if SERVER
	print( "SERVER: " + player + " is calling Lunge_SetTargetEntity() from DoReactionForTitanHit()\n" )
#else
	print( "CLIENT: " + player + " is calling Lunge_SetTargetEntity() from DoReactionForTitanHit()\n" )
#endif
*/
	player.Lunge_SetTargetEntity( titan, true )
	if ( player.Lunge_IsLungingToEntity() )
		player.Lunge_EnableFlying()

	vector titanCenter = titan.EyePosition()
	vector delta = (player.EyePosition() - titanCenter)
	vector dir = Normalize( delta )
	player.Lunge_SetEndPositionOffset( dir * 350 )
}

function HumanMeleeAttack( entity player )
{
	if ( player.IsPhaseShifted() )
		return
	if ( player.PlayerMelee_GetAttackHitEntity() )
		return
	if ( IsInExecutionMeleeState( player ) )
		return

	// modified for primary_melee.gnut
	entity meleeWeapon = player.GetMeleeWeapon()
	float attackRange

	if( !IsValid( meleeWeapon ) )
		return
	attackRange = meleeWeapon.GetMeleeAttackRange()

	if ( player.Lunge_IsGroundExecute() )
		attackRange = 150
/*
#if SERVER
	print( "SERVER: " + player + " is calling PlayerMelee_AttackTrace() from HumanMeleeAttack()\n" )
#else
	print( "CLIENT: " + player + " is calling PlayerMelee_AttackTrace() from HumanMeleeAttack()\n" )
#endif
*/
	table traceResult = PlayerMelee_AttackTrace( player, attackRange, CodeCallback_IsValidMeleeAttackTarget )

	entity hitEnt = expect entity( traceResult.ent )
	if ( !IsValid( hitEnt )  )
	{
/*
#if SERVER
		print( "SERVER: " + player + " call to PlayerMelee_AttackTrace() did NOT hit\n" )
#else
		print( "CLIENT: " + player + " call to PlayerMelee_AttackTrace() did NOT hit\n" )
#endif
*/
		return
	}
/*
#if SERVER
	print( "SERVER: " + player + " call to PlayerMelee_AttackTrace() hit " + hitEnt + "\n" )
#else
	print( "CLIENT: " + player + " call to PlayerMelee_AttackTrace() hit " + hitEnt + "\n" )
#endif
*/

	// modified
	if ( PlayerMelee_IsServerSideEffects() )
	{
#if SERVER
		vector hitNormal = Normalize( traceResult.startPosition - traceResult.position )
		player.DispatchImpactEffects( hitEnt, traceResult.startPosition, traceResult.position, hitNormal, traceResult.surfaceProp, traceResult.staticPropIndex, traceResult.damageType, meleeWeapon.GetImpactTableIndex(), player, traceResult.impactEffectFlags | IEF_SERVER_SIDE_EFFECT )
#endif
	}
	else
	{
		vector hitNormal = Normalize( traceResult.startPosition - traceResult.position )
		player.DispatchImpactEffects( hitEnt, traceResult.startPosition, traceResult.position, hitNormal, traceResult.surfaceProp, traceResult.staticPropIndex, traceResult.damageType, meleeWeapon.GetImpactTableIndex(), player, traceResult.impactEffectFlags )
	}

	player.PlayerMelee_SetAttackHitEntity( hitEnt )
	if ( !hitEnt.IsWorld() )
		player.PlayerMelee_SetAttackRecoveryShouldBeQuick( true )

	if ( hitEnt.IsTitan() )
		DoReactionForTitanHit( player, hitEnt )

	if ( hitEnt.IsBreakableGlass() )
	{
#if SERVER
		hitEnt.BreakSphere( traceResult.position, 50 )
#endif // #if SERVER
	}
	else
	{
		if ( player.IsInputCommandHeld( IN_MELEE ) && AttemptHumanMeleeExecution( player, hitEnt, meleeWeapon, traceResult ) )
			return

#if CLIENT
		//MeleeImpactFX( player, meleeWeapon, hitEnt )
#else
		HumanMeleeAttack_DoImpact( player, meleeWeapon, traceResult )
#endif
		const float SCALE_WHEN_ENEMY = 1.0
		const float SCALE_WHEN_NOT_ENEMY = 0.5
		float severityScale = IsEnemyTeam( player.GetTeam(), hitEnt.GetTeam() ) ? SCALE_WHEN_ENEMY : SCALE_WHEN_NOT_ENEMY
		//meleeWeapon.DoMeleeHitConfirmation( severityScale )
		if ( !meleeWeapon.HasMod( "fighter_melee" ) ) // fighter melee is too fast, don't play a hitConfrim for it!!!
			meleeWeapon.DoMeleeHitConfirmation( severityScale )
	}
}

#if 0 //CLIENT
function MeleeImpactFX( entity player, entity meleeWeapon, entity target )
{
	if ( !target.IsWorld() )
	{
		entity cockpit = player.GetCockpit()
		if ( IsValid( cockpit ) )
			StartParticleEffectOnEntity( cockpit, GetParticleSystemIndex( $"P_melee_player" ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 ) //P_MFD works well too
	}
}
#endif // CLIENT

#if SERVER
function HumanMeleeAttack_DoImpact( entity player, entity meleeWeapon, traceResult )
{
	local angles = player.EyeAngles()
	entity target = expect entity( traceResult.ent )
	player.PlayerMelee_SetAttackHitEntity( target )

	string weaponName = meleeWeapon.GetWeaponClassName()
	local damageSource = eDamageSourceId[weaponName]
	int damageAmount = GetDamageAmountForTarget( meleeWeapon, target )

	// modified checks!!!
	bool applyKickDamage = expect bool( player.s.applyKickDamage )
	if( applyKickDamage )
		damageSource = eDamageSourceId.human_melee

	bool isPushBackMelee = meleeWeapon.HasMod( "fighter_melee" ) || meleeWeapon.HasMod( "apex_melee" ) || meleeWeapon.HasMod( "pushback_melee" )
	if( isPushBackMelee )
		return HumanMeleeAttack_PushBackAttack( player, target, meleeWeapon, traceResult, applyKickDamage )
	// end

	if ( IsHumanSized( target ) )
	{
		if ( target.IsPlayer() ) //Strip away rodeo protection
		{
			entity titanBeingRodeoed = GetTitanBeingRodeoed( target )
			if ( IsValid( titanBeingRodeoed ) )
				TakeAwayFriendlyRodeoPlayerProtection( titanBeingRodeoed )
		}

		// ??
		target.SetContinueAnimatingAfterRagdoll( true )
	}

	vector oldVelocity = target.GetVelocity()
	vector damageForce = AnglesToForward( angles ) * meleeWeapon.GetWeaponDamageForce()

	//print( "SERVER: HumanMeleeAttack_DoImpact() applying damage to " + target + "\n" )

	if ( target.IsNPC() && target.CanBeGroundExecuted() )
		target.TakeDamage( target.GetHealth(), player, player, { scriptType = DF_RAGDOLL | meleeWeapon.GetWeaponDamageFlags(), damageType = DMG_MELEE_ATTACK, damageSourceId = damageSource, origin = traceResult.position, force = Vector( 0, 0, 0 ) } )
	else
		target.TakeDamage( damageAmount, player, player, { scriptType = meleeWeapon.GetWeaponDamageFlags(), damageType = DMG_MELEE_ATTACK, damageSourceId = damageSource, origin = traceResult.position, force = damageForce } )

	// PROTO DEV
	if ( IsSingleplayer() )
	{
		if ( PROTO_ShouldActivateSlowMo( target, meleeWeapon ) )
		{
			thread PROTO_SlowMoMelee( player, target, meleeWeapon )
		}
	}

	// triggers:
	{
		local triggerTraceDir = Normalize( traceResult.position - traceResult.startPosition )
		player.TraceAttackToTriggers( damageAmount, player, player, { scriptType = meleeWeapon.GetWeaponDamageFlags(), damageType = DMG_MELEE_ATTACK, damageSourceId = damageSource, force = damageForce }, traceResult.startPosition, traceResult.position, triggerTraceDir )
	}

	if ( target.IsPlayerDecoy() )
	{
		player.PlayerMelee_EndAttack()
	}
}

int function GetMeleeDamageSourceIDForWeapon( entity meleeWeapon )
{
	string weaponName = meleeWeapon.GetWeaponClassName()
	int result = eDamageSourceId[weaponName]
	return result
}

int function GetDamageAmountForTarget( entity meleeWeapon, entity target )
{
	// special case
	if ( IsTurret( target ) && IsHumanSized( target ) )
		return target.GetMaxHealth() + 1

	// default
	return meleeWeapon.GetDamageAmountForArmorType( target.GetArmorType() )
}

// HACK - testing linked slow mo melee
void function PROTO_SlowMoMelee( entity player, entity currentEnemy, entity meleeWeapon )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "StopSlowMoMelee" )

	float duration = 1.75 //1.75
	float timescale = 0.4
	float lastKillTimescale = 0.2

	var SlowMoTimeRemaining = player.s.meleeSlowMoEndTime - Time()

	meleeWeapon.SetMods( [ "SlowMoLinked" ] )	// need to switch to the other mod to get the longer lunge range

	// find an enemy close enough that we can melee him next
	entity nextEnemy = PROTO_GetNextMeleeEnemy( player, meleeWeapon, currentEnemy )

	if ( !IsValid( nextEnemy ) )
	{
		meleeWeapon.SetMods( [ "SlowMo" ] )
		if ( SlowMoTimeRemaining > 0 )
		{
			// do extra slowdown for the last kill in a linked slow-mo melee chain.
			ServerCommand( "host_timescale " + string( lastKillTimescale ) )
			wait 0.2
			player.Signal( "StopSlowMoMelee" ) // this will also end this thread
		}

		return
	}

	if ( player.s.meleeSlowMoEndTime > Time() )
	{
		// if we are already in slow-mo just turn towards the next enemy and extend the duration
		thread PROTO_TurnViewTowardsClosestEnemy( player, nextEnemy )
		player.s.meleeSlowMoEndTime = Time() + duration // += duration
		return
	}

 	// require a 5 second cool down between leaving and reentering slow mo.
 	if ( SlowMoTimeRemaining > -5 )
		return

	thread PROTO_TurnViewTowardsClosestEnemy( player, nextEnemy )

	// enter slow mo
	ServerCommand( "host_timescale " + string( timescale ) )
	player.s.meleeSlowMoEndTime = Time() + duration
	meleeWeapon.SetMods( [ "SlowMoLinked" ] )

	float range = meleeWeapon.GetMeleeLungeTargetRange()
	array<entity> enemyArray = PROTO_GetMeleeEnemiesWithinRange( player.GetOrigin(), player.GetTeam(), range )
	foreach( enemy in enemyArray )
		thread PROTO_HighlightValidMeleeEnemy( player, enemy, meleeWeapon )

	player.SetInvulnerable()

	OnThreadEnd(
		function() : ( player, meleeWeapon )
		{
			if ( IsValid( meleeWeapon ) )
				meleeWeapon.SetMods( [ "SlowMo" ] )

			if ( IsValid( player ) )
			{
				player.ClearInvulnerable()
				player.s.meleeSlowMoEndTime = 0
			}

			thread PROTO_EaseOutSlowMo()
		}
	)

	while( Time() <= player.s.meleeSlowMoEndTime )
	{
		var waitTime = player.s.meleeSlowMoEndTime - Time()
		wait waitTime
	}

	player.Signal( "StopSlowMoMelee" )
}

void function PROTO_EaseOutSlowMo()
{
	ServerCommand( "host_timescale 0.4" )
	wait 0.1
	ServerCommand( "host_timescale 0.7" )
	wait 0.1
	ServerCommand( "host_timescale 1.0" )
}

bool function PROTO_IsSlowMoWeapon( entity meleeWeapon )
{
	return 	( meleeWeapon.HasMod( "SlowMo" ) || meleeWeapon.HasMod( "SlowMoLinked" ) )
}

bool function PROTO_ShouldActivateSlowMo( entity enemy, entity meleeWeapon )
{
	if ( !PROTO_IsSlowMoWeapon( meleeWeapon ) )
		return false

	if ( !IsHumanSized( enemy ) )
		return false

	return true
}

void function PROTO_TurnViewTowardsClosestEnemy( entity player, entity nextEnemy )
{
	player.EndSignal( "OnDeath" )

	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				player.ClearParent()
				player.PlayerCone_Disable()
			}
		}
	)

	// turn player view towards next enemy
	vector vec = nextEnemy.GetOrigin() - player.GetOrigin()
	vector newAngles = VectorToAngles( vec )

	entity scriptMover = CreateScriptMover( player.GetOrigin(), player.GetAngles() )
	player.SetParent( scriptMover )

	player.PlayerCone_SetLerpTime( 0.15 )

	player.PlayerCone_FromAnim()
	player.PlayerCone_SetMinYaw( -15 )
	player.PlayerCone_SetMaxYaw( 15 )
	player.PlayerCone_SetMinPitch( -5 )
	player.PlayerCone_SetMaxPitch( 15 )

	wait 0.2

	scriptMover.NonPhysicsRotateTo( newAngles, 0.4, 0.2, 0.2 )
	wait 0.4
}

entity function PROTO_GetNextMeleeEnemy( entity player, entity meleeWeapon, entity lastEnemy )
{
	float range = meleeWeapon.GetMeleeLungeTargetRange()
	array<entity> enemyArray = PROTO_GetMeleeEnemiesWithinRange( player.GetOrigin(), player.GetTeam(), range )
	entity nextEnemy = null

	foreach ( enemy in enemyArray  )
	{
		float heightDif = enemy.GetOrigin().z - player.GetOrigin().z
		if ( heightDif < -96 || heightDif > 48 )
			continue

		float frac = TraceLineSimple( player.EyePosition(), enemy.EyePosition(), enemy )
		if ( frac < 1 )
			continue

		if ( enemy == lastEnemy )
			continue

		nextEnemy = enemy
		break
	}

	return nextEnemy
}

array<entity> function PROTO_GetMeleeEnemiesWithinRange( vector playerOrigin, int playerTeam, float range )
{
	array<entity> enemyArray = GetNPCArrayEx( "npc_soldier", TEAM_ANY, playerTeam, playerOrigin, range )
	enemyArray.extend( GetNPCArrayEx( "npc_spectre", TEAM_ANY, playerTeam, playerOrigin, range ) )

	return enemyArray
}

void function PROTO_HighlightValidMeleeEnemy( entity player, entity enemy, entity meleeWeapon )
{
	enemy.Signal( "StopHighlightValidMeleeEnemy" )
	enemy.EndSignal( "StopHighlightValidMeleeEnemy" )

	player.EndSignal( "StopSlowMoMelee" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	enemy.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( enemy )
		{
			if ( IsValid( enemy ) )
				Highlight_ClearEnemyHighlight( enemy )
		}
	)

	float range = meleeWeapon.GetMeleeLungeTargetRange()
	float minDot = AngleToDot( meleeWeapon.GetMeleeLungeTargetAngle() )

	while( true )
	{
		vector viewVector = player.GetViewVector()
		vector enemyVector = enemy.GetCenter() - player.EyePosition()
		float dist = expect float( enemyVector.Norm() )

		if ( DotProduct( enemyVector, viewVector ) > minDot && dist < range )
			Highlight_SetEnemyHighlight( enemy, "enemy_sur_base" ) // enemy_sur_base, enemy_sonar, map_scan
		else
			Highlight_ClearEnemyHighlight( enemy )

		wait 0.1
	}
}

#endif // #if SERVER

bool function AttemptHumanMeleeExecution( entity player, entity syncedTarget, entity meleeWeapon, table traceResult )
{
	if ( player.PlayerMelee_GetState() == PLAYER_MELEE_STATE_NONE )
		return false

	if ( !IsAlive( player ) )
		return false

	if ( player.IsPhaseShifted() )
		return false

	if ( !CodeCallback_IsValidMeleeExecutionTarget( player, syncedTarget ) )
		return false

	#if SERVER
		player.Anim_StopGesture( 0 )
	#endif

	thread PlayerTriesSyncedMelee_FallbackToHumanMeleeAttack( player, syncedTarget, meleeWeapon, traceResult )
	return true
}

void function PlayerTriesSyncedMelee_FallbackToHumanMeleeAttack( entity player, entity target, entity meleeWeapon, table traceResult )
{
/*
#if SERVER
		print( "SERVER: PlayerTriesSyncedMelee_FallbackToHumanMeleeAttack() for " + player + "\n" )
#else
		print( "CLIENT: PlayerTriesSyncedMelee_FallbackToHumanMeleeAttack() for " + player + "\n" )
#endif
*/
	if ( !PlayerTriesSyncedMelee( player, target ) )
	{
/*
#if SERVER
		print( "SERVER: PlayerTriesSyncedMelee() for " + player + " failed\n" )
#else
		print( "CLIENT: PlayerTriesSyncedMelee() for " + player + " failed\n" )
#endif
*/
#if SERVER
		HumanMeleeAttack_DoImpact( player, meleeWeapon, traceResult )
#endif
	}
	else
	{
/*
#if SERVER
		print( "SERVER: PlayerTriesSyncedMelee() for " + player + " succeeded\n" )
#else
		print( "CLIENT: PlayerTriesSyncedMelee() for " + player + " succeeded\n" )
#endif
*/
	}
}



//////////////////////////////
///// MODIFIED FUNCTIONS /////
//////////////////////////////
#if SERVER
// this requires _pilot_jumpjet_precache.gnut to precache the particles
void function HumanMeleeJetFX( entity player )
{
	player.EndSignal( "OnDeath" )
	player.Signal( "MeleeJetFX" )
	player.EndSignal( "MeleeJetFX" )

	array<entity> fx

	OnThreadEnd(
		function () : ( player, fx )
		{
			if ( IsValid( player ) )
			{
				StopSoundOnEntity( player, "jumpjet_jump_body_3p" )
				EmitSoundOnEntity( player, "jumpjet_jump_end_3p" )
			}
			foreach ( entity effect in fx )
			{
				if ( !IsValid( effect ) )
					continue

				EffectStop( effect )
			}
		}
	)

	// clean up last
	StopSoundOnEntity( player, "jumpjet_jump_body_3p" )
	StopSoundOnEntity( player, "jumpjet_jump_end_3p" )
	
	EmitSoundOnEntity( player, "jumpjet_jump_body_3p" )

	// enemy left vent fx
	fx.append( CreateJetFxForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_left", false ) )
	fx.append( CreateJetFxForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_left", false ) )
	fx.append( CreateJetFxForPlayer( player, $"P_enemy_jump_jet_ON", "vent_left", false ) )
	// enemy right vent fx
	fx.append( CreateJetFxForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_right", false ) )
	fx.append( CreateJetFxForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_right", false ) )
	fx.append( CreateJetFxForPlayer( player, $"P_enemy_jump_jet_ON", "vent_right", false ) )

	// friendly left vent fx
	fx.append( CreateJetFxForPlayer( player, $"P_team_jump_jet_DBL", "vent_left", true ) )
	fx.append( CreateJetFxForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_left", true ) )
	fx.append( CreateJetFxForPlayer( player, $"P_team_jump_jet_ON", "vent_left", true ) )
	// friendly right vent fx
	fx.append( CreateJetFxForPlayer( player, $"P_team_jump_jet_DBL", "vent_right", true ) )
	fx.append( CreateJetFxForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_right", true ) )
	fx.append( CreateJetFxForPlayer( player, $"P_team_jump_jet_ON", "vent_right", true ) )

	wait 0.5 // even emptyhand's lunge time has only 0.5s
}

entity function CreateJetFxForPlayer( entity player, asset particle, string attachment, bool isFriendly )
{
	int particleID = GetParticleSystemIndex( particle )
	int attachID = player.LookupAttachment( attachment )
	if( attachID <= 0 ) // no attachment valid, don't play fx on this model
		return null
	entity fx = StartParticleEffectOnEntity_ReturnEntity( player, particleID, FX_PATTACH_POINT_FOLLOW, attachID )
	fx.SetOwner( player )
	SetTeam( fx, player.GetTeam() )
	if( isFriendly ) // removed: player can see friendly fx( blue flames and trails )
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY // | ENTITY_VISIBLE_TO_OWNER // this might get annoying!
	else
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY

	return fx
}

// kick attack
bool function IsDoingMeleeKickEvent( entity player )
{
	if( ( !player.IsOnGround() && !player.IsWallRunning() ) || player.IsWallHanging() )
		return true
	return false
}

void function KickMeleeApplyingThink( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.Signal( "KickMeleeApplyingThink" )
	player.EndSignal( "KickMeleeApplyingThink" )
	player.EndSignal( "MeleeImpact" )
	player.s.applyKickDamage = true

	OnThreadEnd
	(
		function(): ( player )
		{
			if ( IsValid( player ) )
			{
				//print( "kick damagesource end" )
				player.s.applyKickDamage = false
			}
		}
	)

	while( player.PlayerMelee_IsAttackActive() ) // wait until this attack ends
		WaitFrame()
}

// pushback attack
const float HUMAN_MELEE_SELF_PUSH_SCALE = 0.6
void function HumanMeleeAttack_PushBackAttack( entity player, entity target, entity meleeWeapon, traceResult, bool applyKickDamage )
{
	vector angles = player.EyeAngles()
	vector pushBackVelocity = AnglesToForward( angles ) * meleeWeapon.GetWeaponDamageForce()
	vector damageOrigin = expect vector( traceResult.position )

	bool isFighterMelee = meleeWeapon.HasMod( "fighter_melee" ) // fighter melee won't knockback player themselves

	vector targetDirection = VectorToAngles( traceResult.position - traceResult.startPosition )

	if( target.IsPlayer() || target.IsNPC() )
	{
		//Push enemy back first before doing damage to get rid of some dependencies
		vector targetVelocity
		//targetVelocity = target.GetVelocity()
		//targetVelocity += pushBackVelocity 
		targetVelocity = pushBackVelocity // always do knockback, ignore target's base velocity

		// Put a floor on the targetVelocity: has to be at least 0.85 of the pushback velocity to be able to push back players far enough
		// so that their slow melee attack doesn't still connect after being hit by a fast melee.
		float clampRatio = 0.85
		if ( ShouldClampTargetVelocity( targetVelocity, pushBackVelocity, clampRatio ) )
			targetVelocity = pushBackVelocity * clampRatio
		
		if( target.IsOnGround() && targetVelocity.z <= 0 )
			targetVelocity.z = -targetVelocity.z // in order to bounce players on ground

		//targetVelocity.z += 100
		float magicNumber = 205 // lowest velocity to push a pilot off ground?
		if( targetVelocity.z <= magicNumber && targetVelocity.z >= 0 )
			targetVelocity.z = magicNumber
		else if( targetVelocity.z >= -magicNumber && targetVelocity.z <= 0 && target.IsOnGround() )
			targetVelocity.z = magicNumber
		//print( targetVelocity.z )
		targetVelocity = ClampVerticalVelocity( targetVelocity, 550 ) // max velocity
		
		// enemyTitan.SetVelocity( targetVelocity )
		PushEntWithVelocity( target, targetVelocity )
	}

	player.Signal( "MeleeImpact" ) // restore groundfriction to make knockbacks work
	player.PlayerMelee_EndAttack() // don't let lunging mess up attacker self knockback
	
	//vector backVel = -0.5*pushBackVelocity + player.GetVelocity() // player receive less pushback, no need for now
	vector backVel = -pushBackVelocity + player.GetVelocity() // player receive full pushback since we got ground frictions back
	if ( !isFighterMelee ) // fighter melee will make player receive full self knockback
		backVel.z = 20 // don't let player leave ground through this
	backVel *= HUMAN_MELEE_SELF_PUSH_SCALE // since we've added scripted ground friction, shouldn't have a high backVel

	if ( isFighterMelee ) // fighter melee visual and sound fix, for they're too fast and client is hard to control it
	{
		// PlayImpactFXTable() will always dispatch a "hit flesh" sound, should notice it
		PlayImpactFXTable( damageOrigin, null, "melee_human", SF_ENVEXPLOSION_INCLUDE_ENTITIES )
	}

	if( !IsHumanSized( target ) )
	{
		if ( IsValidMeleeDashState( player ) || isFighterMelee ) // fighter melee will always knock back players if they hit other objects
		{
			thread PushBackMeleeMoveLimiter( player ) // make player unable to react to knockbacks, especially for kunai and sword
			PushEntWithVelocity( player, backVel )
		}
		return
	}

	// titan.SetVelocity( backVel )
	
	if ( !isFighterMelee ) // fighter melee won't knock back on hit
	{
		thread PushBackMeleeMoveLimiter( player ) // make player unable to react to knockbacks, especially for kunai and sword
		PushEntWithVelocity( player, backVel )
	}

	if ( target.IsPlayer() && target.PlayerMelee_IsAttackActive() )
	{
		// counter enemy's attack, maybe no need, may mess up target's screen!
		if ( isFighterMelee )
			target.PlayerMelee_EndAttack()
	}

	int damageAmount = meleeWeapon.GetDamageAmountForArmorType( target.GetArmorType() );
	local damageTable =
	{
		scriptType = meleeWeapon.GetWeaponDamageFlags()
		forceKill = false
		damageType = DMG_MELEE_ATTACK
		damageSourceId = applyKickDamage ? eDamageSourceId.human_melee : GetMeleeDamageSourceIDForWeapon( meleeWeapon )
		origin = damageOrigin
	}

	target.TakeDamage( damageAmount, player, player, damageTable )
}

// move limiter
const float HUMAN_MELEE_IMPACT_MOVE_LIMITER_DURATION	= 0.3
const float HUMAN_MELEE_IMPACT_FRICTION_SCALE			= 0.5
void function PushBackMeleeMoveLimiter( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "MeleeImpact" )

	// this can't make player unable to resist friction, they can still move!!
	int moveLockEffect = StatusEffect_AddEndless( player, eStatusEffect.move_slow, 1.0 ) // 1.0 will lock player's movement

	player.SetGroundFrictionScale( HUMAN_MELEE_IMPACT_FRICTION_SCALE )

	OnThreadEnd(
		function(): ( player, moveLockEffect )
		{
			if( IsValid( player ) )
			{
				StatusEffect_Stop( player, moveLockEffect )
				RestorePlayerPermanentGroundFriction( player )
			}
		}
	)
	
	wait HUMAN_MELEE_IMPACT_MOVE_LIMITER_DURATION
}

// melee dash
const float HUMAN_MELEE_DASH_DELAY					= 0.1 // 0.1s grace period
const float HUMAN_MELEE_DASH_DURATION 				= 0.2
const float HUMAN_MELEE_DASH_DURATION_NOT_MOVING	= 0.3 // if player is not moving, we last a bit longer
const float HUMAN_MELEE_DASH_FORCE	 				= 150 // really should set this higher, since player will have to overcome friction
// since we've added script ground friction, we can use custom friction scale now
const float HUMAN_MELEE_DASH_FRICTION_SCALE			= 0.0

void function HumanMeleeAttack_DashThread( entity player, entity meleeWeapon )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "MeleeImpact" )
	player.Signal( "MeleeDash" )
	player.EndSignal( "MeleeDash" )

	wait HUMAN_MELEE_DASH_DELAY
	if ( !IsValidMeleeDashState( player ) ) // not in valid state!
		return
	
	table results = {}
	results.startSpeed <- null
	results.interrupted <- false
	results.meleeImpact <- true

	player.SetGroundFrictionScale( HUMAN_MELEE_DASH_FRICTION_SCALE )

	thread HumanMeleeJetFX( player ) // always play a fx if you try to dashMelee

	OnThreadEnd
	(
		function(): ( player, results )
		{
			if ( results.startSpeed != null )
			{
				// if player have a melee impact or they're being interrupted, we reset speed to start speed
				if ( !results.meleeImpact || results.interrupted )
				{
					vector fixVel = expect vector ( results.startSpeed )
					fixVel.z = player.GetVelocity().z
					player.SetVelocity( fixVel )
				}
				RestorePlayerPermanentGroundFriction( player )
			}
		}
	)

	float duration = HUMAN_MELEE_DASH_DURATION
	if ( GetVelocityForce( player.GetVelocity() ) == 0 ) // player has no horizonal speed!
		duration = HUMAN_MELEE_DASH_DURATION_NOT_MOVING

	float startTime = Time()
	float endTime = startTime + duration
	vector startSpeed = player.GetVelocity()
	results.startSpeed <- startSpeed

	bool firstLoop = true
	while ( Time() < endTime )
	{
		if ( !firstLoop )
			WaitFrame( true ) // this ignores script fps limit
		firstLoop = false

		if ( !IsValidMeleeDashState( player ) ) // player leave valid state!
		{
			results.interrupted = true // mark as being interrupted
			return // end dash
		}

		float speedScale = HUMAN_MELEE_DASH_FORCE
		vector addSpeed = player.GetViewVector() * speedScale
		addSpeed.z = 0 // don't add z speed
		player.SetVelocity( startSpeed + addSpeed ) // keep this speed for a while
	}

	results.meleeImpact = false // if we reached here it means we're not interrupted by melee impact
}

float function GetVelocityForce( vector vel )
{
    return sqrt( vel.x * vel.x + vel.y * vel.y + vel.z * vel.z )
}

bool function IsValidMeleeDashState( entity player )
{
	if( !player.IsOnGround() || player.IsSliding() || player.IsWallRunning() || player.IsWallHanging() )
		return false

	return true
}

// fake_ground_execute
void function PlayerTryFakeGroundExecutionAttack( entity player, entity target )
{
	// states that overwrites ground execution animation
	if ( !player.IsOnGround() )
		return
	if ( player.IsSprinting() || player.IsSliding() )
		return
	// crouch check!!
	if ( player.IsCrouched() || player.IsInputCommandHeld( IN_DUCK ) || player.IsInputCommandHeld( IN_DUCKTOGGLE ) )
		return
	// messed up
	if ( player.IsWallHanging() || player.IsWallRunning() )
		return
	// don't have attachment?
	if ( target.LookupAttachment( "ORIGIN" ) <= 0 )
		return
	// spawn a fake grunt
	entity fakeGrunt = CreateNPC( "npc_soldier", target.GetTeam(), target.GetOrigin(), target.GetAngles() )
	fakeGrunt.kv.alwaysalert = 0
	DispatchSpawn( fakeGrunt )
	TakeAllWeapons( fakeGrunt )
	fakeGrunt.SetPoseParametersSameAs( target ) // make them use the same pose and sequence as player's
	fakeGrunt.SequenceTransitionFromEntity( target )
	fakeGrunt.SetCanBeGroundExecuted( true )
	fakeGrunt.SetParent( target, "ORIGIN" )
	fakeGrunt.NotSolid()
	fakeGrunt.Hide()
	fakeGrunt.SetNoTarget( true )
	fakeGrunt.EnableNPCFlag( NPC_IGNORE_ALL )

	// make player do ground execution
	player.Lunge_SetTargetEntity( fakeGrunt, true )
	thread FakeGroundExecutionThink( player, fakeGrunt, target )
}

void function FakeGroundExecutionThink( entity player, entity fakeGrunt, entity realTarget )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	realTarget.EndSignal( "OnDestroy" )
	realTarget.EndSignal( "OnDeath" )
	player.Signal( "FakeGroundExecutionThink" )
	player.EndSignal( "FakeGroundExecutionThink" )
	player.EndSignal( "MeleeImpact" )

	OnThreadEnd
	(
		function(): ( fakeGrunt )
		{
			if ( IsValid( fakeGrunt ) )
				fakeGrunt.Destroy()
		}
	)

	WaitFrame()
	player.Lunge_SetTargetEntity( realTarget, true )
}
#endif