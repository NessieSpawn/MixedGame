
global function RespawnShip_Init

// grunt mode needs this?
global function CreateWaitingRespawnShip
global function RespawnInWaitingRespawnShip

global function RespawnInDropShip
global function SetDropshipRespawnPointsOverride

enum eDropshipState
{
	Idle,
	InProgress,
	Returning
	_count_
}

struct RespawnShipStruct
{
	int dropshipState
	array<entity> playersInDropship
	bool waitingShip
}

struct
{
	table< int, array<entity> > teamWaitingRespawnShips
	array<entity> availableRespawnShips
	table < entity, RespawnShipStruct > respawnShipTable

	array<entity> respawnShipSpawns
} file

const array<string> DROPSHIP_IDLE_ANIMS_POV = [

	"ptpov_ds_coop_side_intro_gen_idle_B",
	"ptpov_ds_coop_side_intro_gen_idle_A",
	"ptpov_ds_coop_side_intro_gen_idle_C",
	"ptpov_ds_coop_side_intro_gen_idle_D"
]

const array<string> DROPSHIP_IDLE_ANIMS = [

	"pt_ds_coop_side_intro_gen_idle_B",
	"pt_ds_coop_side_intro_gen_idle_A",
	"pt_ds_coop_side_intro_gen_idle_C",
	"pt_ds_coop_side_intro_gen_idle_D"
]

const array<string> DROPSHIP_EXIT_ANIMS_POV = [
	"ptpov_ds_coop_side_intro_gen_exit_B",
	"ptpov_ds_coop_side_intro_gen_exit_A",
	"ptpov_ds_coop_side_intro_gen_exit_C",
	"ptpov_ds_coop_side_intro_gen_exit_D"
]

const array<string> DROPSHIP_EXIT_ANIMS = [
	"pt_ds_coop_side_intro_gen_exit_B",
	"pt_ds_coop_side_intro_gen_exit_A",
	"pt_ds_coop_side_intro_gen_exit_C",
	"pt_ds_coop_side_intro_gen_exit_D"
]

void function RespawnShip_Init()
{
	AddCallback_OnPlayerRespawned( RespawnInDropShip )
	AddCallback_EntitiesDidLoad( InitDropshipSpawnpoints )
}

void function InitDropshipSpawnpoints()
{
	foreach ( entity spawnpoints in GetZiplineDropshipSpawns() )
		file.respawnShipSpawns.append( spawnpoints )
}

void function SetDropshipRespawnPointsOverride( array<entity> spawnPoints )
{
	file.respawnShipSpawns = spawnPoints
}

void function CreateWaitingRespawnShip( int team )
{
	if ( !( team in file.teamWaitingRespawnShips ) )
		file.teamWaitingRespawnShips[ team ] <- []
	entity newShip = CreateRespawnShip( team )
	newShip.Hide()
	file.teamWaitingRespawnShips[ team ].append( newShip )
	thread TrackWaitingRespawnShipLifeTime( newShip )
}

void function TrackWaitingRespawnShipLifeTime( entity newShip )
{

}

// return a bool so you can decide other respawn methods
bool function RespawnInWaitingRespawnShip( entity player )
{
	int team = player.GetTeam()
	array<entity> waitingDropships
	if ( !( team in file.teamWaitingRespawnShips ) )
		return false
	waitingDropships = file.teamWaitingRespawnShips[ team ]
	bool respawnAsTitan = Riff_SpawnAsTitan() == 1 || expect bool( player.GetPersistentVar( "spawnAsTitan" ) )
	if ( respawnAsTitan )
		return false
	return false
}

void function RespawnInDropShip( entity player )
{
	if( file.respawnShipSpawns.len() <= 0 )
		return
    print( "triggered dropshipspawn" )

	//if( GetCurrentPlaylistVarInt("dropship_spawn", 0) == 0 )
	//    return
	if( GetGameState() != eGameState.Playing )
		return
	bool respawnAsTitan = Riff_SpawnAsTitan() == 1 || expect bool(  player.GetPersistentVar( "spawnAsTitan" ) )
	if ( respawnAsTitan )
		return
	//if( player.IsTitan() )
	//	return
	player.SetInvulnerable()

    bool shouldCreateNewShip = false
    if( file.availableRespawnShips.len() == 0 )
        shouldCreateNewShip = true
    else
    {
        bool atLeastOneShipAvailable
        foreach( entity dropship in file.availableRespawnShips )
        {
            if( !IsValid( dropship ) )
                continue
			if( dropship.GetTeam() != player.GetTeam() )
				continue
            if( file.respawnShipTable[dropship].playersInDropship.len() < 4 )
                atLeastOneShipAvailable = true
        }
        if( !atLeastOneShipAvailable )
            shouldCreateNewShip = true
    }

    entity dropship

	if( shouldCreateNewShip )
	{
        dropship = CreateRespawnShip( player.GetTeam() )
		thread RespawnShipThink( dropship )
	}
    else
    {
        foreach( entity chosenShip in file.availableRespawnShips )
        {
			if( !IsValid( chosenShip ) )
				continue
            if( chosenShip.GetTeam() == player.GetTeam() )
                dropship = chosenShip
        }
    }

	if( !IsValid( dropship ) )
	{
		dropship = CreateRespawnShip( player.GetTeam() )
		thread RespawnShipThink( dropship )
	}

    RespawnShipStruct curShipStruct = file.respawnShipTable[dropship]
	//Attach player
	FirstPersonSequenceStruct idleSequence
	idleSequence.firstPersonAnim = DROPSHIP_IDLE_ANIMS_POV[ curShipStruct.playersInDropship.len() ]
	idleSequence.thirdPersonAnim = DROPSHIP_IDLE_ANIMS[ curShipStruct.playersInDropship.len() ]
	idleSequence.attachment = "ORIGIN"
	idleSequence.teleport = true
	idleSequence.viewConeFunction = ViewConeWide
	idleSequence.hideProxy = true

	if ( player.GetTeam() == TEAM_MILITIA)
	{
	    thread FirstPersonSequence( idleSequence, player, dropship )
	    curShipStruct.playersInDropship.append( player )
	}
	else
	{
		thread FirstPersonSequence( idleSequence, player, dropship )
	    curShipStruct.playersInDropship.append( player )
	}

    thread TrackPlayerLifeStat( player, dropship )

    if( curShipStruct.playersInDropship.len() >= 4 )
        file.availableRespawnShips.removebyvalue( dropship )
}

void function TrackPlayerLifeStat( entity player, entity dropship )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    dropship.EndSignal( "OnDeath" )
    dropship.EndSignal( "OnDestroy" )

    RespawnShipStruct curShipStruct = file.respawnShipTable[dropship]
    OnThreadEnd(
        function(): ( player, curShipStruct )
        {
            if( IsValid( player ) )
            {
				player.ClearParent()
                player.Anim_Stop()
				player.ClearInvulnerable()
                curShipStruct.playersInDropship.removebyvalue( player )
            }
        }
    )

    dropship.WaitSignal( "deploy" )
    WaittillAnimDone( player )
	FindNearestSafeSpotAndPutEntity( player, 1 )
}

entity function CreateRespawnShip( int team )
{
    array< entity > spawnPoint = file.respawnShipSpawns
	entity node = spawnPoint[ GetSpawnPointIndex( spawnPoint, team ) ]
	entity dropship = CreateDropship( team, node.GetOrigin(), node.GetAngles() ) //< 0,RandomInt( 360 ), 0 >
	dropship.SetInvulnerable()
	HideName( dropship )
	dropship.SetNoTarget( true ) // don't let npcs attack it
	//dropship.SetMaxHealth( 25000 )
	//dropship.SetHealth( 25000 )
	//SetShieldHealthMaxWithFix( dropship, 2000 )
    //SetShieldHealthWithFix( dropship, 2000 )
	AddEntityCallback_OnKilled( dropship, RespawnShipKilled )

    return dropship
}

void function RespawnShipKilled( entity dropship, var damageInfo )
{
	file.availableRespawnShips.removebyvalue( dropship )
	foreach ( entity player in file.respawnShipTable[dropship].playersInDropship )
	{
		if ( IsValid( player ) )
		{
			player.ClearParent()
			player.Die( DamageInfo_GetAttacker( damageInfo ), DamageInfo_GetWeapon( damageInfo ), { damageSourceId = eDamageSourceId.evac_dropship_explosion, scriptType = DF_GIB } )
		}
	}
}

void function RespawnShipThink( entity dropship )
{
	dropship.EndSignal( "OnDestroy" )
    int team = dropship.GetTeam()

    RespawnShipStruct shipStruct
    file.respawnShipTable[dropship] <- shipStruct
	shipStruct.dropshipState = eDropshipState.InProgress
    file.availableRespawnShips.append( dropship )
    
	if ( team == TEAM_MILITIA )
	{
	    dropship.SetModel( $"models/vehicle/crow_dropship/crow_dropship_hero.mdl" )
		dropship.SetValueForModelKey( $"models/vehicle/crow_dropship/crow_dropship_hero.mdl" )
	}
	else
	{
		dropship.SetModel( $"models/vehicle/goblin_dropship/goblin_dropship_hero.mdl" )
		dropship.SetValueForModelKey( $"models/vehicle/goblin_dropship/goblin_dropship.mdl" )
	}
	DispatchSpawn( dropship )

    if ( team == TEAM_MILITIA )
	    dropship.SetModel( $"models/vehicle/crow_dropship/crow_dropship_hero.mdl" )
	else
		dropship.SetModel( $"models/vehicle/goblin_dropship/goblin_dropship_hero.mdl" )

	thread PlayAnim( dropship, RespawnShipGetAnimation() )

	array<string> anims = GetRandomDropshipDropoffAnims()

	//thread WarpinEffect( $"models/vehicle/crow_dropship/crow_dropship.mdl", anims[0], file.dropship.GetOrigin(),f ile.dropship.GetAngles() ) //this does not work
	thread WarpInEffectRespawnShip( dropship )
    dropship.WaitSignal( "deploy" )
	shipStruct.dropshipState = eDropshipState.Returning
    file.availableRespawnShips.removebyvalue( dropship )

	foreach( int i,entity player in shipStruct.playersInDropship )
	{
        if( IsAlive( player ) )
		    thread RespawnShipDropPlayer( player, dropship, i )
	}
	shipStruct.playersInDropship.clear()

	wait 8
	shipStruct.dropshipState = eDropshipState.Idle
}

void function RespawnShipDropPlayer( entity player, entity dropship, int playerDropshipIndex )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
    dropship.EndSignal( "OnDestroy" )

    RespawnShipStruct curShipStruct = file.respawnShipTable[dropship]

	OnThreadEnd(
		function() : ( player, curShipStruct )
		{
			try{
			    curShipStruct.playersInDropship.removebyvalue( player )
			}catch(err){}
		}
	)
	FirstPersonSequenceStruct jumpSequence
	jumpSequence.firstPersonAnim = DROPSHIP_EXIT_ANIMS_POV[ playerDropshipIndex ]
	jumpSequence.thirdPersonAnim = DROPSHIP_EXIT_ANIMS[ playerDropshipIndex ]
	jumpSequence.attachment = "ORIGIN"
	jumpSequence.blendTime = 0.0
	jumpSequence.viewConeFunction = ViewConeWide

	thread FirstPersonSequence( jumpSequence, player, dropship )
	WaittillAnimDone( player )
	player.ClearParent()
	ClearPlayerAnimViewEntity( player )
	player.ClearInvulnerable()
	FindNearestSafeSpotAndPutEntity( player, 1 )
}

void function WarpInEffectRespawnShip( entity dropship )
{
    dropship.EndSignal( "OnDestroy" )
	float sfxWait = 0.1
	float totalTime = WARPINFXTIME
	float preWaitTime = 0.16 // give it some time so it's actually playing anim, and we can get it's "origin" attatch
	string sfx = "dropship_warpin"

	wait preWaitTime

	int attach = dropship.LookupAttachment( "origin" )
	vector origin = dropship.GetAttachmentOrigin( attach )
	vector angles = dropship.GetAttachmentAngles( attach )

	entity fx = PlayFX( FX_GUNSHIP_CRASH_EXPLOSION_ENTRANCE, origin, angles )
	fx.FXEnableRenderAlways()
	fx.DisableHibernation()

	wait sfxWait
	EmitSoundAtPosition( TEAM_UNASSIGNED, origin, sfx )

	wait totalTime - sfxWait
}

string function RespawnShipGetAnimation()
{
	//if( file.animationOverride!="" )
	//    return file.animationOverride

	switch( GetMapName() )
	{
		case "mp_homestead":
			return "dropship_coop_respawn_homestead"
		case "mp_lagoon":
			return "dropship_coop_respawn_lagoon"
		case "mp_overlook":
			return "dropship_coop_respawn_overlook"
		case "mp_outpost":
			return "dropship_coop_respawn_outpost"
		case "mp_wargames":
			return "dropship_coop_respawn_wargames"
		case "mp_digsite":
			return "dropship_coop_respawn_digsite"
	}
	return "dropship_coop_respawn"
}

int function GetSpawnPointIndex( array< entity > points, int team )
{
	// modified: make a new function so ai gamemodes don't have to re-decide for each spawn
	//entity zone = DecideSpawnZone_Generic( points, team )
	entity zone = GetCurrentSpawnZoneForTeam( team )

	if ( IsValid( zone ) )
	{
		// 20 Tries to get a random point close to the zone
		for ( int i = 0; i < 20; i++ )
		{
			int index = RandomInt( points.len() )

			if ( Distance2D( points[ index ].GetOrigin(), zone.GetOrigin() ) < 6000 )
				return index
		}
	}

	return RandomInt( points.len() )
}