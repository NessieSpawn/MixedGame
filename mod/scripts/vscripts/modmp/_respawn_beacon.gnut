untyped // for AddCallback_OnUseEntity()

global function Respawn_Beacon_Init

global function SpawnRespawnBeacons // this is required to spawn beacons
global function SetRespawnBeaconUseTime
global function GetAllRespawnBeaconEntities

global function GetTeamActiveRespawnBanners

// Callbacks
global function AddCallback_OnPlayerRespawnBannerDropped
global function AddCallback_OnPlayerRespawnBannerCollected
global function AddCallback_OnPlayerActivateRespawnBeacon

struct dropshipAnimData
{
	string idleAnim
	string idlePOVAnim
	string jumpAnim
	string jumpPOVAnim
	string attachment = "origin"
	bool hideProxy = true
	void functionref( entity ) viewConeFunc
	float yawAngle
	string firstPersonJumpOutSound // Unfortunately first person anims play for everybody, not just the person who the anim is played upon, so script needs to play the sound as opposed to a qc entry
}

struct BeaconPlayerStruct
{
    //array<entity> carryingBanners // array<entity> for saving banner owner
}

const float DEFAULT_RESPAWN_BEACON_USE_TIME         = 5.0

struct
{
    // Callback Array
    array< void functionref( entity, entity ) > playerBannerDroppedCallbacks
    array< void functionref( entity, entity ) > playerBannerCollectedCallbacks
    array< void functionref( entity, array<entity> ) > playerBeaconActivateCallbacks

    float respawnBeaconUseTime = DEFAULT_RESPAWN_BEACON_USE_TIME

    array<entity> respawnBeacons
    array<entity> respawnDropships

    table< int, array<entity> > teamCarringBanners
    table< entity, float > playerLastCollectedBannerTime // required for check if we can collect next banner
    //table< int, BeaconPlayerStruct > playerBeaconTable // it's better to use player's uid instead of the entity
    array<dropshipAnimData> dropshipAnimDataList
    table<entity, bool> playerRespawningFromDropship // for we tracking respawning players, so SetPlayerCameraToIntermissionCam() won't mess up other scripts
} file


void function Respawn_Beacon_Init()
{
    // Respawn Beacon Init
    InitRespawnBeaconDropship()
    PrecacheModel( $"models/Robots/mobile_hardpoint/mobile_hardpoint.mdl" )
    RegisterSignal( "OnContinousUseStopped" )
    RegisterSignal( "PlayerDroppingRespawnBanner" )
    RegisterSignal( "PlayerCollectingRespawnBanner" )
    RegisterSignal( "PlayerActivatingRespawnBeacon" )

    AddCallback_OnClientConnected( OnClientConnected )
    AddCallback_GameStateEnter( eGameState.WinnerDetermined, OnGameWinnerDetermined )
    AddCallback_OnPlayerKilled( OnPlayerKilled )
}

// Callbacks
void function AddCallback_OnPlayerRespawnBannerDropped( void functionref( entity, entity ) callbackFunc )
{
    file.playerBannerDroppedCallbacks.append( callbackFunc )
}

void function AddCallback_OnPlayerRespawnBannerCollected( void functionref( entity, entity ) callbackFunc )
{
    file.playerBannerCollectedCallbacks.append( callbackFunc )
}

void function AddCallback_OnPlayerActivateRespawnBeacon( void functionref( entity, array<entity> ) callbackFunc )
{
    file.playerBeaconActivateCallbacks.append( callbackFunc )
}


//////////////////////////////
///// CALLBACK FUNCTIONS /////
//////////////////////////////

void function OnClientConnected( entity player )
{
    InitBeaconPlayer( player )
    //TrackBannerCarrierLifeTime( player )
}

void function OnGameWinnerDetermined()
{
    ClearRespawnDropships()
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
    DropPlayerBanner( victim, damageInfo )
}

//////////////////////////////////
///// CALLBACK FUNCTIONS END /////
//////////////////////////////////



////////////////////////////
///// PLAYER FUNCTIONS /////
////////////////////////////

void function InitBeaconPlayer( entity player )
{
    //BeaconPlayerStruct emptyStruct
    //file.playerBeaconTable[ player.GetUID() ] <- emptyStruct
    file.playerLastCollectedBannerTime[ player ] <- 0
    file.playerRespawningFromDropship[ player ] <- false

    foreach ( entity beacon in file.respawnBeacons ) // show the beacon!
		beacon.Minimap_AlwaysShow( 0, player )
}

////////////////////////////////
///// PLAYER FUNCTIONS END /////
////////////////////////////////



////////////////////////////////////
///// RESPAWN BEACON FUNCTIONS /////
////////////////////////////////////

void function SpawnRespawnBeacons()
{
    foreach ( entity spawnpoint in GetEntArrayByClass_Expensive( "info_hardpoint" ) )
    {
        // use hardpoints from amped hardpoint
        if ( !spawnpoint.HasKey( "gamemode_cp" ) )
			continue
        if ( spawnpoint.kv.gamemode_cp == "0" )
            continue

        asset modelName = spawnpoint.GetModelName()
        vector origin = spawnpoint.GetOrigin()
        vector angles = spawnpoint.GetAngles()
        int solidType = 6 // SOLID_VPHYSICS
        entity beacon = CreateEntity( "prop_script" ) //CreatePropDynamic( spawnpoint.GetModelName(), spawnpoint.GetOrigin(), spawnpoint.GetAngles(), 6 )
		beacon.SetValueForModelKey( modelName )
        beacon.SetOrigin( origin )
        beacon.SetAngles( angles )
        beacon.kv.solid = solidType
        beacon.kv.fadedist = 10000 // prevent it from fading
        Highlight_SetOwnedHighlight( beacon, "friendly_ai" ) // init the highlight
        
        DispatchSpawn( beacon )

        beacon.SetModel( modelName )
        thread ResetBeaconTeamToEnableHighlight( beacon ) // pretty hacky
        //Highlight_SetFriendlyHighlight( beacon, "battery_thief" ) // how to highlight this?
        Highlight_SetNeutralHighlight( beacon, "enemy_boss_bounty" )
        //beacon.Highlight_SetParam( 0, 0, < 0, 0, 255 > ) // neatural

        beacon.SetUsableByGroup( "pilot" )
        thread PlayAnim( beacon, "mh_inactive_idle" )

        // minimap icons
        beacon.Minimap_SetCustomState( eMinimapObject_prop_script.FW_BUILDSITE_SHIELDED )
        foreach ( entity player in GetPlayerArray() )
			beacon.Minimap_AlwaysShow( 0, player )
        beacon.Minimap_SetAlignUpright( true )

        thread RespawnBeaconThink( beacon ) // main mechanic function
        file.respawnBeacons.append( beacon )
    }
}

array<entity> function GetAllRespawnBeaconEntities()
{
    return file.respawnBeacons
}

// this is really hacky, but it will work if you want the entity spawn with it's highlight
void function ResetBeaconTeamToEnableHighlight( entity beacon )
{
    beacon.EndSignal( "OnDestroy" )
    SetTeam( beacon, TEAM_BOTH )
    wait 2
    SetTeam( beacon, TEAM_UNASSIGNED )
}

void function RespawnBeaconThink( entity beacon )
{
    beacon.EndSignal( "OnDestroy" )

    beacon.SetUsePrompts( "", "按住 %use% 提交旗幟卡" ) // this only needs "hold" prompts, but ttf don't have such a usage
    while ( true )
    {
        beacon.SetUsableByGroup( "pilot" )
        table result = beacon.WaitSignal( "OnPlayerUse" )
        entity user = expect entity ( result.player )
        waitthread PlayerAttemptUseRespawnBeacon( user, beacon )
    }
}

void function SetRespawnBeaconUseTime( float useTime )
{
    file.respawnBeaconUseTime = useTime
}

const float RESPAWN_BEACON_USE_DIST2            = 64 * 64 

void function PlayerAttemptUseRespawnBeacon( entity player, entity beacon )
{
    if ( GetGameState() > eGameState.Playing )
    {
        SendHudMessage( player, "不在可用時期", -1, -0.3, 255, 255, 0, 255, 0.2, 1.5, 0.5 )
        return
    }

    if ( IsPlayerCollectingBanner( player ) ) // player is still collecting banners
        return

    int team = player.GetTeam()
    array<entity> playersToRespawn = GetTeamActiveRespawnBanners( team ) //GetPlayerActiveBanners( player )
    if ( playersToRespawn.len() == 0 ) // no banners to recover
    {
        SendHudMessage( player, "沒有可用旗幟", -1, -0.3, 255, 255, 0, 255, 0.2, 1.5, 0.5 )
        return
    }

    beacon.UnsetUsable()
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    beacon.EndSignal( "OnDestroy" )
    player.EndSignal( "OnContinousUseStopped" )
    int playerEHandle = player.GetEncodedEHandle()
    float endTime = Time() + file.respawnBeaconUseTime

    OnThreadEnd
    (
        function(): ( player )
        {
            if ( IsValid( player ) )
            {
                Remote_CallFunction_NonReplay( player, "ServerCallback_BLEEDOUT_StopFirstAidProgressBar", 1 )
            }
        }
    )

    Remote_CallFunction_NonReplay( player, "ServerCallback_BLEEDOUT_StartFirstAidProgressBar", endTime, playerEHandle, playerEHandle, 1 ) // how does attemptID work?
    waitthread TrackBeaconContinuousUse( player, beacon, file.respawnBeaconUseTime )

    // successfully reached this point
    RespawnBeaconActivate( beacon, team )
    playersToRespawn = GetTeamActiveRespawnBanners( team ) //GetPlayerActiveBanners( player ) // update array
    
    // run callbacks
    foreach ( void functionref( entity, array<entity> ) callbackFunc in file.playerBeaconActivateCallbacks )
    {
        callbackFunc( player, playersToRespawn )
    }
    
    vector origin = beacon.GetOrigin()
    origin.z += float ( RandomIntRange( 500, 800 ) ) // add randomness
    vector angles = beacon.GetAngles()
    angles.y = float ( RandomInt( 360 ) ) // add randomness
    thread RespawnPlayersInDropshipAtPoint( playersToRespawn, team, origin, angles )
    ClearTeamBanners( team )
}

void function TrackBeaconContinuousUse( entity player, entity useTarget, float useTime )
{
    player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	useTarget.EndSignal( "OnDeath" )
	useTarget.EndSignal( "OnDestroy" )

	table result = {}
	result.success <- false

    int moveLockEffect = StatusEffect_AddEndless( player, eStatusEffect.move_slow, 1.0 ) // 1.0 will lock player's movement
    EmitSoundOnEntityOnlyToPlayer( player, player, "Hardpoint_Amped_ProgressBar" )

    HolsterAndDisableWeapons( player )

	OnThreadEnd
	(
		function() : ( player, useTarget, result, moveLockEffect )
		{
            if ( IsValid( player ) )
            {
                if ( !result.success ) // interrupted
                    player.Signal( "OnContinousUseStopped" )

                // defensive fix, restore movements
			    StatusEffect_Stop( player, moveLockEffect )

                // restore weapon usage
                DeployAndEnableWeapons( player )
                //player.DeployWeapon()
                //player.Server_TurnOffhandWeaponsDisabledOff()

                StopSoundOnEntity( player, "Hardpoint_Amped_ProgressBar" )
            }
		}
	)

    int team = player.GetTeam()
    float maxDist2 = DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) + RESPAWN_BEACON_USE_DIST2
    float startTime = Time()
	while ( Time() < startTime + useTime && player.UseButtonPressed() && !player.IsPhaseShifted() && DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) <= maxDist2 )
	{
        // disable weapon usage
        // function HolsterAndDisableWeapons() now has stack system for HolsterWeapon() method... no need to loop anymore I think
        //player.HolsterWeapon()
        //player.Server_TurnOffhandWeaponsDisabledOn()

        SendHudMessage( player, "正在使用重生信標 [ " + CreateProgressBarString( Time(), startTime, useTime ) + " ]", -1, -0.3, 255, 255, 100, 255, 0, 0.2, 0 )

		if( player.ContextAction_IsActive() ) // being interupted by executions!
			return
        if ( GetTeamActiveRespawnBanners( team ).len() == 0 ) // no valid banners
            return
		WaitFrame()
	}

	if ( player.UseButtonPressed() && DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) <= maxDist2  )
		result.success = true
}

string function CreateProgressBarString( float nowGlobalTime, float startGlobalTime, float totalTime )
{
    int barLength = 20
    float progress = ( nowGlobalTime - startGlobalTime ) / totalTime
    //print( "Total progress is: " + string( progress ) )
    int numToReplace = int( barLength * progress )
    //print( "numToReplace is: " + string( numToReplace ) )
    string progessBar
    for( int i = 0; i < barLength; i++ )
    {
        if( i <= numToReplace )
            progessBar += "/"
        else
            progessBar += "-"
    }
    string tempBar = progessBar
    return tempBar
}

void function RespawnBeaconActivate( entity beacon, int team )
{
    thread RespawnBeaconActivate_Threaded( beacon, team )
}

const asset RESPAWN_BEACON_ACTIVATE_FX = $"P_wpn_arcTrap_start"
const asset RESPAWN_BEACON_RING_FX = $"P_arcTrap_light"
const asset RESPAWN_BEACON_INDICATOR_FX = $"P_ar_titan_droppoint"
const float RESPAWN_BEACON_ACTIVATE_TIME = 2.0 // good for animations to play

void function RespawnBeaconActivate_Threaded( entity beacon, int team )
{
    beacon.EndSignal( "OnDestroy" )
    vector origin = beacon.GetOrigin()
    vector angles = beacon.GetAngles()
    vector surfaceNormal = < 0, 0, 1 >
    SetTeam( beacon, team ) // set team for a while

    entity fxModel = CreatePropDynamic( $"models/weapons/sentry_shield/sentry_shield_proj.mdl", origin, angles )
	fxModel.Hide()

    array<entity> activeFXs
    int attachID = fxModel.LookupAttachment( "fx_center" )
    int startFxId = GetParticleSystemIndex( RESPAWN_BEACON_ACTIVATE_FX )
    activeFXs.append( StartParticleEffectOnEntity_ReturnEntity( fxModel, startFxId, FX_PATTACH_POINT_FOLLOW, attachID ) )

	int ringFxId = GetParticleSystemIndex( RESPAWN_BEACON_RING_FX )
    activeFXs.append( StartParticleEffectOnEntity_ReturnEntity( fxModel, ringFxId, FX_PATTACH_POINT_FOLLOW, attachID ) )

    int indicFxId = GetParticleSystemIndex( RESPAWN_BEACON_INDICATOR_FX )
    entity indicatorFX = StartParticleEffectInWorld_ReturnEntity( indicFxId, origin, surfaceNormal )
    EffectSetControlPointVector( indicatorFX, 1, < 128,188,255 > ) // blue
	indicatorFX.DisableHibernation()
    activeFXs.append( indicatorFX )

    beacon.Signal( "PlayerActivatingRespawnBeacon" )
    EmitSoundOnEntity( beacon, "hardpoint_console_captured" )
    thread PlayAnim( beacon, "mh_inactive_2_active" ) // amped animation

    OnThreadEnd
    (
        function(): ( fxModel, activeFXs, beacon )
        {
            foreach ( entity fx in activeFXs )
            {
                if ( IsValid( fx ) )
                    EffectStop( fx )
            }

            if ( IsValid( fxModel ) )
                fxModel.Destroy()

            if ( IsValid( beacon ) )
            {
                SetTeam( beacon, TEAM_UNASSIGNED )
                thread PlayAnim( beacon, "mh_active_2_inactive" )
            }
        }
    )

    wait RESPAWN_BEACON_ACTIVATE_TIME
}

void function InitRespawnBeaconDropship()
{
    dropshipAnimData dataForPlayerA
    dataForPlayerA.idleAnim           = "Classic_MP_flyin_exit_playerA_idle"
    dataForPlayerA.idlePOVAnim        = "Classic_MP_flyin_exit_povA_idle"
    dataForPlayerA.jumpAnim           = "Classic_MP_flyin_exit_playerA_jump"
    dataForPlayerA.jumpPOVAnim        = "Classic_MP_flyin_exit_povA_jump"
    dataForPlayerA.viewConeFunc       = ViewConeWide
    dataForPlayerA.yawAngle           = -18.0
    dataForPlayerA.firstPersonJumpOutSound = "commander_sequence_soldier_a_jump"

    dropshipAnimData dataForPlayerB
    dataForPlayerB.idleAnim           = "Classic_MP_flyin_exit_playerB_idle"
    dataForPlayerB.idlePOVAnim        = "Classic_MP_flyin_exit_povB_idle"
    dataForPlayerB.jumpAnim           = "Classic_MP_flyin_exit_playerB_jump"
    dataForPlayerB.jumpPOVAnim        = "Classic_MP_flyin_exit_povB_jump"
    dataForPlayerB.viewConeFunc       = ViewConeWide
    dataForPlayerB.yawAngle           = 8.0
    dataForPlayerB.firstPersonJumpOutSound = "commander_sequence_soldier_b_jump"

    dropshipAnimData dataForPlayerC
    dataForPlayerC.idleAnim           = "Classic_MP_flyin_exit_playerC_idle"
    dataForPlayerC.idlePOVAnim        = "Classic_MP_flyin_exit_povC_idle"
    dataForPlayerC.jumpAnim           = "Classic_MP_flyin_exit_playerC_jump"
    dataForPlayerC.jumpPOVAnim        = "Classic_MP_flyin_exit_povC_jump"
    dataForPlayerC.viewConeFunc       = ViewConeWide
    dataForPlayerC.yawAngle           = 8.0
    dataForPlayerC.firstPersonJumpOutSound = "commander_sequence_soldier_c_jump"

    dropshipAnimData dataForPlayerD
    dataForPlayerD.idleAnim           = "Classic_MP_flyin_exit_playerD_idle"
    dataForPlayerD.idlePOVAnim        = "Classic_MP_flyin_exit_povD_idle"
    dataForPlayerD.jumpAnim           = "Classic_MP_flyin_exit_playerD_jump"
    dataForPlayerD.jumpPOVAnim        = "Classic_MP_flyin_exit_povD_jump"
    dataForPlayerD.viewConeFunc       = ViewConeWide
    dataForPlayerD.yawAngle           = -16.0
    dataForPlayerD.firstPersonJumpOutSound = "commander_sequence_soldier_d_jump"

    file.dropshipAnimDataList = [ dataForPlayerA, dataForPlayerB, dataForPlayerC, dataForPlayerD ]
}

const string RESPAWN_DROPSHIP_TARGETNAME        = "respawn_dropship"

void function RespawnPlayersInDropshipAtPoint( array<entity> players, int team, vector origin, vector angles )
{
	entity dropship = CreateDropship( team, origin, angles )
	//SetSpawnOption_AISettings( dropship, "npc_dropship_hero" )
	SetTargetName( dropship, RESPAWN_DROPSHIP_TARGETNAME )
    HideName( dropship ) // no need to show health bar since it's invulnerable
    dropship.SetNoTarget( true ) // don't let npcs attack it
	DispatchSpawn( dropship )
    AddRespawnDropship( dropship )
    //dropship.SetModel( $"models/vehicle/goblin_dropship/goblin_dropship_hero.mdl" ) // force using imc dropship model
	dropship.SetInvulnerable()
	dropship.DisableHibernation()
	EmitSoundOnEntity( dropship, "goblin_imc_evac_hover" )
	//thread JetwashFX( dropship ) // stub function, no need to use

	dropship.SetOrigin( origin )
	dropship.SetAngles( angles )
	Attachment attachResult = dropship.Anim_GetAttachmentAtTime( "dropship_classic_mp_flyin", "ORIGIN", 0.0 )

	int i=0
	foreach ( entity player in players )
	{
		if ( IsValid( player ) )
		{
			thread RespawnBeacon_PutPlayerInDropship( player, dropship, i, attachResult.position )
		}
		i++
	}

	EndSignal( dropship, "OnDestroy" )

	thread PlayAnim( dropship, "dropship_colony_mcor_intro_idle", origin, angles ) // "dropship_classic_mp_flyin_idle" don't exist in ttf2
	dropship.MakeInvisible()
	waitthread __WarpInEffectShared( attachResult.position, attachResult.angle, "dropship_warpin", 0.0 )
	dropship.MakeVisible()
	waitthread PlayAnim( dropship, "dropship_classic_mp_flyin", origin, angles )
	dropship.Destroy()
}

void function RespawnBeacon_PutPlayerInDropship( entity player, entity ship, int pos, vector teleportOrigin )
{
	ship.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

    file.playerRespawningFromDropship[ player ] = true // mark as player respawning!
	dropshipAnimData animData = file.dropshipAnimDataList[ pos ]

	FirstPersonSequenceStruct idleAnimSequence
	idleAnimSequence.firstPersonAnim = animData.idlePOVAnim
	idleAnimSequence.thirdPersonAnim = animData.idleAnim
	idleAnimSequence.viewConeFunction = ViewConeFree
	idleAnimSequence.attachment = animData.attachment
	idleAnimSequence.hideProxy = animData.hideProxy

	FirstPersonSequenceStruct jumpAnimSequence
	jumpAnimSequence.firstPersonAnim = animData.jumpPOVAnim
	jumpAnimSequence.thirdPersonAnim = animData.jumpAnim
	jumpAnimSequence.viewConeFunction = ViewConeTight
	jumpAnimSequence.attachment = animData.attachment
	jumpAnimSequence.hideProxy = animData.hideProxy

	// player.Signal( "StopPostDeathLogic" )
	AddCinematicFlag( player, CE_FLAG_INTRO )
	AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
	//AddCinematicFlag( player, CE_FLAG_EMBARK ) // DoF, annoying

	entity dummyEnt = CreatePropDynamic( $"models/humans/pilots/pilot_medium_reaper_m.mdl" ) // TODO: use generic model.  Can't use player settings here since they could be a spectator
	float idleTime = dummyEnt.GetSequenceDuration( animData.idleAnim )
	float jumpTime = dummyEnt.GetSequenceDuration( animData.jumpAnim )
	float totalTime = idleTime + jumpTime

	dummyEnt.Destroy()

	//player.StartObserverMode( OBS_MODE_CHASE )
	//player.SetObserverTarget( ship )
    // ttf doesn't support spectating a dropship
    entity camera = CreateEntity( "point_viewcontrol" )
	camera.SetParent( ship, "Origin" )
    camera.SetAngles( < 45, -90, 0 > ) // facing the dropship
    camera.SetOrigin( < 0, 1000, 1000 > ) // offset
    camera.kv.spawnflags = 56
	DispatchSpawn( camera )
	player.SetViewEntity( camera, true )

	ScreenFadeFromBlack( player, 1.0, 1.0 )

	table<string,bool> e
	e[ "clearDof" ] <- true
	e[ "didHolsterAndDisableWeapons" ] <- false

	OnThreadEnd(
		function () : ( player, e, camera )
		{
			if ( IsValid( player ) )
			{
				RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
				RemoveCinematicFlag( player, CE_FLAG_INTRO )

				if ( e[ "clearDof" ] )
                {
					RemoveCinematicFlag( player, CE_FLAG_EMBARK )
                    player.ClearViewEntity()
                }

				if ( e[ "didHolsterAndDisableWeapons" ] )
					DeployAndEnableWeapons( player )

				player.ClearParent()
				ClearPlayerAnimViewEntity( player )
				player.ClearInvulnerable()

                file.playerRespawningFromDropship[ player ] = false // clean up
			}

            if ( IsValid( camera ) )
                camera.Destroy()
		}
	)

	//waitthread FirstPersonSequence( idleAnimSequence, player, ship )
	wait idleTime

	player.StopObserverMode()
    //player.ClearViewEntity()
	ClearPlayerEliminated( player )
	if ( !IsAlive( player ) )
		DecideRespawnPlayer( player )

	player.SetOrigin( ship.GetOrigin() )

	thread FadePlayerView( player, 0.1, e )
	HolsterAndDisableWeapons( player )
	e[ "didHolsterAndDisableWeapons" ] <- true
	player.SetInvulnerable()
	EmitSoundOnEntityOnlyToPlayer( player, player, animData.firstPersonJumpOutSound )
	waitthread FirstPersonSequence( jumpAnimSequence, player, ship )
	FallTempAirControl( player )

	//PlayBattleChatterLineToSpeakerAndTeam( player, "bc_returnFromRespawn" )
}

void function FadePlayerView( entity player, float duration, table<string,bool> e )
{
	player.EndSignal( "OnDeath" )
	wait duration
	RemoveCinematicFlag( player, CE_FLAG_EMBARK )
	e[ "clearDof" ] = false
	ScreenFadeFromBlack( player, 1.0, 1.0 )
}

const float FALL_AIR_CONTROL_ACCELERATION       = 800
const float FALL_AIR_CONTROL_SPEED              = 1000
const float FALL_AIR_CONTROL_DURATION           = 0.5

void function FallTempAirControl( entity player )
{
    thread FallTempAirControl_Threaded( player )
}

void function FallTempAirControl_Threaded( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )

    table saved = {}
    saved.airAccel <- float( player.kv.airAcceleration )
    saved.airSpeed <- float( player.kv.airSpeed )

    OnThreadEnd(
        function(): ( player, saved )
        {
            if ( IsValid( player ) )
            {
                player.kv.airAcceleration = saved.airAccel
                player.kv.airSpeed = saved.airSpeed
            }
        }
    )
    
    wait 0.2 // the sequence's remaining time
    player.SetVelocity( < 0, 0, -200 > ) // better visual for match the jumping sequence
    player.kv.airAcceleration = FALL_AIR_CONTROL_ACCELERATION
    player.kv.airSpeed = FALL_AIR_CONTROL_SPEED
    
    wait FALL_AIR_CONTROL_DURATION
}

// add the dropship to array, for eGameState.WinnerDetermined we clean up
void function AddRespawnDropship( entity ship )
{
    file.respawnDropships.append( ship )

    thread TrackDropshipLifeTime( ship )
}

void function TrackDropshipLifeTime( entity ship )
{
    WaitSignal( ship, "OnDestroy" )
    // wait for it being destroyed and clean the array
    ArrayRemoveInvalid( file.respawnDropships )
}

void function ClearRespawnDropships()
{
    foreach ( entity player in GetPlayerArray() )
    {
        if ( !IsAlive( player ) && file.playerRespawningFromDropship[ player ] ) // not respawned yet!
            SetPlayerCameraToIntermissionCam( player )
    }
    foreach ( entity dropship in file.respawnDropships )
    {
        if ( IsValid( dropship ) )
            dropship.Destroy()
    }
    file.respawnDropships.clear()
}

////////////////////////////////////////
///// RESPAWN BEACON FUNCTIONS END /////
////////////////////////////////////////



///////////////////////////////////
///// PLAYER BANNER FUNCTIONS /////
///////////////////////////////////

/*
void function TrackBannerCarrierLifeTime( entity player )
{
    thread TrackBannerCarrierLifeTime_Threaded( player )
}

void function TrackBannerCarrierLifeTime_Threaded( entity player )
{
    string uid = player.GetUID()
    
    player.WaitSignal( "OnDestroy" ) // track the lifetime

    array<entity> playerBanners = GetPlayerActiveBanners( null, uid )
    // drop all the banners again
    foreach ( entity player in playerBanners )
    {
        DropPlayerBanner( player )
    }
}
*/

void function DropPlayerBanner( entity player, var damageInfo = null ) // maybe need damageinfo if player drops from edge, redirect their banners
{
    thread DropPlayerBanner_Threaded( player, damageInfo )
}

void function DropPlayerBanner_Threaded( entity player, var damageInfo )
{
    if ( file.respawnBeacons.len() == 0 ) // at least have one respawnBeacon valid to drop the banner
        return
    entity banner = CreatePlayerBanner( player )
}

/*
void function CollectedBannerLifeTime( entity collector, entity player )
{
    player.EndSignal( "OnDestroy" )

    table result = {}
    result.bannerDropped <- false

    OnThreadEnd(
        function(): ( collector, player, result )
        {
            if ( !IsValid( player ) ) // banner owner disconnected
            {
                if ( !result.bannerDropped && IsValid( collector ) ) // collector still alive
                    ArrayRemoveInvalid( file.playerBeaconTable[ collector.GetUID() ].carryingBanners ) // remove the null banner
            }
        }
    )

    collector.WaitSignal( "OnDeath", "OnDestroy" ) // drop all the collected banners on death
    result.bannerDropped = true // mark as banner dropped
}
*/

const asset PLAYER_BANNER_MODEL             = $"models/weapons/ammoboxes/backpack_single.mdl"  

entity function CreatePlayerBanner( entity player )
{
    vector origin = player.GetOrigin() // + < 0,0,31 > // offset for the prop
    vector angles = < 0, player.GetAngles().y + 90, 0 > // don't want to rotate so much, yaw is enough
    int solidType = 6 // SOLID_VPHYSICS

    entity banner = CreatePropDynamic( PLAYER_BANNER_MODEL, origin, angles, solidType )
    banner.kv.fadedist = 10000 // prevent it from fading out
    banner.SetUsable()
    banner.SetUsableByGroup( "friendlies pilot" )
    banner.SetUsePrompts( "", "按下 %use% 撿起 " + player.GetPlayerName() + " 的旗幟" )
    AddCallback_OnUseEntity( banner, OnUsePlayerBanner )

    int team = player.GetTeam()

    banner.SetOwner( player )
    SetTeam( banner, team )
    Highlight_SetFriendlyHighlight( banner, "sp_friendly_hero" ) // highlight it!
    banner.Highlight_SetParam( 1, 0, HIGHLIGHT_COLOR_ENEMY ) // notify the player
    
    // signals
    banner.Signal( "PlayerDroppingRespawnBanner" )
    player.Signal( "PlayerDroppingRespawnBanner" )
    // run callbacks
    foreach ( void functionref( entity, entity ) callbackFunc in file.playerBannerDroppedCallbacks )
    {
        callbackFunc( player, banner )
    }

    // minimap icon
    banner.Minimap_SetCustomState( eMinimapObject_prop_script.AT_BANK )
    banner.Minimap_AlwaysShow( team, null )

    thread BannerLifeTime( banner, player )

    return banner
}

function OnUsePlayerBanner( banner, collector )
{
    expect entity ( banner )
    expect entity ( collector )

    if ( IsPlayerCollectingBanner( collector ) )
        return

    entity player = banner.GetOwner()
    PlayerCollectBanner( collector, player, banner )

    //file.playerBeaconTable[ collector.GetUID() ].carryingBanners.append( player )
    //thread CollectedBannerLifeTime( collector, player )
}

bool function IsPlayerCollectingBanner( entity player )
{
    /* // reworked for better behavior
    entity weapon = player.GetActiveWeapon()
    if ( IsValid( weapon ) )
    {
        if ( weapon.GetWeaponClassName() == BEACON_BANNER_WEAPON ) // the player still collecting another banner
            return true
    }
    */

    if ( file.playerLastCollectedBannerTime[ player ] + BEACON_BANNER_USE_TIME >= Time() ) // means player in cooldown
        return true

    return false
}

void function PlayerCollectBanner( entity collector, entity bannerOwner, entity banner )
{
    int team = banner.GetTeam()
    if ( !( team in file.teamCarringBanners ) )
        file.teamCarringBanners[ team ] <- [] // init
    file.teamCarringBanners[ team ].append( bannerOwner ) // make banner's owner able to be respawned
    
    // send signals
    collector.Signal( "PlayerCollectingRespawnBanner" )
    banner.Signal( "PlayerCollectingRespawnBanner" )
    thread BannerWeaponAnimationThink( collector )
    
    NSSendInfoMessageToPlayer( collector, "回收了 " + bannerOwner.GetPlayerName() + " 的旗幟" )

    // run callbacks here
    foreach ( void functionref( entity, entity ) callbackFunc in file.playerBannerCollectedCallbacks )
    {
        callbackFunc( collector, bannerOwner )
    }

    // disable banner usage
    Highlight_ClearFriendlyHighlight( banner )
    banner.NotSolid()
    banner.UnsetUsable()
    banner.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
}

const string BEACON_BANNER_WEAPON               = "mp_ability_burncardweapon"
const array<string> BEACON_BANNER_WEAPON_MODS   = ["banner_collector"]
const float BEACON_BANNER_USE_TIME              = 1.5 // likely works, for the animation sequence

void function BannerWeaponAnimationThink( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "PlayerCollectingRespawnBanner" )

    array<string> savedMods
    bool hasBurnCard = false
    // check existing
    entity burncard = player.GetOffhandWeapon( OFFHAND_INVENTORY )
    if ( IsValid( burncard ) )
    {
        if ( burncard.GetWeaponClassName() == BEACON_BANNER_WEAPON )
        {
            savedMods = burncard.GetMods() // save current burncard mods for later re-giving
            hasBurnCard = true
            player.TakeWeaponNow( BEACON_BANNER_WEAPON ) // prevent multiple offhands crash
        }
    }

    OnThreadEnd
    (
        function(): ( player, savedMods, hasBurnCard )
        {
            if ( IsValid( player ) )
            {
                player.TakeWeaponNow( BEACON_BANNER_WEAPON )
                if ( hasBurnCard ) // restore burncard usage
                    player.GiveOffhandWeapon( "mp_ability_burncardweapon", OFFHAND_INVENTORY, savedMods )
            }
        }
    )

    // player can't pull it out manually, this only for better animations
    player.GiveOffhandWeapon( BEACON_BANNER_WEAPON, OFFHAND_EQUIPMENT, BEACON_BANNER_WEAPON_MODS )

    player.SetActiveWeaponByName( BEACON_BANNER_WEAPON ) // pull out burncard to play animations?
    file.playerLastCollectedBannerTime[ player ] = Time() // update

    wait BEACON_BANNER_USE_TIME
}

void function BannerLifeTime( entity banner, entity owner )
{
    banner.EndSignal( "OnDestroy" )

    owner.WaitSignal( "OnDestroy" ) // if owner disconnected while banner is active, we clear the banner
    banner.Destroy()
}

array<entity> function GetTeamActiveRespawnBanners( int team )
{
    if ( !( team in file.teamCarringBanners ) )
        return []
    
    // update the banner array
    array<entity> teamBanners = file.teamCarringBanners[ team ]
    array<entity> updatedArray
    foreach ( entity player in teamBanners )
    {
        if ( IsValid( player ) )
            updatedArray.append( player )
    }

    file.teamCarringBanners[ team ] = updatedArray // to clear all null banners
    
    return file.teamCarringBanners[ team ]
}

void function ClearTeamBanners( int team )
{
    file.teamCarringBanners[ team ].clear()
}

/*
array<entity> function GetPlayerActiveBanners( entity player, string uid = "" )
{
    if ( uid == "" && IsValid( player ) )
        uid = player.GetUID()
    ArrayRemoveInvalid( file.playerBeaconTable[ uid ].carryingBanners ) // clear all null banners
    
    return file.playerBeaconTable[ uid ].carryingBanners
}

void function ClearPlayerBanners( entity player )
{
    file.playerBeaconTable[ player.GetUID() ].carryingBanners.clear()
}
*/

///////////////////////////////////////
///// PLAYER BANNER FUNCTIONS END /////
///////////////////////////////////////


