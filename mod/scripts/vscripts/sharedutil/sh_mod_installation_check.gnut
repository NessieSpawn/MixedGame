// for us remotely control mod installation info
global function Sh_MixedGame_ClientSide_Installation_Check_Init

#if SERVER
global function AddCallback_OnClientSideWithMixedGameInstalledConnected
#endif

struct
{
    array<entity> connectedModdedPlayers
    array< void functionref( entity player ) > onClientSideWithMixedGameInstalledConnectedCallbacks
} file

void function Sh_MixedGame_ClientSide_Installation_Check_Init()
{
#if SERVER
    // for us receive command from clients who installed mod
	AddClientCommandCallback( "InstalledSuperMixedGameClient", CC_ClientWithMixedGameInstalledOnClientSide )
#elseif CLIENT
    // for client-side, we send our command to server-side
    SendCilentCommandToServer()
#endif
}

#if SERVER
bool function CC_ClientWithMixedGameInstalledOnClientSide( entity player, array<string> args )
{
    if ( file.connectedModdedPlayers.contains( player ) )
        return false
    file.connectedModdedPlayers.append( player )

    foreach ( callbackFunc in file.onClientSideWithMixedGameInstalledConnectedCallbacks )
        callbackFunc( player )
    
    return true
}

void function AddCallback_OnClientSideWithMixedGameInstalledConnected( void functionref( entity player ) callbackFunc )
{
    if ( !file.onClientSideWithMixedGameInstalledConnectedCallbacks.contains( callbackFunc ) )
        file.onClientSideWithMixedGameInstalledConnectedCallbacks.append( callbackFunc )
}
#elseif CLIENT
void function SendCilentCommandToServer()
{
    thread SendCilentCommandToServer_Threaded()
}

void function SendCilentCommandToServer_Threaded()
{
    while ( true )
    {
        entity player = GetLocalClientPlayer()
        if ( IsValid( player ) )
        {
            player.ClientCommand( "InstalledSuperMixedGameClient" )
            return
        }

        WaitFrame()
    }
}
#endif