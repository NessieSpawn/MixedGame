// this file goes here, for we need client to predict friendly fire conditions
global function Sh_FriendlyFire_Init

global function FriendlyFire_SetEnabled
global function FriendlyFire_IsEnabled
// reversed rodeo
global function FriendlyFire_EnableReversedRodeo
global function FriendlyFire_ShouldDoReversedRodeo
// monarch specifics
global function FriendlyFire_EnableMonarchForcedHeal
global function FriendlyFire_IsMonarchForcedHealthEnabled
// tripwire and proximity mine
global function FriendlyFire_MineWeaponSearchForFriendly
global function FriendlyFire_ShouldMineWeaponSearchForFriendly
// melee
global function FriendlyFire_EnableFriendlyMelee
global function FirendlyFire_CanMeleeFriendlyTarget
// score credit
global function FriendlyFire_EnableFriendlyKillScoreCredit
global function FriendlyFire_ShouldAddScoreOnFriendlyKill

struct
{
    bool friendlyFireOn = false
	bool reversedRodeo = false
	bool monarchForcedHeal = false
	bool mineWeaponSearchFriendly = false
	bool friendlyMelee = false
	bool killFriendlyScoreCredit = false
} file

void function Sh_FriendlyFire_Init()
{
    // riffs
	AddPrivateMatchModeSettingEnum( "#FRIENDLY_FIRE", "friendly_fire", [ "Disabled", "Enabled" ], "0" )
    // reverse the rodeo behavior: remove friendly titan's battery and apply them to enemy titans
    AddPrivateMatchModeSettingEnum( "#FRIENDLY_FIRE", "reversed_rodeo", [ "Disabled", "Enabled" ], "0" )
    // monarch always heal target if they have energy transfer
    AddPrivateMatchModeSettingEnum( "#FRIENDLY_FIRE", "monarch_force_heal", [ "Disabled", "Enabled" ], "0" )
    // tripwire, tether and proximity mine will search for friendly players if this turns on
    AddPrivateMatchModeSettingEnum( "#FRIENDLY_FIRE", "mine_search_friendly", [ "Disabled", "Enabled" ], "0" )
	// you can melee friendly players if this turned on, but they won't take damage if basic friendly fire is off
	AddPrivateMatchModeSettingEnum( "#FRIENDLY_FIRE", "friendly_melee", [ "Disabled", "Enabled" ], "0" )
	// score earned by killing friendly player will count towards total score if this turned on, pretty silly stuff
	AddPrivateMatchModeSettingEnum( "#FRIENDLY_FIRE", "friendly_kill_credit", [ "Disabled", "Enabled" ], "0" )
}

// unused, was in _base_gametype
bool function NotProtectedFromFriendlyFire( entity attacker, entity ent, var damageInfo )
{
	// no any protection

	return false
}

void function FriendlyFire_SetEnabled( bool enable )
{
	file.friendlyFireOn = enable
}

bool function FriendlyFire_IsEnabled()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "friendly_fire", 0 ) != 0 )
		return true

	return file.friendlyFireOn
}

// reversed rodeo
void function FriendlyFire_EnableReversedRodeo( bool enable )
{
	file.reversedRodeo = enable
}

bool function FriendlyFire_ShouldDoReversedRodeo()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "reversed_rodeo", 0 ) != 0 )
		return true

	return file.reversedRodeo
}

// monarch specifics
void function FriendlyFire_EnableMonarchForcedHeal( bool enable )
{
	file.monarchForcedHeal = enable
}

bool function FriendlyFire_IsMonarchForcedHealthEnabled()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "monarch_force_heal", 0 ) != 0 )
		return true

	return file.monarchForcedHeal
}

// tripwire and proximity mine
void function FriendlyFire_MineWeaponSearchForFriendly( bool search )
{
	file.mineWeaponSearchFriendly = search
}

bool function FriendlyFire_ShouldMineWeaponSearchForFriendly()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "mine_search_friendly", 0 ) != 0 )
		return true

	return file.mineWeaponSearchFriendly
}

// melee
void function FriendlyFire_EnableFriendlyMelee( bool enable )
{
	file.friendlyMelee = enable
}

bool function FirendlyFire_CanMeleeFriendlyTarget()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "friendly_melee", 0 ) != 0 )
		return true

	return file.friendlyMelee
}

// score credit
void function FriendlyFire_EnableFriendlyKillScoreCredit( bool enable )
{
	file.killFriendlyScoreCredit = enable
}

bool FriendlyFire_ShouldAddScoreOnFriendlyKill()
{
	file.killFriendlyScoreCredit
}