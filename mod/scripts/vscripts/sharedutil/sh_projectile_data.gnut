untyped // native FireWeapon functions can be used as untyped
global function Projectile_Data_Record_Shared_Init

// can't get projectile's launch origin from native, guess we'll have to do like this
// can also store damageTypes from projectile, no need to use TEMP_GetDamageFlagsFromProjectile() anymore
global function FireWeaponBolt_RecordData // replace all FireWeaponBolt_RecordData( weapon,) method with this function
global function FireWeaponGrenade_RecordData // replace all FireWeaponGrenade_RecordData( weapon,) method with this function
global function FireWeaponMissile_RecordData // replace all FireWeaponMissile_RecordData( weapon,) method with this function

global function GetProjectileLaunchOrigin
global function GetProjectileTouchDamageFlags
global function GetProjectileExplosionDamageFlags

struct
{
    table<entity, vector> projectileLaunchOrigin
    table<entity, int> projectileTouchDamageFlags
    table<entity, int> projectileExplosionDamageFlags
} file

void function Projectile_Data_Record_Shared_Init()
{
}

// script wrapped functions
entity function FireWeaponBolt_RecordData( entity weapon, pos, dir, speedScale, touchDamageFlags, explosionDamageFlags, isClientPredicted, additionalRandomSeed )
{
    entity bolt = weapon.FireWeaponBolt( pos, dir, speedScale, touchDamageFlags, explosionDamageFlags, isClientPredicted, additionalRandomSeed )
    if ( IsValid( bolt ) ) // projectile will be invalid on client if they're not predicted
        InitProjectileData( bolt, pos, touchDamageFlags, explosionDamageFlags )

    return bolt
}

entity function FireWeaponGrenade_RecordData( entity weapon, pos, dir, angularVelocity, float fuseTime, touchDamageFlags, explosionDamageFlags, isClientPredicted, isLagCompensated, unknownUsage )
{
    entity nade = weapon.FireWeaponGrenade( pos, dir, angularVelocity, fuseTime, touchDamageFlags, explosionDamageFlags, isClientPredicted, isLagCompensated, unknownUsage )
    if ( IsValid( nade ) ) // projectile will be invalid on client if they're not predicted
        InitProjectileData( nade, pos, touchDamageFlags, explosionDamageFlags )

    return nade
}

entity function FireWeaponMissile_RecordData( entity weapon, pos, dir, speedScale, touchDamageFlags, explosionDamageFlags, doRandomVelocAndThinkVars, isClientPredicted )
{
    entity missile = weapon.FireWeaponMissile( pos, dir, speedScale, touchDamageFlags, explosionDamageFlags, doRandomVelocAndThinkVars, isClientPredicted )
    if ( IsValid( missile ) ) // projectile will be invalid on client if they're not predicted
        InitProjectileData( missile, pos, touchDamageFlags, explosionDamageFlags )

    return missile
}

void function InitProjectileData( entity projectile, pos, touchDamageFlags, explosionDamageFlags )
{
    file.projectileLaunchOrigin[ projectile ] <- expect vector( pos )
    file.projectileTouchDamageFlags[ projectile ] <- expect int( touchDamageFlags )
    file.projectileExplosionDamageFlags[ projectile ] <- expect int( explosionDamageFlags )
}

vector function GetProjectileLaunchOrigin( entity projectile )
{
    if ( !( projectile in file.projectileLaunchOrigin ) )
    {
        // try to use owner...
        entity owner = projectile.GetOwner()
        if ( IsValid( owner ) )
            return owner.GetOrigin()
        // can't do anything, failsafe
        return projectile.GetOrigin()
    }

    return file.projectileLaunchOrigin[ projectile ]
}

int function GetProjectileTouchDamageFlags( entity projectile )
{
    if ( !( projectile in file.projectileTouchDamageFlags ) )
        return TEMP_GetDamageFlagsFromProjectile( projectile ) // very temp value

    return file.projectileTouchDamageFlags[ projectile ]
}

int function GetProjectileExplosionDamageFlags( entity projectile )
{
    if ( !( projectile in file.projectileExplosionDamageFlags ) )
        return TEMP_GetDamageFlagsFromProjectile( projectile ) // very temp value

    return file.projectileExplosionDamageFlags[ projectile ]
}