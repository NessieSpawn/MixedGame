
global function StimShared_Init
global function StimPlayer
global function EndlessStimBegin
global function EndlessStimEnd


global int COCKPIT_STIM_FX
global int PILOT_STIM_HLD_FX

global const float STIM_EFFECT_SEVERITY = 0.4	// assuming 'movement_speedboost_extraScale' is 2.0

void function StimShared_Init()
{
	COCKPIT_STIM_FX = PrecacheParticleSystem( $"P_heal" )
	PILOT_STIM_HLD_FX = PrecacheParticleSystem( $"P_pilot_stim_hld" )

	#if CLIENT
	StatusEffect_RegisterEnabledCallback( eStatusEffect.stim_visual_effect, StimVisualsEnabled )
	StatusEffect_RegisterDisabledCallback( eStatusEffect.stim_visual_effect, StimVisualsDisabled )
	#endif

	RegisterSignal( "EndStim" )
	RegisterSignal( "StopEndlessStim" )

	// to end stim while titan transfering
	#if SERVER
	RegisterSignal( "StimPlayerTitanTransfer" )
	AddCallback_OnTitanBecomesPilot( SignalToEndStimOnTitanTransfer )
	AddCallback_OnPilotBecomesTitan( SignalToEndStimOnTitanTransfer )
	#endif
}

void function EndlessStimBegin( entity player, float effectSeverity )
{
	StimPlayer_Internal( player, USE_TIME_INFINITE, effectSeverity )
}
void function EndlessStimEnd( entity player )
{
	player.Signal( "StopEndlessStim" )
}

void function StimPlayer( entity player, float duration, float severity = STIM_EFFECT_SEVERITY )
{
	StimPlayer_Internal( player, duration, severity )
}

void function StimPlayer_Internal( entity player, float duration, float effectSeverity )
{
	// there're multiple effects handle we may want to track, just handle them all
	//int endlessStatusEffectHandle = 0
	array<int> stimStatusEffectsHandle
	bool usingEndlessStim = false
	if ( duration == USE_TIME_INFINITE )
	{
		//endlessStatusEffectHandle = StatusEffect_AddEndless( player, eStatusEffect.speed_boost, effectSeverity )
		stimStatusEffectsHandle.append( StatusEffect_AddEndless( player, eStatusEffect.speed_boost, effectSeverity ) )
		// maybe we also wants visual effect?
		if ( player.IsPlayer() ) // add npc stim compatibility
			stimStatusEffectsHandle.append( StatusEffect_AddEndless( player, eStatusEffect.stim_visual_effect, 1.0 ) )
		usingEndlessStim = true // mark that we're using endless stim
	}
	else
	{
		/*
		StatusEffect_AddTimed( player, eStatusEffect.speed_boost, effectSeverity, duration + 0.5, 0.25 ) // sound is slightly off
		// add npc stim compatibility
		if ( player.IsPlayer() )
			StatusEffect_AddTimed( player, eStatusEffect.stim_visual_effect, 1.0, duration, duration )
		*/
		stimStatusEffectsHandle.append( StatusEffect_AddTimed( player, eStatusEffect.speed_boost, effectSeverity, duration + 0.5, 0.25 ) )
		if ( player.IsPlayer() ) // add npc stim compatibility
			stimStatusEffectsHandle.append( StatusEffect_AddTimed( player, eStatusEffect.stim_visual_effect, 1.0, duration, duration ) )
	}

#if SERVER
	//thread StimThink( player, duration, endlessStatusEffectHandle )
	thread StimThink( player, duration, stimStatusEffectsHandle, usingEndlessStim )
#else
	entity cockpit = player.GetCockpit()
	if ( !IsValid( cockpit ) )
		return

	HealthHUD_ClearFX( player )
#endif
}

#if SERVER
// there're multiple effects handle we may want to track, just handle them all
//void function StimThink( entity player, float duration, int endlessStatusEffectHandle )
void function StimThink( entity player, float duration, array<int> stimStatusEffectsHandle, bool usingEndlessStim = false )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" ) // should be vanilla missing?
	// add npc stim compatibility
	if ( player.IsPlayer() )
	{
		// changing vanilla behavior here:
		// stim should be ended once player doing a titan trasfer, and preserves if we only updated pilot classmods or something( which we used for wallclimbing stuffs )
		//player.EndSignal( "OnChangedPlayerClass" )
		player.EndSignal( "StimPlayerTitanTransfer" )
	}
	// change to use a variable for handling
	//if ( endlessStatusEffectHandle != 0 )
	if ( usingEndlessStim )
		player.EndSignal( "StopEndlessStim" )

	// clear last sound so player won't receive too much noise!
	if ( player.IsPlayer() )
		StopSoundOnEntity( player, "pilot_stimpack_loop_1P" )
	StopSoundOnEntity( player, "pilot_stimpack_loop_3P" )
	StopSoundOnEntity( player, "Pilot_Stimpack_Loop" )

	// change to use TF1 looping sound for endless stim( maybe a little bit annoying? idk )
	if ( usingEndlessStim )
		EmitSoundOnEntity( player, "Pilot_Stimpack_Loop" )
	else if ( player.IsPlayer() ) // add npc stim compatibility
	{
		EmitSoundOnEntityOnlyToPlayer( player, player, "pilot_stimpack_loop_1P" )
		EmitSoundOnEntityExceptToPlayer( player, player, "pilot_stimpack_loop_3P" )
	}
	else
		EmitSoundOnEntity( player, "pilot_stimpack_loop_3P" )

	int attachmentIndex = player.LookupAttachment( "CHESTFOCUS" )

	entity stimFX = StartParticleEffectOnEntity_ReturnEntity( player, PILOT_STIM_HLD_FX, FX_PATTACH_POINT_FOLLOW, attachmentIndex )
	// add npc stim compatibility
	if ( player.IsPlayer() )
	{
		stimFX.SetOwner( player )
		stimFX.kv.VisibilityFlags = (ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY) // not owner only
	}

	//thread StimSlowmoAim( player, duration )

	OnThreadEnd(
		//function() : ( player, stimFX, endlessStatusEffectHandle )
		function() : ( player, stimFX, stimStatusEffectsHandle )
		{
			// this vanilla behavior looks bad... get rid of it
			//if ( !IsValid( player ) )
			//	return

			if ( IsValid( stimFX ) )
				EffectStop( stimFX )

			if ( IsValid( player ) ) // player cleanup shouldn't affect fx cleanup
			{
				StopSoundOnEntity( player, "pilot_stimpack_loop_1P" )
				StopSoundOnEntity( player, "pilot_stimpack_loop_3P" )
				StopSoundOnEntity( player, "Pilot_Stimpack_Loop" )

				// clean up multiple effects
				//if ( endlessStatusEffectHandle != 0 )
				//	StatusEffect_Stop( player, endlessStatusEffectHandle )
				foreach ( effect in stimStatusEffectsHandle )
				{
					if ( effect != 0 )
						StatusEffect_Stop( player, effect )
				}

				player.Signal( "EndStim" )
			}
		}
	)

	if ( duration == USE_TIME_INFINITE )
		WaitForever()

	// modified anti-crash
	if ( duration >= 2.0 )
	{
		wait duration - 2.0

		// clear last sound so player won't receive too much noise!
		if ( player.IsPlayer() )
			StopSoundOnEntity( player, "pilot_stimpack_deactivate_1P" )
		StopSoundOnEntity( player, "pilot_stimpack_deactivate_3P" )
		// add npc stim compatibility
		if ( player.IsPlayer() )
		{
			EmitSoundOnEntityOnlyToPlayer( player, player, "pilot_stimpack_deactivate_1P" )
			EmitSoundOnEntityExceptToPlayer( player, player, "pilot_stimpack_deactivate_3P" )
		}
		else
			EmitSoundOnEntity( player, "pilot_stimpack_deactivate_3P" )
	
		wait 2.0
	}
	else
	{
		wait duration
	}
}

// to end stim while titan transfering
void function SignalToEndStimOnTitanTransfer( entity player, entity titan )
{
	player.Signal( "StimPlayerTitanTransfer" )
}

#else // #if SERVER
void function StimVisualsEnabled( entity ent, int statusEffect, bool actuallyChanged )
{
	if ( ent != GetLocalViewPlayer() )
		return

	entity player = ent

	entity cockpit = player.GetCockpit()
	if ( !IsValid( cockpit ) )
		return

	int fxHandle = StartParticleEffectOnEntity( cockpit, COCKPIT_STIM_FX, FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
	thread StimScreenFXThink( player, fxHandle, cockpit )
}

void function StimVisualsDisabled( entity ent, int statusEffect, bool actuallyChanged )
{
	if ( ent != GetLocalViewPlayer() )
		return

	ent.Signal( "EndStim" )
}

void function StimScreenFXThink( entity player, int fxHandle, entity cockpit )
{
	player.EndSignal( "EndStim" )
	player.EndSignal( "OnDeath" )
	cockpit.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( fxHandle )
		{
			if ( !EffectDoesExist( fxHandle ) )
				return

			EffectStop( fxHandle, false, true )
		}
	)

	for ( ;; )
	{
		float velocityX = Length( player.GetVelocity() )

		if ( !EffectDoesExist( fxHandle ) )
			break

		velocityX = GraphCapped( velocityX, 0.0, 360, 5, 200 )
		EffectSetControlPointVector( fxHandle, 1, Vector( velocityX, 999, 0 ) )
		WaitFrame()
	}
}

#endif // #else // #if SERVER
