untyped
global function Pilot_Shield_Battery_Init

global function SetPilotBatteryUsageAllowed
global function SetShieldBatteryNoLimit
global function SetShieldBatteryUseTime
global function SetShieldBatteryRegenAmount

// mainly for bleedout modes
global function SetShieldBatteryInputOverwritesBoost

global function IsShieldBatteryEnabled
global function GetPlayerLastShieldBatteryUsedTime // default return 0, for notifications to use

const float SHIELD_BATTERY_USE_TIME = 3
const int SHIELD_BATTERY_REGEN_AMOUNT = 50
const float SHIELD_BATTERY_BUTTON_HOLD_TIME = 0.5 // same as RODEO_THROW_BATTERY_BUTTON_HOLD_TIME in _rodeo_titan.gnut

const float AMPED_SHIELD_BATTERY_USE_TIME = 5

struct
{
    table<entity, bool> playerUsingShieldBattery
    table<entity, float> playerLastShieldBatteryUsedTime
    table<entity, bool> playerSearchingSheildBattery

    // battery stats
    float batteryUseTime = SHIELD_BATTERY_USE_TIME
    float ampedBatteryUseTime = AMPED_SHIELD_BATTERY_USE_TIME
    int batteryRegenAmount = SHIELD_BATTERY_REGEN_AMOUNT
    int ampedBatteryRegenAmount = 999

    bool canUseShiledBattery = false
    bool shieldBatteryOverwritesBoost = false
    bool noLimitBattery = false // let player use batteries whenever they want, for fun
} file

void function Pilot_Shield_Battery_Init()
{
    RegisterSignal( "StartContinuousUseThink" )
    RegisterSignal( "StartButtonCancelCheck" )
    RegisterSignal( "StopUseShieldBattery" )
    RegisterSignal( "DoneUseShieldBattery" )
    // register things for ingame script
    if( GetGameState() >= eGameState.Prematch )
    {
        foreach( entity player in GetPlayerArray() )
            OnClientConnected( player )
    }
    AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
    file.playerUsingShieldBattery[player] <- false        // bool
    file.playerLastShieldBatteryUsedTime[player] <- 0.0   // float
	file.playerSearchingSheildBattery[player] <- false	// float
    if( file.shieldBatteryOverwritesBoost )
    {
        AddButtonPressedPlayerInputCallback( player, IN_OFFHAND4, TryUseShieldBattery )
    }
    else
    {
        AddPlayerHeldButtonEventCallback( player, IN_USE, TryUseShieldBattery, SHIELD_BATTERY_BUTTON_HOLD_TIME )
        AddPlayerHeldButtonEventCallback( player, IN_USE_AND_RELOAD, TryUseShieldBattery, SHIELD_BATTERY_BUTTON_HOLD_TIME * 2 )
    }
}

void function TryUseShieldBattery( entity player )
{
    thread TryUseShieldBattery_Threaded( player )
}

void function TryUseShieldBattery_Threaded( entity player )
{
    if( Bleedout_IsPlayerBleeding( player ) ) // modified function in _bleedout.gnut
        return
    if( !file.canUseShiledBattery )
        return
    if( file.playerUsingShieldBattery[player] )
        return
    if( !file.shieldBatteryOverwritesBoost )
    {
        if( !( player.IsInputCommandHeld( IN_DUCK ) || player.IsInputCommandHeld( IN_DUCKTOGGLE ) ) )
            return
    }

    //thread ContinuousUseThink( player )
    player.EndSignal( "StopUseShieldBattery" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )
    // bleedout mode checks
    player.EndSignal( "BleedOut_StopBleeding" )
	player.EndSignal( "BleedOut_OnRevive" )

    entity batteryWeapon = player.GetOffhandWeapon( OFFHAND_INVENTORY )
    entity battery = GetBatteryOnBack( player )
    if( !IsValid( battery ) )
    {
        if( file.shieldBatteryOverwritesBoost && IsValid( batteryWeapon ) )
        {
            if( batteryWeapon.HasMod( "burnmeter_emergency_battery" ) )
            {
				if( file.playerSearchingSheildBattery[player] )
					return
                SendHudMessage( player, "未持有电池, 尝试使用强化卡...", -1, -0.3, 255, 255, 100, 255, 0, 1, 0 )
                waitthread WaitForPlayerGetBatteryFromBoost( player )
                wait 0.1 // defensive fix for script to get batteryOnBack
                battery = GetBatteryOnBack( player ) // done use boost, check battery again
                if( !IsValid( battery ) )
                {
                    SendHudMessage( player, "获取电池失败!", -1, -0.3, 255, 255, 100, 255, 0, 1, 0 )
                    return
                }
            }
            else
            {
                SendHudMessage( player, "未持有电池", -1, -0.3, 255, 255, 100, 255, 0, 1, 0 )
                return
            }
        }
        else
        {
            SendHudMessage( player, "未持有电池", -1, -0.3, 255, 255, 100, 255, 0, 1, 0 )
            return
        }
    }
    if( !file.noLimitBattery && ( GetShieldHealthMaxWithFix( player ) < 1 || GetShieldHealthWithFix( player ) == GetShieldHealthMaxWithFix( player ) ) )
    {
        SendHudMessage( player, "护盾已满", -1, -0.3, 255, 255, 100, 255, 0, 1, 0 )
        if( file.shieldBatteryOverwritesBoost )
        { // re-deploy weapon if shield is full
            player.HolsterWeapon()
            player.DeployWeapon()
        }
        return
    }

    battery.EndSignal( "OnDestroy" )
    table results = {}
    results.canceledUsage <- true // if player cancels usage it will run more functions
    file.playerUsingShieldBattery[player] = true

    array<string> savedMods = player.GetPlayerSettingsMods()
    array<string> settingMods = player.GetPlayerSettingsMods()
    if( !settingMods.contains( "disable_wallrun" ) )
        settingMods.append( "disable_wallrun" )
    // WARNS!!! This will cause a "OnClassChange" callback!!!
    //player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), settingMods )
    int statusEffectHandle = StatusEffect_AddEndless( player, eStatusEffect.move_slow, 0.4 )

    OnThreadEnd(
        function(): ( player, battery, savedMods, statusEffectHandle, results )
        {
            //print( "Reached here! 1" )
            if( !IsValid( player ) )
                return
            file.playerUsingShieldBattery[player] = false
            DeployAndEnableWeapons( player )
            //player.DeployWeapon()
            //player.Server_TurnOffhandWeaponsDisabledOff()
            StopSoundOnEntity( player, "Weapon_EnergySyphon_Charge_1P" )
            //StopSoundOnEntity( player, "Weapon_EnergySyphon_Charge_3P" )
            // WARNS!!! This will cause a "OnClassChange" callback!!!
            //player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), savedMods )
            if( statusEffectHandle != -1 )
                StatusEffect_Stop( player, statusEffectHandle )
            
            if( !results.canceledUsage )
                return
            if( IsAlive( player ) )
            {
                //print( "Reached here! 5" )
                if( !IsValid( battery ) )
                    return
                entity newestBattery = Rodeo_TakeBatteryAwayFromPilot( player )
                if( IsValid( battery ) && IsValid( newestBattery ) )
                {
                    if( battery == newestBattery )
                        Rodeo_PilotPicksUpBattery( player, battery )
                    else
                        Rodeo_PilotPicksUpBattery( player, newestBattery )
                    SendHudMessage( player, "取消使用护盾电池", -1, -0.3, 255, 255, 100, 255, 0, 1, 0 )
                }
            }
            else
            {
                if( IsValid( battery ) )
                {
                    // hardcoded from rodeo_titan.gnut
                    if( "hideIcon" in battery.s )
                    {
                        if( expect bool( battery.s.hideIcon ) )
                        {
                            battery.Minimap_Hide( TEAM_MILITIA, null )
                            battery.Minimap_Hide( TEAM_IMC, null )
                        }
                    }
                }
            }
        }
    )
    bool isAmped = IsAmpedBattery( battery )
    float useTime = file.batteryUseTime
    if( isAmped )
        useTime = file.ampedBatteryUseTime
    thread ButtonCancelCheck( player, useTime + 0.6 )

    HolsterAndDisableWeapons( player )
    //player.HolsterWeapon()
    //player.Server_TurnOffhandWeaponsDisabledOn()
	SendHudMessage( player, "正在取出护盾电池\n(按下开火以取消)", -1, -0.3, 255, 255, 100, 255, 0, 1.0, 0 )
    wait 0.6 // wait for player hoster their weapon
    battery.ClearParent()
    battery.SetParent( player, "PROPGUN" )
    battery.SetAngles( < 0,90,90 > )
    EmitSoundOnEntityOnlyToPlayer( player, player, "Weapon_EnergySyphon_Charge_1P" )
    //EmitSoundOnEntityExceptToPlayer( player, player, "Weapon_EnergySyphon_Charge_3P" ) // can be too noisy

    float startTime = Time()
    while( startTime + useTime > Time() )
    {
        // function HolsterAndDisableWeapons() now has stack system for HolsterWeapon() method... no need to loop anymore I think
        //player.HolsterWeapon() // defensive fix
        //player.Server_TurnOffhandWeaponsDisabledOn()
        if( isAmped )
            SendHudMessage( player, "正在使用强力护盾电池 [ " + CreateHudProgressBarThroughTime( Time(), startTime, useTime ) + " ]\n(按下开火以取消)", -1, -0.3, 255, 255, 100, 255, 0, 0.2, 0 )
        else
            SendHudMessage( player, "正在使用护盾电池 [ " + CreateHudProgressBarThroughTime( Time(), startTime, useTime ) + " ]\n(按下开火以取消)", -1, -0.3, 255, 255, 100, 255, 0, 0.2, 0 )
        WaitFrame()
    }

    // done using
    results.canceledUsage = false
    file.playerLastShieldBatteryUsedTime[player] = Time()
    player.Signal( "DoneUseShieldBattery" )

    int currentShieldHealth = GetShieldHealthWithFix( player )
    int shieldToRestore = int( min( GetShieldHealthMaxWithFix( player ) - currentShieldHealth, file.batteryRegenAmount ) )
    if( isAmped )
        shieldToRestore = int( min( GetShieldHealthMaxWithFix( player ) - currentShieldHealth, file.ampedBatteryRegenAmount ) )
    
    //player.SetShieldHealth( min( player.GetShieldHealthMax(), currentShieldHealth + shieldToRestore ) )
    SetShieldHealthWithFix( player, min( GetShieldHealthMaxWithFix( player ), currentShieldHealth + shieldToRestore ) )
    //print( "Reached here! 2" )

    entity shieldFXHandle = StartParticleEffectOnEntity_ReturnEntity( player, GetParticleSystemIndex( $"P_xo_armor_body_CP" ), FX_PATTACH_POINT_FOLLOW, player.LookupAttachment( "CHESTFOCUS" ) )
    //EmitSoundOnEntityOnlyToPlayer( player, player, "UI_TitanBattery_Pilot_Give_TitanBattery" )
    SetTeam( shieldFXHandle, player.GetTeam() )
    shieldFXHandle.SetOwner( player )

    if( isAmped )
        EffectSetControlPointVector( shieldFXHandle, 1, < 255, 165, 0 > )
    else
        EffectSetControlPointVector( shieldFXHandle, 1, < 30, 255, 100 > )
    //print( "Reached here! 3" )
    if( shieldToRestore <= file.batteryRegenAmount ) // consider shield is full, not showing a extra fx
        shieldFXHandle.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY | ENTITY_VISIBLE_TO_FRIENDLY

    SendHudMessage( player, "已回复" + string(shieldToRestore) + "点护盾! ", -1, -0.3, 255, 255, 100, 255, 0, 2, 0 )

    MessageToPlayer( player, eEventNotifications.Rodeo_PilotAppliedBatteryToYou, player, isAmped )

    entity newestBattery = Rodeo_TakeBatteryAwayFromPilot( player )
    if( IsValid( battery ) && IsValid( newestBattery ) )
    {
        //print( "Reached here! 4" )
        if( battery == newestBattery )
            newestBattery.Destroy()
    }
}

void function WaitForPlayerGetBatteryFromBoost( entity player )
{
    entity batteryWeapon = player.GetOffhandWeapon( OFFHAND_INVENTORY )
    batteryWeapon.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
	
	file.playerSearchingSheildBattery[player] = true
	OnThreadEnd(
		function():( player )
		{
			if( IsValid( player ) )
				file.playerSearchingSheildBattery[player] = false
		}
	)

    float maxWaitTime = 1.5 // defensive fix, maybe player will stuck in this thread?
    float startTime = Time()
    while( true )
    {
        WaitFrame()
        if( Time() > startTime + maxWaitTime )
            break
        if( IsValid( GetBatteryOnBack( player ) ) ) // player got their battery
            break
		if( player.GetActiveWeapon() != batteryWeapon ) // usage interrupted by wall climbing
			break
    }
}

string function CreateHudProgressBarThroughTime( float nowGlobalTime, float startGlobalTime, float totalTime )
{
    int barLength = 20
    float progress = ( nowGlobalTime - startGlobalTime ) / totalTime
    //print( "Total progress is: " + string( progress ) )
    int numToReplace = int( barLength * progress )
    //print( "numToReplace is: " + string( numToReplace ) )
    string progessBar
    for( int i = 0; i < barLength; i++ )
    {
        if( i <= numToReplace )
            progessBar += "/"
        else
            progessBar += "-"
    }
    string tempBar = progessBar
    return tempBar
}

void function ContinuousUseThink( entity player )
{
    player.Signal( "StartContinuousUseThink" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )
    player.EndSignal( "StartContinuousUseThink" )
    player.EndSignal( "DoneUseShieldBattery" )
    while( true )
    {
        //print( "Player Holding IN_USE" )
        if( !( player.IsInputCommandHeld( IN_USE ) || player.IsInputCommandHeld( IN_USE_AND_RELOAD ) ) )
        {
            player.Signal( "StopUseShieldBattery" )
            break
        }
        WaitFrame()
    }
}

void function ButtonCancelCheck( entity player, float maxTime )
{
    player.Signal( "StartButtonCancelCheck" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )
    player.EndSignal( "StartButtonCancelCheck" )
    player.EndSignal( "DoneUseShieldBattery" )
    player.EndSignal( "StopUseShieldBattery" )

    OnThreadEnd(
        function(): ( player )
        {
            if( IsValid( player ) )
                RemoveButtonPressedPlayerInputCallback( player, IN_ATTACK, InterruptShieldBattery )
        }
    )

    AddButtonPressedPlayerInputCallback( player, IN_ATTACK, InterruptShieldBattery )
    wait maxTime
}

void function InterruptShieldBattery( entity player )
{
    player.Signal( "StopUseShieldBattery" )
}

void function SetPilotBatteryUsageAllowed( bool allowed )
{
    file.canUseShiledBattery = allowed
}

void function SetShieldBatteryNoLimit( bool nolimit )
{
    file.noLimitBattery = nolimit
}

void function SetShieldBatteryInputOverwritesBoost( bool overwrite )
{
    file.shieldBatteryOverwritesBoost = overwrite
}

void function SetShieldBatteryUseTime( float batteryUseTime, float ampedBatteryUseTime )
{
    file.batteryUseTime = batteryUseTime
    file.ampedBatteryUseTime = ampedBatteryUseTime
}

void function SetShieldBatteryRegenAmount( int batteryRegenAmount, int ampedBatteryRegenAmount )
{
    file.batteryRegenAmount = batteryRegenAmount
    file.ampedBatteryRegenAmount = ampedBatteryRegenAmount
}

bool function IsShieldBatteryEnabled()
{
    return file.canUseShiledBattery
}

float function GetPlayerLastShieldBatteryUsedTime( entity player )
{
    if( player in file.playerLastShieldBatteryUsedTime )
    {
        return file.playerLastShieldBatteryUsedTime[player]
    }
    return 0 // default
}