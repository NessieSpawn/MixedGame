untyped
global function Pilot_WallClimb_Init

const bool WALLCLIMB_ALLOW_HORIZONAL_INPUT = true // client will mostly desync, don't allow this
const float WALLCLIMB_GRACE_PERIOD_TIME = 0.3 // press left or right within this time won't be kick off wall, causes little desync
const float WALLCLIMB_GRACE_PERIOD_TIME_NOT_FACING_WALL = 0.5 // if you're not facing wall at start and disabled WALLCLIMB_CLASSMODS_UPDATE, use this grace period instead
const float WALLCLIMB_HORIZONAL_SPEED_LIMIT = 30 // speed limit if player wants to move on the wall, requires WALLCLIMB_ALLOW_HORIZONAL_INPUT to be true
const float WALLCLIMB_MOVE_SLOW_SEVERITY = 0.0 // should set to 0.5 if script_server_fps is not modified! slow down player when they're on the wall, so forced horizontal speed won't make view feel bad. this influnces wallclimb speed!
const float WALLCLIMB_MOVE_SLOW_SEVERITY_AMPED = 0.0 // amped wallclimb don't receive wallclimb move slow effect

const float WALLCLIMB_ANGLE_LIMIT = 45.0 // other than this will consider as not facing a wall

const bool WALLCLIMB_CLASSMODS_UPDATE = true // may not good if using this... but player will feel better contolling their characters
const bool WALLCLIMB_LERP_PLAYER_VIEW = false // if WALLCLIMB_CLASSMODS_UPDATE is enabled, we may don't need this

// extra sound when player enter wallrun with wall climb mod equipped
const string WALLCLIMB_ATTACHED_SOUND_1P = "mantle_extralow"
const string WALLCLIMB_ATTACHED_SOUND_3P = "mantle_3p_enemy"

// hardcoded wallclimb mods list
const array<string> WALLCLIMB_MODS =
[
	"only_wallclimb", // generic wallclimb
	"normal_wallclimb", // wallclimb with only wallrun's vertical speed. usually used when player also having doublejump
]

// will use AMPED suffix settings
const array<string> AMPED_WALLCLIMB_MODS =
[
	"amped_wallclimb",
]

enum ePlayerWallClimbModType
{
	NONE, // no valid wallclimb mod

	WALLCLIMB_NORMAL, // mods in WALLCLIMB_MODS
	WALLCLIMB_AMPED, // mods in AMPED_WALLCLIMB_MODS
}

struct StoredPlayerSettingsStruct
{
	string settings
	array<string> settingsMods
	array<string> standMods
	array<string> crouchMods
	
	// following settings done after changing class
	asset modelName
	int skinIndex
	int camoIndex
	int fullBodyGroup
	int maxHealth
	int health
	int maxShield
	int shield
}

struct
{
	table<entity, float> playerWallRunBeginTime
	table<entity, bool> playerClassChangeThroughWallClimb // if player do changed class because of this script, we don't loop over again
} file

void function Pilot_WallClimb_Init()
{
	// function WaitFrame() has been changed, modifying script_server_fps won't break game behavior. we also added WALLCLIMB_MOVE_SLOW_SEVERITY, which can handle visual effect while in 10fps
    // I can't handle "PilotStartWallClimb" now
    RegisterSignal( "PilotStartWallClimb" )
    RegisterSignal( "PilotStopWallClimb" )

	RegisterSignal( "PilotWallClimbThink" )
	// ttf2 don't have other ways to modify classmods other than change class, so this is enough
	AddCallback_OnClientConnected( OnClientConnected )
    AddCallback_PlayerClassChanged( OnPlayerClassChanged )
}


//////////////////////////////
///// CALLBACK FUNCTIONS /////
//////////////////////////////

void function OnClientConnected( entity player )
{
	// init
	file.playerWallRunBeginTime[player] <- 0.0
	file.playerClassChangeThroughWallClimb[ player ] <- false

	AddPlayerMovementEventCallback( player, ePlayerMovementEvents.BEGIN_WALLRUN, OnPlayerBeginWallRun )
}

void function OnPlayerClassChanged( entity player )
{
    thread PilotWallClimbThink( player )
}

void function OnPlayerBeginWallRun( entity player )
{
	UpdatePlayerWallRunBeginTime( player )
	TryWallClimbStartSound( player )
}

void function UpdatePlayerWallRunBeginTime( entity player )
{
	file.playerWallRunBeginTime[player] = Time()
}

bool function TryWallClimbStartSound( entity player )
{
	// only run for players who have wallclimb mod
	if ( GetPlayerWallClimbModType( player ) == ePlayerWallClimbModType.NONE )
		return false

	EmitSoundOnEntityOnlyToPlayer( player, player, WALLCLIMB_ATTACHED_SOUND_1P )
	EmitSoundOnEntityExceptToPlayer( player, player, WALLCLIMB_ATTACHED_SOUND_3P )
	return true
}

//////////////////////////////////
///// CALLBACK FUNCTIONS END /////
//////////////////////////////////



/////////////////////////////
///// UTILITY FUNCTIONS /////
/////////////////////////////

int function GetPlayerWallClimbModType( entity player )
{
	array<string> classMods = player.GetPlayerSettingsMods()
	foreach ( mod in classMods )
	{
		if ( WALLCLIMB_MODS.contains( mod ) )
			return ePlayerWallClimbModType.WALLCLIMB_NORMAL
		else if ( AMPED_WALLCLIMB_MODS.contains( mod ) )
			return ePlayerWallClimbModType.WALLCLIMB_AMPED
	}

	return ePlayerWallClimbModType.NONE
}

void function PilotWallClimbThink( entity player )
{
	// only run for living players( dead players will also change class to "spectator", prevent it )
	if ( !IsAlive( player ) )
		return
	// only run if player is not changing classmods through this file
	if ( file.playerClassChangeThroughWallClimb[ player ] )
		return

	// only run for players who have wallclimb mod
	// ttf2 don't have other ways to modify classmods than changing class so this check is enough
	if ( GetPlayerWallClimbModType( player ) == ePlayerWallClimbModType.NONE )
		return

	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.Signal( "PilotWallClimbThink" )
	player.EndSignal( "PilotWallClimbThink" )

	float angleLimit = WALLCLIMB_ANGLE_LIMIT
	float slowMoveSeverity = WALLCLIMB_MOVE_SLOW_SEVERITY
	// amped wallclimb
	if ( GetPlayerWallClimbModType( player ) == ePlayerWallClimbModType.WALLCLIMB_AMPED )
		slowMoveSeverity = WALLCLIMB_MOVE_SLOW_SEVERITY_AMPED

	bool isClimbingWall = false
	vector wallAngles
	vector lastTickVel
	bool facingWallAtStart = false
	bool groundTouched = true
	bool lastTickOnGround = true
	int moveSlowEffectHandle

	OnThreadEnd // clean up
	(
		function(): ( player, moveSlowEffectHandle )
		{
			if ( IsValid( player ) )
			{
				player.DeployWeapon() // clean up holstered weapon
				player.UnforceCrouch()
				player.UnforceStand()
				if ( moveSlowEffectHandle > 0 )
					StatusEffect_Stop( player, moveSlowEffectHandle )
			}
		}
	)

	// sound
	float lastHealthFrac = 1.0
	bool woundedSoundStopped = false
	bool lastTickHasJumpJetSound = false
	while ( true )
	{
		WaitFrame( true ) // always wait first, this ignores fps limit

		bool lastTickOffTheWall = false
		bool lastTickAnimActive = player.IsTraversing() || IsValid( player.GetParent() ) || player.Anim_IsActive()
		if ( isClimbingWall && !player.IsWallRunning() ) // considering player has left the wall?
		{
			player.DeployWeapon() // clean up holstered weapon
			player.Signal( "PilotStopWallClimb" )
			isClimbingWall = false
			facingWallAtStart = false

			lastTickOffTheWall = true

			if ( moveSlowEffectHandle > 0 )
				StatusEffect_Stop( player, moveSlowEffectHandle )
		}

		// classmods management checks
		if ( WALLCLIMB_CLASSMODS_UPDATE )
		{
			// they won't be able to climb again until they back to ground, unlike apex they can climb the same wall infinitely
			// I don't know how do I write things to prevent player from climbing different angled walls
			if ( lastTickOffTheWall && !lastTickAnimActive )
			{
				DisablePlayerWallrun_ChangingClassMods( player )
				continue
			}
		}

		bool inGroundMovement = player.IsOnGround() && !player.IsTraversing() && !player.IsWallRunning() && !player.IsWallHanging()
		if ( !groundTouched && inGroundMovement )
			groundTouched = true

		lastTickVel = player.GetVelocity()
		
		// since we keep updating their playersettings, try stop wounded sound
		if ( !woundedSoundStopped && lastHealthFrac > GetHealthFrac( player ) && GetHealthFrac( player ) <= 0.5 )
		{
			StopPlayerWoundedSound( player ) // we stop wounded sound for player
			woundedSoundStopped = true
			//print( "stopped wounded sound!" )
		}
		else if ( GetHealthFrac( player ) > 0.5 )
			woundedSoundStopped = false
			
		lastHealthFrac = GetHealthFrac( player ) 

		// try stop jumpjet sound
		if ( lastTickOnGround && !player.IsOnGround() )
		{
			bool stopJumpSound = false
			if ( WALLCLIMB_CLASSMODS_UPDATE )
			{
				if ( lastTickHasJumpJetSound )
					stopJumpSound = true
			}
			else
				stopJumpSound = true
			if ( stopJumpSound )
			{
				StopJumpSounds( player )
				//print( "stopped jump sound!" )
			}
		}
		lastTickOnGround = player.IsOnGround()

		// noclipping
		if ( player.IsNoclipping() )
			continue

		bool offhandOut = false
		entity activeWeapon = player.GetActiveWeapon()
		if ( IsValid( activeWeapon ) )
			offhandOut = activeWeapon.IsWeaponOffhand()
		
		 // may not good if using this... but player will feel better contolling their characters
		if ( WALLCLIMB_CLASSMODS_UPDATE )
		{
			lastTickHasJumpJetSound = PlayerHasJumpJetSound( player ) // get this before classmods update
			// classmods management checks
			// only check try changing classmods if player is not climbing a wall, also avoid changing model breaks animations
			// update for this frame
			bool thisFrameAnimActive = player.IsTraversing() || IsValid( player.GetParent() ) || player.Anim_IsActive()
			//print( "isClimbingWall: " + string( isClimbingWall ) )
			//print( "groundTouched: " + string( groundTouched ) )
			if ( !isClimbingWall && groundTouched && !thisFrameAnimActive && !offhandOut )
			{
				float eyeAnglesYawBeforeTrace = VectorToAngles( player.GetViewVector() ).y
				vector ornull currentAngs = TracePlayerWallAngles( player, lastTickVel )
				
				bool canWallrun = !player.GetPlayerSettingsMods().contains( "disable_wallrun" )
				if ( !canWallrun && !player.IsOnGround() ) // player has been taken wallrun ability, and they're off ground for a climbing attempt
				{
					if ( currentAngs == null ) // can't trace!
						continue

					wallAngles = expect vector( currentAngs )
					bool canWallClimb = fabs( fabs( wallAngles.y - eyeAnglesYawBeforeTrace ) - 180 ) <= angleLimit

					if ( !canWallClimb ) // player still not facing a wall
						continue

					// checks done, should restore player's wallrun ability
					EnablePlayerWallrun_ChangingClassMods( player )
					//print( "wallrun ability restored!" )
				}
				else // player still don't have the "disable_wallrun" classmod
				{
					bool takeWallrunAbility = false
					if ( currentAngs == null ) // can't trace!
						takeWallrunAbility = true
					if ( currentAngs != null ) // we have traced wallangs
					{
						wallAngles = expect vector( currentAngs )
						bool canWallClimb = fabs( fabs( wallAngles.y - eyeAnglesYawBeforeTrace ) - 180 ) <= angleLimit

						if ( !canWallClimb ) // player still not facing a wall
							takeWallrunAbility = true
					}

					if ( takeWallrunAbility )
					{
						// checks done, should take player's wallrun ability
						DisablePlayerWallrun_ChangingClassMods( player )
						//print( "wallrun ability taken!" )
						//continue // player can never do wallrun if so, but continue here breaks the auto kick-off
					}
				}
			}
		}
		//

		if ( player.IsWallHanging() ) // allow player to do wallhang
			continue

		// main mechanic: kick player off wall if they're not facing it, only wall climbing!
		if ( player.IsWallRunning() )
		{
			if ( !isClimbingWall ) // new wall climbing
			{
				float eyeAnglesYawBeforeTrace = VectorToAngles( player.GetViewVector() ).y

				vector ornull currentAngs = TracePlayerWallAngles( player, lastTickVel, WALLCLIMB_LERP_PLAYER_VIEW )
				if ( currentAngs == null ) // can't trace!
				{
					thread KickPlayerOffWall( player )
					continue
				}
				wallAngles = expect vector( currentAngs )
				
				facingWallAtStart = fabs( fabs( wallAngles.y - eyeAnglesYawBeforeTrace ) - 180 ) <= angleLimit
				//print( "wallAngles.y: " + string( wallAngles.y ) )
				//print( "eyeAnglesYawBeforeTrace : " + string( eyeAnglesYawBeforeTrace ) )
				//print( fabs( fabs( wallAngles.y - eyeAnglesYawBeforeTrace ) - 180 ) )

				StopWallrunSounds( player ) // stop jumpjet sound!

				// apply move slow effect!
				if ( moveSlowEffectHandle > 0 ) // defensive fix, remove last moveSlowEffect
					StatusEffect_Stop( player, moveSlowEffectHandle )
				if ( WALLCLIMB_ALLOW_HORIZONAL_INPUT && slowMoveSeverity > 0 )
					moveSlowEffectHandle = StatusEffect_AddEndless( player, eStatusEffect.move_slow, slowMoveSeverity )
			}

			// comparing yaw is enough
			float wallAnglesYaw = wallAngles.y

			// get player's viewing angle, comparing yaw is enough
			float eyeAnglesYaw = VectorToAngles( player.GetViewVector() ).y

			float angDiffer = fabs( fabs( wallAnglesYaw - eyeAnglesYaw ) - 180 ) // formatting the differ
			//print( angDiffer )

			// try to move on the wall
			if ( !WALLCLIMB_ALLOW_HORIZONAL_INPUT )
			{
				//print( "facingWallAtStart: " + string( facingWallAtStart ) 0)
				// grace period for better controls, may causes little desync
				bool outOfGracePeriod = file.playerWallRunBeginTime[player] + WALLCLIMB_GRACE_PERIOD_TIME < Time()
				if ( !WALLCLIMB_CLASSMODS_UPDATE && !facingWallAtStart ) // if we're not facing wall at the start of climbing, give some more grace period
					outOfGracePeriod = file.playerWallRunBeginTime[player] + WALLCLIMB_GRACE_PERIOD_TIME_NOT_FACING_WALL < Time()
				if ( outOfGracePeriod ) 
				{
					if ( player.IsInputCommandHeld( IN_MOVELEFT ) || player.IsInputCommandHeld( IN_MOVERIGHT ) )
					{
						thread KickPlayerOffWall( player ) // knock player off
						continue
					}
					else // contoller input?
					{
						vector inputAngs = VectorToAngles( GetPlayerInputDirection( player ) )
						float inputAngsYaw = inputAngs.y
						angDiffer = fabs( fabs( wallAnglesYaw - inputAngsYaw ) - 180 ) // formatting the differ
						//print( "inputAngs: " + string( inputAngs ) )
						//print( "angDiffer: " + string( angDiffer ) )
						if ( angDiffer > angleLimit ) // the angle diffrence is bigger than limit?
						{
							thread KickPlayerOffWall( player )
							continue
						}
					}
				}
			}
			else // has wall speed limit
			{
				float maxSpeed = WALLCLIMB_HORIZONAL_SPEED_LIMIT
				vector limitedSpeed = LimitVelocityHorizontal( player.GetVelocity(), maxSpeed )
				player.SetVelocity( limitedSpeed )
			}

			if ( angDiffer > angleLimit ) // the angle diffrence is bigger than limit?
			{
				thread KickPlayerOffWall( player )
				continue
			}

			// match the classmods update behavior: never allow wallclimb when offhand is out
			if ( WALLCLIMB_CLASSMODS_UPDATE && offhandOut )
			{
				thread KickPlayerOffWall( player ) // this will also update classmods
				continue
			}

			if ( !isClimbingWall )
			{
				player.HolsterWeapon() // in case player attached to the wall but their weapon still out, always holster weapon for them
				player.Signal( "PilotStartWallClimb" )
				isClimbingWall = true // mark as start climbing
				groundTouched = false // mark as player still not touched ground
			}
		}
	}
}

vector function LimitVelocityHorizontal( vector vel, float speed )
{
	vector horzVel = <vel.x, vel.y, 0>
	if ( Length( horzVel ) <= speed )
		return vel

	horzVel = Normalize( horzVel )
	horzVel *= speed
	vel.x = horzVel.x
	vel.y = horzVel.y
	return vel
}

const array<string> JUMP_JET_DISABLED_MODS =
[
	"disable_doublejump",
	"disable_wallrun"
]
bool function PlayerHasJumpJetSound( entity player )
{
	array<string> classMods = player.GetPlayerSettingsMods()
	int modsRequired = JUMP_JET_DISABLED_MODS.len()
	int modsOwned = 0
	foreach ( string mod in JUMP_JET_DISABLED_MODS )
	{
		if ( classMods.contains( mod ) )
			modsOwned += 1
	}

	return modsRequired != modsOwned
}

void function StopJumpSounds( entity player )
{
	StopSoundOnEntity( player, "jumpjet_jump_body_1p" )
	StopSoundOnEntity( player, "jumpjet_jump_body_3p" )
	StopSoundOnEntity( player, "jumpjet_jump_body_3p_enemy" )
}

void function StopWallrunSounds( entity player )
{
	StopSoundOnEntity( player, "jumpjet_wallrun_body_1p" )
	StopSoundOnEntity( player, "jumpjet_wallrun_body_3p" )
	StopSoundOnEntity( player, "jumpjet_wallrun_body_3p_enemy" )
}

void function StopPlayerWoundedSound( entity player )
{
	StopSoundOnEntity( player, "pilot_critical_breath_loop_1p" )
	StopSoundOnEntity( player, "pilot_critical_drone_loop_1p" )
	StopSoundOnEntity( player, "pilot_wounded_loop_1p" )
}

void function EnablePlayerWallrun_ChangingClassMods( entity player )
{
	StoredPlayerSettingsStruct storedStruct = StorePlayerSettings( player )
	storedStruct.settingsMods.removebyvalue( "disable_wallrun" )
	RetrievePlayerSettings( player, storedStruct )
}

void function DisablePlayerWallrun_ChangingClassMods( entity player )
{
	StoredPlayerSettingsStruct storedStruct = StorePlayerSettings( player )
	storedStruct.settingsMods.append( "disable_wallrun" )
	RetrievePlayerSettings( player, storedStruct )
}

StoredPlayerSettingsStruct function StorePlayerSettings( entity player )
{
	StoredPlayerSettingsStruct storedStruct
	storedStruct.settings			= player.GetPlayerSettings()
	storedStruct.settingsMods		= player.GetPlayerSettingsMods()
	// these two are untyped, should check it
	array standMods = player.GetPlayerModsForPos( PLAYERPOSE_STANDING )
	foreach ( mod in standMods )
		storedStruct.standMods.append( string( mod ) )
	array crouchMods = player.GetPlayerModsForPos( PLAYERPOSE_CROUCHING )
	foreach ( mod in crouchMods )
		storedStruct.crouchMods.append( string( mod ) )

	storedStruct.modelName			= player.GetModelName()
	// bodygroup
	storedStruct.fullBodyGroup		= player.GetFullBodygroup()

	storedStruct.skinIndex			= player.GetSkin()
	storedStruct.camoIndex			= player.GetCamo()
	storedStruct.maxHealth			= player.GetMaxHealth()
	storedStruct.health				= player.GetHealth()
	storedStruct.maxShield			= player.GetShieldHealthMax()
	storedStruct.shield				= player.GetShieldHealth()

	return storedStruct
}

void function RetrievePlayerSettings( entity player, StoredPlayerSettingsStruct storedStruct )
{
	file.playerClassChangeThroughWallClimb[ player ] = true // mark as this player changing settings through this file, we won't run things in PilotWallClimbThink()
	
	player.SetPlayerSettingsWithMods( storedStruct.settings, storedStruct.settingsMods )
	player.SetPlayerSettingPosMods( PLAYERPOSE_STANDING, storedStruct.standMods )
	player.SetPlayerSettingPosMods( PLAYERPOSE_CROUCHING, storedStruct.crouchMods )

	player.SetMaxHealth( storedStruct.maxHealth )
	player.SetHealth( storedStruct.health )
	player.SetShieldHealthMax( storedStruct.maxShield )
	player.SetShieldHealth( storedStruct.shield )
	
	asset newModel = player.GetModelName()
	//print( "newModel: " + string( newModel ) )
	//print( "savedModel: " + string( storedStruct.modelName ) )
	if ( newModel != storedStruct.modelName ) // only update model if we changed
	{
		player.SetModel( storedStruct.modelName ) // still gets some trouble when changing models
		player.Anim_StopGesture( 0.0 )
		player.SetPoseParametersSameAs( player )
		player.SequenceTransitionFromEntity( player )
	}
	// update bodygroup
	player.SetFullBodygroup( storedStruct.fullBodyGroup )

	player.SetSkin( storedStruct.skinIndex )
	player.SetCamo( storedStruct.camoIndex )

	file.playerClassChangeThroughWallClimb[ player ] = false
}

vector ornull function TracePlayerWallAngles( entity player, vector lastTickVel, bool lerpView = false )
{
	vector startPos = player.GetOrigin()
	if ( !lerpView )
		startPos = player.EyePosition()
	//vector startPos = player.EyePosition()
	//int attachID = player.LookupAttachment( "CHESTFOCUS" )
	//if ( attachID > 0 )
	//	startPos = player.GetAttachmentOrigin( attachID )
	
	vector directionForward = GetPlayerInputDirection( player ) // default is use player's input
	directionForward = AnglesToForward( < 0, VectorToAngles( directionForward ).y, 0 > ) // comparing yaw is enough
	//print( VectorToAngles( directionForward ) )
	vector moveAngs = VectorToAngles( lastTickVel )
	//print( "moveAngs: " + string( moveAngs ) )
	// if moveAngs valid and we're not updating classmods, use it instead
	// NOTE: moveAngs.y cannot handle! should find another way to check this
	if ( !WALLCLIMB_CLASSMODS_UPDATE && moveAngs.y != 0 ) 
		directionForward = AnglesToForward( < 0, moveAngs.y, 0 > )
	float traceDist = 64
	vector endPos = startPos + directionForward * traceDist // get player's viewing wall

	//vector moveAngs = VectorToAngles( lastTickVel )
	//vector traceVec = AnglesToForward( < 0, VectorToAngles( lastTickVel ).y, 0 > ) * 50
	//vector endPos = startPos + traceVec // get player's viewing wall

	TraceResults traceResult = TraceLine( 
											startPos, 
											endPos,
											player,
											(TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), 
											TRACE_COLLISION_GROUP_NONE 
										)

	// can't trace anything?
	if ( !IsValid( traceResult.hitEnt ) )
		return null
	
	// hitent is not a world entity?
	if ( traceResult.hitEnt.IsPlayer() || traceResult.hitEnt.IsNPC() )
		return null

	// get the wall's normal
	vector normal = traceResult.surfaceNormal
	// get the wall's angle
	vector wallAngles = VectorToAngles( normal )

	if ( lerpView )
	{
		// lerp player's view
		//player.PlayerCone_FromAnim()
		player.PlayerCone_SetMinYaw( -45 )
		player.PlayerCone_SetMaxYaw( 45 )
		//player.PlayerCone_SetMinPitch( 0 )
		//player.PlayerCone_SetMaxPitch( 0 )
		
		vector playerAngs = player.EyeAngles()
		playerAngs.y = wallAngles.y - 180
		player.SetAngles( playerAngs )

		// restore viewcone
		player.PlayerCone_SetMinYaw( -179 )
		player.PlayerCone_SetMaxYaw( 181 )
		player.PlayerCone_Disable()
	}

	return wallAngles
}

vector function GetPlayerInputDirection( entity player )
{
	vector playerAngles = player.EyeAngles()
	playerAngles.x = 0
	playerAngles.z = 0
	vector forward = AnglesToForward( playerAngles )
	vector right = AnglesToRight( playerAngles )

	float xAxis = player.GetInputAxisRight()
	float yAxis = player.GetInputAxisForward()
	xAxis = GraphCapped( xAxis, -1.0, 1.0, -0.4, 0.4 )
	yAxis = GraphCapped( yAxis, -1.0, 1.0, 1.0, 0.75 ) //Cap it so you don't actually let the players jump forwards
	//print( "xAxis: " + string( xAxis ) )
	//print( "yAxis: " + string( xAxis ) )
	vector directionVec = Vector(0,0,0)
	directionVec += right * xAxis
	directionVec += forward * yAxis

	vector directionAngles = VectorToAngles( directionVec )
	vector directionForward = AnglesToForward( directionAngles )

	return directionForward
}

void function KickPlayerOffWall( entity player )
{
	player.ForceCrouch() // best way to do it
	WaitFrame() // wait is needed if you want to make them able to stand again
	player.UnforceCrouch() // restore stand
	player.ForceStand() // make player stand up for fight, no need to manually cancel crouch
	WaitFrame()
	player.UnforceStand() // restore crouch
}

/////////////////////////////////
///// UTILITY FUNCTIONS END /////
/////////////////////////////////
