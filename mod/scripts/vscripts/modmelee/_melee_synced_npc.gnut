global function MeleeSyncedNPC_Init

global function MeleeSyncedNPC_EnableAll_Init

global function NPCTriesSyncedMelee // just for fun! not to be confused with NPCTriesSyncedMeleeVsPlayer() in sh_melee.gnut

// npc executing players or titans
global function MeleeSyncedNPC_AllowNPCTitanExecutions
global function MeleeSyncedNPC_OnlyAllowNPCTitanWithPilotsToExecute // default is true
global function MeleeSyncedNPC_AllowNPCPilotExecutions
global function MeleeSyncedNPC_AllowNPCSpectreExecutions
global function MeleeSyncedNPC_AllowNPCGruntExecutions
// player executing npc pilot
global function MeleeSyncedNPC_AllowExecutingNPCPilot // "pilotelite" is not a valid syncedMelee body type, this overwrites it to "human"
// npc executing each other
global function MeleeSyncedNPC_AllowNPCPilotExecuteOtherNPCs // pilot models don't have syncedMeleeData, so let them use mp executions
// npc titan executions
global function MeleeSyncedNPC_SetTitanIgnoreHealthCheck // disable health check on specific titan

// utility, mostly shared with sh_melee.gnut
// syncedmelee availability
global function MeleeSyncedNPC_IsTitanAbleToExecute
global function MeleeSyncedNPC_IsTitanOnlyAllowedToExecuteWithNPCPilot
global function MeleeSyncedNPC_IsPilotAbleToExecute
global function MeleeSyncedNPC_IsSpectreAbleToExecute
global function MeleeSyncedNPC_IsGruntAbleToExecute
global function MeleeSyncedNPC_ExecutingNPCPilotAllowed
global function MeleeSyncedNPC_IsPilotAbleToExecuteOtherNPCs
global function MeleeSyncedNPC_IsTitanIgnoresHealthCheck

// normal synced melee with scripted cameras(not working well)
global function MeleeSyncedNPC_NPCUseNormalSyncedMelee // they'will try to use executions from synced_melee_data.rson

// must match npcs modifed in this file
const array<string> NPC_EXECUTION_ALLOWED_ATTACKERS = 
[ 
    "npc_titan", 
    "npc_pilot_elite", 
    "npc_spectre", 
    "npc_soldier"
]
// anti-crash... for some reason
const array<string> NPC_EXECUTION_ALLOWED_VICTIMS =
[
    "player",
    "npc_titan", 
    "npc_pilot_elite", 
    "npc_spectre", 
    "npc_soldier"
]
// these damageSource triggering npc executions
const array<int> NPC_EXECUTION_DAMAGESOURCE =
[
    eDamageSourceId.auto_titan_melee,
    //eDamageSourceId.human_melee, // npc pilot uses grunt_melee
    eDamageSourceId.grunt_melee,
    eDamageSourceId.spectre_melee,

    // specific ones
    eDamageSourceId.prowler_melee
]

const array<string> NPC_NORMAL_SYNCED_MELEE_ALLOWED_ATTACKERS =
[
    "npc_prowler", // only has normalSyncedMelees!
    "npc_spectre"
]

// these ref will crash if npc uses them
// has been fixed by reworking both player_cloak.nut and sh_melee_synced_human.gnut related functions
/*
const array<string> HUMANSIZED_NPC_DISALLOWED_REF =
[
    "execution_holopilot",
    "execution_cloak"
]
*/

struct
{
    // player
    bool canExecuteNpcPilot = false

    // npcs
    bool npcTitanExecution = true // this is allowed by default because titans with npc pilot embarked don't exist in vanilla
    bool npcTitanWithPilotsOnly = true
    bool npcPilotExecution = true // this is allowed by default because npc pilots don't exist in vanilla
    bool npcSpectreExecution = false
    bool npcGruntExecution = false

    bool npcPilotExecuteOtherNPCs = true // this is allowed by default because npc pilots don't exist in vanilla

    table<entity, bool> soulIgnoreHealthChecks

    bool useNormalSyncedMelee = false

    // in-file table
    table<entity, bool> npcDoingSyncedMelee // npc melee attack has extramely large radius, have to manually handle their states or they'll be able to execute multiple targets together
    table<entity, float> npcLastTrySyncedMeleeTime
} file

void function MeleeSyncedNPC_Init()
{
    //print( "Running MeleeSyncedNPC_Init()" )
    foreach ( int damageSourceID in NPC_EXECUTION_DAMAGESOURCE )
        AddDamageCallbackSourceID( damageSourceID, OnNPCMeleeDamageTarget )

    // test!
    //AddCallback_OnClientConnected( OnClientConnected )
    AddCallback_IsValidMeleeExecutionTarget( MeleeSyncedNPC_IsValidExecutionTarget )
}

void function MeleeSyncedNPC_EnableAll_Init()
{
    file.npcTitanExecution = true
    file.npcPilotExecution = true
    file.npcSpectreExecution = true
    file.npcGruntExecution = true
    file.npcPilotExecuteOtherNPCs = true
}

bool function MeleeSyncedNPC_IsValidExecutionTarget( entity attacker, entity target )
{
    // handle npc pilot execution case here
    if ( target.GetClassName() == "npc_pilot_elite" )
    {
        // npc pilot executing npc pilot case
        // ignore file.canExecuteNpcPilot, only needs file.npcPilotExecuteOtherNPCs to be enabled
        if ( attacker.GetClassName() == "npc_pilot_elite" )
        {
            if ( file.npcPilotExecuteOtherNPCs )
                return true
        }

        // other character needs this setting to be enabled before executing npc pilot
        if ( !file.canExecuteNpcPilot )
            return false
    }

    return true // default value: return true to let other callbacks go through
}

void function OnNPCMeleeDamageTarget( entity victim, var damageInfo )
{
    NPCTriesSyncedMelee( victim, damageInfo )
}

bool function NPCTriesSyncedMelee( entity victim, var damageInfo )
{
    // debug
    //print( "RUNNING NPCTriesSyncedMelee()" )

    if( !IsValid( victim ) )
        return false
    if( !victim.IsPlayer() && !victim.IsNPC() ) // not a valid type to be executed
        return false
    // anti-crash, technically it should be handled by GetSyncedMeleeChooserForPlayerVsTarget()? maybe because I messed up MeleeThread_PilotVsEnemy()
    if ( !NPC_EXECUTION_ALLOWED_VICTIMS.contains( victim.GetClassName() ) )
        return false

    entity attacker = DamageInfo_GetAttacker( damageInfo )
    if( !IsValid( attacker ) )
        return false
    if( !attacker.IsNPC() )
        return false

    if( attacker.ContextAction_IsActive() || victim.ContextAction_IsActive() ) // already doing a execution?
		return false

    // prevent them executing multiple targets together
    if ( attacker in file.npcDoingSyncedMelee )
    {
        DamageInfo_SetDamage( damageInfo, 0 ) // this attacker's melee can still hit multiple targets, should ignore following damages
        return false
    }
    // update timer: npc titan melee can sometimes hit one target twice? leading to doubled execution animation
    if ( !( attacker in file.npcLastTrySyncedMeleeTime ) )
        file.npcLastTrySyncedMeleeTime[ attacker ] <- Time()
    else
    {
        if ( Time() - file.npcLastTrySyncedMeleeTime[ attacker ] < 0.2 ) // add 0.2s for better handling
            return false
        file.npcLastTrySyncedMeleeTime[ attacker ] = Time()
    }

    // general availability check
    if ( !CodeCallback_IsValidMeleeExecutionTarget( attacker, victim ) )
        return false

    // normal syncedMelee checks!
    if( file.useNormalSyncedMelee && NPC_NORMAL_SYNCED_MELEE_ALLOWED_ATTACKERS.contains( attacker.GetClassName() ) )
    {
        if( TryNormalSyncedMelee( attacker, victim ) ) // normal syncedMelee exists on this class? or it's not 100% doing it?
        {
            DamageInfo_SetDamage( damageInfo, 0 )
            return false
        }
    }
    // general class check
    if( !NPC_EXECUTION_ALLOWED_ATTACKERS.contains( attacker.GetClassName() ) )
        return false

    bool canProgress = victim.IsPlayer() || victim.IsTitan()
    // specific class checks
    // npc pilot try perform mp executions against other npcs
    if ( IsPilotElite( attacker ) )
    {
        if ( victim.IsPlayer() && !file.npcPilotExecution )
            canProgress = false
        else if ( victim.IsNPC() && file.npcPilotExecuteOtherNPCs )
            canProgress = true
        //print( "pilotElite canProgress: " + string( canProgress ) )
    }
    // other npcs do have their syncedMeleeData, no need to perform a mp execution against other npcs
    if( IsSpectre( attacker ) )
    {
        if ( !file.npcSpectreExecution )
            canProgress = false
    }
    if( IsGrunt( attacker ) )
    {
        if ( !file.npcGruntExecution )
            canProgress = false
    }
    
    if ( !canProgress )
        return false

    // titan specific checks, should basically match AttemptScriptedExecution() checks, now using shared func TitanMelee_CanScriptedExecution()
    if( attacker.IsTitan() && victim.IsTitan() )
    {
        if( !file.npcTitanExecution )
            return false
        if( !TitanHasNpcPilot( attacker ) && file.npcTitanWithPilotsOnly )
            return false
        
        //print( "TitanMelee_CanScriptedExecution() for npc:" + string( TitanMelee_CanScriptedExecution( attacker, victim ) ) )
        if ( !TitanMelee_CanScriptedExecution( attacker, victim ) )
			return false
        // victim doomed check now handled properly by reworked ShouldPlayerExecuteTarget()
        // no need to hardcode here
        //if ( !GetDoomedState( victim ) ) // victim is not doomed!
        //    return

        // this hit will kill the victim
        // if we want them to execute more targets, remove this check
        // maybe make it a setting for each entity? so we can make boss titans execute more targets but normal titans won't
        if ( !MeleeSyncedNPC_IsTitanIgnoresHealthCheck( attacker ) )
        {
            // shared utility function from damage_calc_util.gnut
            if ( !TitanCanSurviveDamage( victim, damageInfo ) )
                return false
        }
    }

    // debug
    //Melee_SetExecutionRefsOverride( attacker, ["execution_holopilot", "execution_cloak"] )

    // all checks passed
    //print( "npc tries synced melee.." )
    // EDIT: no need to remove damage... victim will be set to invulnerable in PlayerTriesSyncedMelee()
    // we need to let damage callbacks go through, otherwise we can't get correct lastAttacker
    //DamageInfo_SetDamage( damageInfo, 0 ) // remove damage from this hit! also remove for titans, since we're using AddDamageCallbackSourceID(), prevent sometimes they get extra damage from following damage callbacks
    int maxDamage = int( DamageInfo_GetDamage( damageInfo ) )
    int validHealth = GetTitanValidHealthFromDamageInfo( victim, damageInfo )
    if ( validHealth <= maxDamage ) // damage is higher than valid health!
        maxDamage = validHealth - 1 // make sure we never die from damage
    DamageInfo_SetDamage( damageInfo, maxDamage )

    // npc melee attack has extramely large radius
    // have to manually handle something, or they can execute multiple targets together
    //thread PlayerTriesSyncedMelee( attacker, victim )
    thread NPCSyncedMeleeThink( attacker, victim )
    return true
}

void function NPCSyncedMeleeThink( entity attacker, entity victim )
{
    file.npcDoingSyncedMelee[ attacker ] <- true

    OnThreadEnd
    (
        function(): ( attacker, victim )
        {
            if ( IsValid( attacker ) )
            {
                delete file.npcDoingSyncedMelee[ attacker ]
            }
        }
    )

    waitthread PlayerTriesSyncedMelee( attacker, victim )
}

bool function TryNormalSyncedMelee( entity attacker, entity target )
{
    // we've done many checks in NPCTrysSyncedMelee(), let's do some other ones
    if ( IsSpectre( attacker ) )
    {
        thread SpectreRip( attacker, target )
        return true
    }
    if ( IsProwler( attacker ) )
    {
        thread ProwlerRip( attacker, target )
        return true
    }
    return false
}

// new syncedMelees!
// prowler
void function ProwlerRip( entity prowler, entity target )
{
    prowler.EndSignal( "OnDeath" )
    prowler.EndSignal( "OnDestroy" )
    target.EndSignal( "OnDeath" )
    target.EndSignal( "OnDestroy" )

    vector startAngles = prowler.GetAngles()
    vector startOrigin = prowler.GetOrigin()
	prowler.SetAngles( prowler.GetAngles() + <0,180,0> )
    prowler.SetOrigin( prowler.GetOrigin() + <0,0,10> )
    target.SetOrigin( target.GetOrigin() + <0,0,10> )
	thread PlayAnim( prowler , "pr_grunt_attack_F" )
    thread ProwlerRipSound( prowler, target )
    if( target.IsPlayer() )
    {
        // try to use first person
        //thread PlayerBeingNormalExecuteCameraThink( target )
        FakeFirstPersonSequence( target )
    }
	waitthread PlayAnim( target , "pt_prowler_attack_F" , prowler )

	if ( IsAlive(target) )
	{
	    target.Die( prowler, prowler, { damageSourceId = eDamageSourceId.human_execution, scriptType = DF_RAGDOLL })
	}
    if ( IsValid( prowler ) )
    {
        prowler.SetAngles( startAngles )
        prowler.SetOrigin( startOrigin )
    }
}

void function ProwlerRipSound( entity prowler, entity target )
{
    prowler.EndSignal( "OnDeath" )
    prowler.EndSignal( "OnDestroy" )
    target.EndSignal( "OnDeath" )
    target.EndSignal( "OnDestroy" )

    EmitSoundOnEntity( prowler, "prowler_vocal_attack" )
    wait 0.5
    EmitSoundAtPosition( TEAM_UNASSIGNED, prowler.GetOrigin(), "prowler_mvmt_flinchjumpfaceplant_dirt_3p" )
    wait 0.2
    EmitSoundOnEntity( target, "diag_efforts_DeathProwler_gl_grunt_3p" )
    wait 0.85
    TryHeadshotDeathFX( target )
    EmitSoundOnEntity( target, "death_pinkmist" )
}

// spectre
void function SpectreRip( entity spectre, entity target )
{
    spectre.EndSignal( "OnDeath" )
    spectre.EndSignal( "OnDestroy" )
    target.EndSignal( "OnDeath" )
    target.EndSignal( "OnDestroy" )

    vector startAngles = spectre.GetAngles()
	spectre.SetAngles( spectre.GetAngles() + <0,180,0> )
	thread PlayAnim( spectre , "sp_stand_melee_headrip_A" )
    if( target.IsPlayer() )
    {
        // try to use first person
        //thread PlayerBeingNormalExecuteCameraThink( target )
        FakeFirstPersonSequence( target )
    }
	waitthread PlayAnim( target , "pt_stand_melee_headrip_V" , spectre )

	if ( IsAlive(target) )
	{
	    target.Die( spectre, spectre, { damageSourceId = eDamageSourceId.human_execution, scriptType = DF_RAGDOLL })
	}
    if ( IsValid( spectre ) )
    {
        spectre.SetAngles( startAngles )
    }
}

// utilities?
void function PlayerBeingSyncedMelee( entity target )
{
	if ( !target )
		return
	if ( !IsAlive( target ) )
		return
    if( !target.IsPlayer() )
        return

    target.EndSignal( "OnDeath" )
    target.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( target )
		{
			if ( IsValid( target ) )
			{
				RemoveCinematicFlag( target, CE_FLAG_TITAN_3P_CAM )
				RemoveCinematicFlag( target, CE_FLAG_EXECUTION )
                RemoveCinematicFlag( target, CE_FLAG_HIDE_MAIN_HUD )
			}
		}
	)

    if( target.IsTitan() )
    {
        entity titanSoul = target.GetTitanSoul()
        if( IsValid( titanSoul ) )
            target.e.recentDamageHistory = titanSoul.e.recentDamageHistory
    }

    if( target.IsTitan() )
        AddCinematicFlag( target, CE_FLAG_TITAN_3P_CAM )
    AddCinematicFlag( target, CE_FLAG_EXECUTION )
    AddCinematicFlag( target, CE_FLAG_HIDE_MAIN_HUD )

    WaittillAnimDone( target )
}

void function PlayerBeingNormalExecuteCameraThink( entity player )
{
	if( !player.IsPlayer() )
		return
	entity viewControl = CreateEntity( "point_viewcontrol" )
	viewControl.kv.spawnflags = 56 // infinite hold time, snap to goal angles, make player non-soli
    
	vector viewVector = player.GetViewVector()
	vector viewAngle = VectorToAngles( viewVector )
	vector eyeAngle = player.EyeAngles()
	float distanceYaw = 70
	float distancePitch = 70
	vector offset = AnglesToForward( < 0, viewAngle.y + 90, 0 > ) * distanceYaw + < 0, 0, distancePitch >
	vector angles = < 30, eyeAngle.y - 90, 0 >
	viewControl.SetParent( player, "ORIGIN" )
	viewControl.SetOrigin( offset )
	viewControl.SetAngles( angles )
	DispatchSpawn( viewControl )

    entity fpProxy = player.GetFirstPersonProxy()
	if ( IsValid( fpProxy )  )
		fpProxy.HideFirstPersonProxy()
	player.SetViewEntity( viewControl, true )
    AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )

	OnThreadEnd(
		function() : ( player, viewControl )
		{
			if( IsValid( player ) )
			{
				entity fpProxy = player.GetFirstPersonProxy()
				if( IsValid( fpProxy ) )
	            	fpProxy.ShowFirstPersonProxy()
				player.ClearViewEntity()
				RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
			}
			if( IsValid( viewControl ) )
				viewControl.Destroy()
		}
	)

	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnAnimationInterrupted" )
	player.EndSignal( "ScriptAnimStop" )
	player.EndSignal( "OnDeath" )
	player.WaitSignal( "OnAnimationDone" )
}


// mostly no need to change these
void function MeleeSyncedNPC_AllowNPCTitanExecutions( bool allow )
{
    file.npcTitanExecution = allow
}

void function MeleeSyncedNPC_OnlyAllowNPCTitanWithPilotsToExecute( bool only )
{
    file.npcTitanExecution = true
    file.npcTitanWithPilotsOnly = only
}

void function MeleeSyncedNPC_AllowNPCPilotExecutions( bool allow )
{
    file.npcPilotExecution = allow
}

void function MeleeSyncedNPC_AllowNPCSpectreExecutions( bool allow )
{
    file.npcSpectreExecution = allow
}

void function MeleeSyncedNPC_AllowNPCGruntExecutions( bool allow )
{
    file.npcGruntExecution = allow
}

void function MeleeSyncedNPC_AllowExecutingNPCPilot( bool allow )
{
    file.canExecuteNpcPilot = allow
}

void function MeleeSyncedNPC_AllowNPCPilotExecuteOtherNPCs( bool allow )
{
    file.npcPilotExecuteOtherNPCs = allow 
}

void function MeleeSyncedNPC_SetTitanIgnoreHealthCheck( entity titan, bool ignore )
{
    // use soul for storing titan stuffs
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return
    if ( !( titan in file.soulIgnoreHealthChecks ) )
        file.soulIgnoreHealthChecks[ soul ] <- false // default value is don't ignore health check
    file.soulIgnoreHealthChecks[ soul ] = ignore
}

bool function MeleeSyncedNPC_IsTitanAbleToExecute()
{
    return file.npcTitanExecution
}

bool function MeleeSyncedNPC_IsTitanOnlyAllowedToExecuteWithNPCPilot()
{
    return file.npcTitanExecution && file.npcTitanWithPilotsOnly
}

bool function MeleeSyncedNPC_IsPilotAbleToExecute()
{
    return file.npcPilotExecution
}

bool function MeleeSyncedNPC_IsSpectreAbleToExecute()
{
    return file.npcSpectreExecution
}

bool function MeleeSyncedNPC_IsGruntAbleToExecute()
{
    return file.npcGruntExecution
}

bool function MeleeSyncedNPC_ExecutingNPCPilotAllowed()
{
    return file.canExecuteNpcPilot
}

bool function MeleeSyncedNPC_IsPilotAbleToExecuteOtherNPCs()
{
    return file.npcPilotExecuteOtherNPCs
}

bool function MeleeSyncedNPC_IsTitanIgnoresHealthCheck( entity titan )
{
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return false
    if ( !( soul in file.soulIgnoreHealthChecks ) )
        return false // default value is don't ignore health check
    return file.soulIgnoreHealthChecks[ soul ]
}

void function MeleeSyncedNPC_NPCUseNormalSyncedMelee( bool use )
{
    file.useNormalSyncedMelee = use
}

// test stuff
void function OnClientConnected( entity player )
{
    AddEntityCallback_OnDamaged( player, TEST_GetNPCPilotMeleeDamageSourceID )
}

void function TEST_GetNPCPilotMeleeDamageSourceID( entity player, var damageInfo )
{
    print( "DamageSourceID index is: " + DamageSourceIDToString( DamageInfo_GetDamageSourceIdentifier( damageInfo ) ) )
}