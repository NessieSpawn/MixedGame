// if player not having a melee weapon, this helps them to execute any valid target
global function MeleeSyncedNoLimit_Init

global function MeleeSyncedNoLimit_EnableMeleeWeaponExecution // this will make executing a friendly player much easier
global function MeleeSyncedNoLimit_EnableFriendlyExecution // if player not enabling friendlyFire

const float NO_LIMIT_EXECUTION_RANGE = 150
const float NO_LIMIT_EXECUTION_TRIGGER_TIME = 0.2
const float NO_LIMIT_EXECUTION_DURATION = 0.2 // maybe lower than trigger time?

const array<string> NO_LIMIT_EXECUTION_ALLOWED_CLASSES = 
[
	"player",
	"npc_soldier",
	"npc_spectre",
	"npc_pilot_elite",
]

struct
{
	bool meleeWeaponNolimitExecution = false
	bool friendlyExecution = false

	table<entity, bool> playerDebounceTable
} file

void function MeleeSyncedNoLimit_Init()
{
    RegisterSignal( "NoLimitExecutionThink" )

    AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
	AddPlayerHeldButtonEventCallback( player, IN_MELEE, CallbackFuncNolimitExecutions, NO_LIMIT_EXECUTION_TRIGGER_TIME )
	// init
	file.playerDebounceTable[ player ] <- false
}

void function CallbackFuncNolimitExecutions( entity player )
{
	if( !Melee_IsSyncedMeleeNoLimit() ) // basically check this
		return
	if( !IsAlive( player ) )
		return

	entity meleeWeapon = player.GetMeleeWeapon()
	if( IsValid( meleeWeapon ) && file.meleeWeaponNolimitExecution ) // melee weapon valid, keep trying to execute friendlies
		thread TryNolimitExecutionWithMeleeWeapon( player, meleeWeapon )
	else // no melee, normally try
		thread NoLimitExecutionThink( player )
}

// this is basically designed for friendly fires
void function TryNolimitExecutionWithMeleeWeapon( entity player, entity meleeWeapon = null )
{
	if( file.playerDebounceTable[ player ] )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "NoLimitExecutionThink" )
	player.EndSignal( "NoLimitExecutionThink" )
	meleeWeapon.EndSignal( "OnDestroy" )

	file.playerDebounceTable[ player ] = true // mark as started!
	OnThreadEnd(
		function():( player )
		{
			if( IsValid( player ) )
				file.playerDebounceTable[ player ] = false // clean up
		}
	)

	while( true )
	{
		if( !player.PlayerMelee_IsAttackActive() ) // melee ends!
			return

		if( TryNolimitExecution( player ) ) // keep trying...
			return

		WaitFrame()
	}
}

void function NoLimitExecutionThink( entity player )
{
	if( file.playerDebounceTable[ player ] )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "NoLimitExecutionThink" )
	player.EndSignal( "NoLimitExecutionThink" )

	file.playerDebounceTable[ player ] = true // mark as started!
	OnThreadEnd(
		function():( player )
		{
			if( IsValid( player ) )
				file.playerDebounceTable[ player ] = false // clean up
		}
	)

	float startTime = Time()
	while( startTime + NO_LIMIT_EXECUTION_DURATION >= Time() )
	{
		if( TryNolimitExecution( player ) ) // keep trying...
			return

		WaitFrame()
	}
}

bool function TryNolimitExecution( entity player )
{
	if( !Melee_IsSyncedMeleeNoLimit() )
		return false
	if( player.IsTitan() )
		return false
	if( player.IsPhaseShifted() )
		return false
	if( player.ContextAction_IsActive() ) // already doing a execution?
		return false
	array<entity> ignoredArray
	ignoredArray.extend( GetEntArrayByClass_Expensive( "item_titan_battery" ) ) // ignore all batteries... cuz I'm adding battery throw ability
	ignoredArray.append( player )
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * NO_LIMIT_EXECUTION_RANGE, ignoredArray, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		//print( "hitEnt Invalid" )
		return false
	}
	//print( "hitEnt is " + traceResult.hitEnt.GetClassName() )
	entity target = traceResult.hitEnt
	if( !IsValid( target ) )
		return false
	if( target.IsTitan() )
		return false
	if ( !NO_LIMIT_EXECUTION_ALLOWED_CLASSES.contains( target.GetClassName() ) )
		return false
	if ( target.IsNPC() || target.IsPlayer() ) // defensive fix
	{
		if( target.ContextAction_IsActive() ) // already doing a execution?
			return false
		if( target.IsPhaseShifted() )
			return false
	}
	// if player has meleeWeapon, they can target enemies normally. since friendlies pilot isn't solid for players, do this check to make nolimitExecutions targeting them
	if( target.GetTeam() != player.GetTeam() && IsValid( player.GetMeleeWeapon() ) )
		return false

	// ignore backstab check will allow player executing friendlies without friendlyFire turns on
	bool isValidTarget = CodeCallback_IsValidMeleeExecutionTarget( player, target )
	if ( isValidTarget || file.friendlyExecution )
	{
		// action validations check( PlayerTriesSyncedMelee() can freeze player if no action can be found )
		SyncedMeleeChooser ornull actions = GetSyncedMeleeChooserForPlayerVsTarget( player, target )
		if ( actions == null )
			return false
		expect SyncedMeleeChooser( actions )
		SyncedMelee ornull action = FindBestSyncedMelee( player, target, actions )
		if ( action == null )
			return false

		thread PlayerTriesSyncedMelee( player, target )
		return true // guess it's succeeded
	}
	return false // did nothing!
}

void function PlayerSyncedMeleeScreenEffect( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				RemoveCinematicFlag( player, CE_FLAG_TITAN_3P_CAM )
				RemoveCinematicFlag( player, CE_FLAG_EXECUTION )
                RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
			}
		}
	)

	if( player.IsTitan() )
		AddCinematicFlag( player, CE_FLAG_TITAN_3P_CAM )
    AddCinematicFlag( player, CE_FLAG_EXECUTION )
    AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )

    WaittillAnimDone( player )
}

// settings
void function MeleeSyncedNoLimit_EnableMeleeWeaponExecution( bool enabled )
{
	file.meleeWeaponNolimitExecution = enabled
}

void function MeleeSyncedNoLimit_EnableFriendlyExecution( bool enabled )
{
	file.friendlyExecution = enabled
}