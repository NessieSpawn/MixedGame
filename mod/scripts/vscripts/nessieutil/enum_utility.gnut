untyped
global function Nessie_Enum_Utility_Init

global function AppendToEnum
global function AppendToConstTable
global function RegisterPassive

void function Nessie_Enum_Utility_Init()
{
    AddSoulInitFunc( InitCustomPassivesForSoul )
}

void function InitCustomPassivesForSoul( entity soul )
{
    // to get rid of respawn's hardcode about GetNumPassives()
    // god why respawn have to do things like that?
    soul.passives = arrayofsize( ePassives.len(), false )
}

int function AppendToEnum( string enumName, string newRef )
{
    table enumToAppend = expect table( getconsttable()[enumName] )
    enumToAppend[newRef] <- enumToAppend.len()

    return expect int( enumToAppend[newRef] )
}

void function AppendToConstTable( string tableName, var newKey, var newValue )
{
    table tableToAppend = expect table( getconsttable()[tableName] )
    tableToAppend[newKey] <- newValue
}

int function RegisterPassive( string passiveName )
{
    // debug
    print( "Registering passive: " + passiveName )
    print( "ePassives.len() before registration: " + string( ePassives.len() ) )

    table ePassives = expect table( getconsttable()["ePassives"] )
    table _PassiveFromEnum = expect table( getconsttable()["_PassiveFromEnum"] )
    ePassives[passiveName] <- ePassives.len()
    _PassiveFromEnum[passiveName] <- ePassives[passiveName]

    print( "ePassives.len() after registration: " + string( ePassives.len() ) )
    print( "ePassives[passiveName]: " + ePassives[passiveName] )

    return expect int( ePassives[passiveName] )
}