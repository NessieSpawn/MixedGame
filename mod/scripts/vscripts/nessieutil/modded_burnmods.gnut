// note that this file is currently only for amped weapons burncard, can't affect CodeCallback_CheckPassThroughAddsMods()
untyped // for inflictor.s.weaponMods... fuck respawn why not leaving a entity struct?
global function Modded_Weapon_BurnMods_Init

// main callbacks
global function ModdedBurnMods_AddDisabledMod // weapon with these mods won't get a burnmod. mostly for CodeCallback_CheckPassThroughAddsMods()
global function ModdedBurnMods_AddReplacementBurnMod // use another mod to replace a weapon's burnmod

// utilities
global function ModdedBurnMods_IsModdedWeaponOrProjectile
global function ModdedBurnMods_WeaponOrProjectileHasReplacementBurnMod
global function ModdedBurnMods_WeaponOrProjectileHasDisabledBurnMod

global function ModdedBurnMods_GetBurnModFromWeaponOrProjectile // pass a weapon or projectile entity and get it's burnmod with modded support

struct
{
	array<string> moddedMods
	array<string> burnModDisabledMods
	table<string, string> replacementBurnMods
} file

void function Modded_Weapon_BurnMods_Init()
{
	// try to add "DF_BURN_CARD_WEAPON" for burnmod kills!
	// unfortunatelly client won't track it. obitColor is a variable that nowhere used
	//AddDamageCallback( "player", OnPlayerOrNPCDamaged )

	// using functions in modified _codecallbacks.gnut
	// handling modified burnmods for player( or maybe npcs ): disable passThroughAddsMods once we have a modded weapon
	TrackEntityPassThroughAddsMods()
}

void function ModdedBurnMods_AddDisabledMod( string mod )
{
	if ( !file.burnModDisabledMods.contains( mod ) )
		file.burnModDisabledMods.append( mod )

	AddToTotalModdedMods( mod )
}

void function ModdedBurnMods_AddReplacementBurnMod( string mod, string replacement )
{
	if ( !( mod in file.replacementBurnMods ) )
		file.replacementBurnMods[ mod ] <- ""
	file.replacementBurnMods[ mod ] = replacement

	AddToTotalModdedMods( mod )
}

void function AddToTotalModdedMods( string mod )
{
	if ( !file.moddedMods.contains( mod ) )
		file.moddedMods.append( mod )
}

bool function ModdedBurnMods_IsModdedWeaponOrProjectile( entity weapon )
{
	array<string> mods = GetModsFromWeaponOrProjectile( weapon )

	foreach ( string mod in file.moddedMods )
	{
		if ( mods.contains( mod ) )
			return true
	}

	return false
}

string function ModdedBurnMods_GetBurnModFromWeaponOrProjectile( entity weapon )
{
	// generic checks
    if( !IsValid( weapon ) )
        return ""
	if ( !ModdedBurnMods_IsModdedWeaponOrProjectile( weapon ) )
		return ""
	if ( ModdedBurnMods_WeaponOrProjectileHasDisabledBurnMod( weapon ) )
		return ""

	array<string> mods = GetModsFromWeaponOrProjectile( weapon )

	foreach ( string mod in mods )
	{
		if ( mod in file.replacementBurnMods )
			return file.replacementBurnMods[ mod ]
	}

	// no any modded burnmod found
	return ""
}

bool function ModdedBurnMods_WeaponOrProjectileHasReplacementBurnMod( entity weapon )
{
	if ( ModdedBurnMods_WeaponOrProjectileHasDisabledBurnMod( weapon ) ) // shouldn't apply any burnmod for disabled weapon
		return false

	array<string> mods = GetModsFromWeaponOrProjectile( weapon )

    foreach ( string mod, string replace in file.replacementBurnMods )
	{
		if ( mods.contains( mod ) )
			return true
	}

	return false
}

bool function ModdedBurnMods_WeaponOrProjectileHasDisabledBurnMod( entity weapon )
{
	array<string> mods = GetModsFromWeaponOrProjectile( weapon )

	foreach ( string mod in file.burnModDisabledMods )
	{
		if ( mods.contains( mod ) )
			return true
	}

	return false
}

array<string> function GetModsFromWeaponOrProjectile( entity weaponOrProjectile )
{
	array<string> mods
	if ( weaponOrProjectile.IsProjectile() )
		mods = Vortex_GetRefiredProjectileMods( weaponOrProjectile ) // get mods with refire support
	else
		mods = weaponOrProjectile.GetMods()

	return mods
}

// try to add "DF_BURN_CARD_WEAPON" for burnmod kills!
// unfortunatelly client won't track it. obitColor is a variable that nowhere used
void function OnPlayerOrNPCDamaged( entity victim, var damageInfo )
{
	if ( AttackerIsUsingBurnModWeapon( damageInfo ) )
	{
		print( "Adding DF_BURN_CARD_WEAPON!" )
		DamageInfo_AddCustomDamageType( damageInfo, DF_BURN_CARD_WEAPON )
	}
}

// a copy of GetWeaponModsFromDamageInfo() in _weapon_utility.nut, with some tweak
bool function AttackerIsUsingBurnModWeapon( var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	entity weapon = DamageInfo_GetWeapon( damageInfo )
	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	int damageType = DamageInfo_GetCustomDamageType( damageInfo )

	array<string> mods
	if ( IsValid( weapon ) )
		mods = weapon.GetMods()
	else if ( IsValid( inflictor ) )
	{
		if ( "weaponMods" in inflictor.s && inflictor.s.weaponMods ) // used on cluster missiles...
		{
			foreach ( string mod in inflictor.s.weaponMods )
				mods.append( mod )
		}
		else if( inflictor.IsProjectile() )
			mods = Vortex_GetRefiredProjectileMods( inflictor ) // get mods with refire support
		else if ( damageType & DF_EXPLOSION && inflictor.IsPlayer() ) // seems damaged by hitscan weapon will pass attacker themselves as inflictor?
		{
			weapon = inflictor.GetActiveWeapon()
			if ( IsValid( weapon ) )
				mods = weapon.GetMods()
		}
		//Hack - Splash damage doesn't pass mod weapon through. This only works under the assumption that offhand weapons don't have mods.
	}
	else if ( IsValid( attacker ) ) // inflictor and attacker both invalid. check if it's attacker's hitscan weapon dealing splash damage
	{
		weapon = attacker.GetActiveWeapon()
		if ( IsValid( weapon ) )
			mods = weapon.GetMods()
	}

	if ( mods.len() == 0 )
		return false

	bool hasBurnMod = false
	string prefix = "burn_mod"
	foreach ( string mod in mods )
	{
		if ( mod.find( prefix ) == 0 )
		{
			hasBurnMod = true
			break
		}
	}

	return hasBurnMod
}

// using functions in modified _codecallbacks.gnut
// handling modified burnmods for player( or maybe npcs ): disable passThroughAddsMods once we have a modded weapon
void function TrackEntityPassThroughAddsMods()
{
	thread TrackEntityPassThroughAddsMods_Threaded()
}

void function TrackEntityPassThroughAddsMods_Threaded()
{
	while ( true )
	{
		array<entity> allCombatCharacterEnts
		allCombatCharacterEnts.extend( GetPlayerArray() )
		allCombatCharacterEnts.extend( GetNPCArray() )

		foreach ( entity guy in allCombatCharacterEnts )
		{
			if ( !IsValid( guy ) )
				continue
			// dead player update left until their next life
			if ( !IsAlive( guy ) )
				continue
			
			array<entity> weapons
			weapons.extend( guy.GetMainWeapons() )
			weapons.extend( guy.GetOffhandWeapons() )
			bool foundModdedWeapon = false
			foreach ( entity weapon in weapons )
			{
				if ( ModdedBurnMods_WeaponOrProjectileHasReplacementBurnMod( weapon ) || ModdedBurnMods_WeaponOrProjectileHasDisabledBurnMod( weapon ) )
				{
					foundModdedWeapon = true
					break
				}
			}

			// disable passThroughAddsMods once we have a modded weapon
			if ( foundModdedWeapon && !PassThroughAddsMods_IsDisabledOnEntity( guy ) )
				PassThroughAddsMods_SetDisabledForEntity( guy, true )
			else if ( !foundModdedWeapon && PassThroughAddsMods_IsDisabledOnEntity( guy ) )
				PassThroughAddsMods_SetDisabledForEntity( guy, false )
		}

		WaitFrame()
	}
}