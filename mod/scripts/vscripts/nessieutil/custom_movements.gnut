global function Nessie_CustomMovements_Init

global function SetPlayerGravityPermanent
global function SetPlayerAirAccelerationPermanent
global function SetPlayerAirSpeedPermanent
global function SetPlayerGroundFrictionPermanent

global function GetPlayerPermanentGravity
global function GetPlayerPermanentAirAcceleration
global function GetPlayerPermanentAirSpeed
global function GetPlayerPermaentGroundFriction

global function RestorePlayerPermanentGravity
global function RestorePlayerPermanentAirAcceleration
global function RestorePlayerPermanentAirSpeed
global function RestorePlayerPermanentGroundFriction

// stack system for force/unforce stand/crouch
// temp DEPRECATED. needs other scripts to use them
global function ForceStand_IncreaseStack
global function UnforceStand_DecreaseStack
global function ForceCrouch_IncreaseStack
global function UnforceCrouch_DecreaseStack

// temp setting use player.kv stuffs is enough

struct PlayerMovementStruct
{
    float ornull gravityScale
    float ornull gravityScaleAsTitan
    int ornull airAcceleration
    int ornull airAccelerationAsTitan
    int ornull airSpeed
    int ornull airSpeedAsTitan
    float ornull groundFriction
    float ornull groundFrictionAsTitan
}

struct
{
    table<entity, PlayerMovementStruct> playerSavedMovement
    table<entity, int> playerForceStandStackCount
    table<entity, int> playerForceCrouchStackCount
} file

void function Nessie_CustomMovements_Init()
{
    AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
    // init
    PlayerMovementStruct emptyStruct
    file.playerSavedMovement[ player ] <- emptyStruct
    file.playerForceStandStacks[ player ] <- 0
    file.playerForceCrouchStackCount[ player ] <- 0
}

void function SetPlayerGravityPermanent( entity player, float gravityScale )
{
    if ( player.IsTitan() )
        file.playerSavedMovement[ player ].gravityScaleAsTitan = gravityScale
    else
        file.playerSavedMovement[ player ].gravityScale = gravityScale
    player.kv.gravity = gravityScale
}

void function SetPlayerAirAccelerationPermanent( entity player, int airAcceleration )
{
    if ( player.IsTitan() )
        file.playerSavedMovement[ player ].airAccelerationAsTitan = airAcceleration
    else
        file.playerSavedMovement[ player ].airAcceleration = airAcceleration
    player.kv.airAcceleration = airAcceleration
}

void function SetPlayerAirSpeedPermanent( entity player, int airSpeed )
{
    if ( player.IsTitan() )
        file.playerSavedMovement[ player ].airSpeedAsTitan = airSpeed
    else
        file.playerSavedMovement[ player ].airSpeed = airSpeed
    player.kv.airSpeed = airSpeed
}

void function SetPlayerGroundFrictionPermanent( entity player, float groundFriction )
{
    if ( player.IsTitan() )
        file.playerSavedMovement[ player ].groundFrictionAsTitan = groundFriction
    else
        file.playerSavedMovement[ player ].groundFriction = groundFriction
    player.SetGroundFrictionScale( groundFriction )
}

float function GetPlayerPermanentGravity( entity player )
{
    float ornull gravityScale
    if ( player.IsTitan() )
        gravityScale = file.playerSavedMovement[ player ].gravityScaleAsTitan
    else
        gravityScale = file.playerSavedMovement[ player ].gravityScale

    if ( gravityScale == null )
        return 0.0 // default value

    //print( "permanent gravityScale: " + string( gravityScale ) )
    return expect float( gravityScale )
}

int function GetPlayerPermanentAirAcceleration( entity player )
{
    int ornull airAcceleration
    if ( player.IsTitan() )
        airAcceleration = file.playerSavedMovement[ player ].airAccelerationAsTitan
    else
        airAcceleration = file.playerSavedMovement[ player ].airAcceleration

    if ( airAcceleration == null )
        return int( player.GetPlayerSettingsField( "airAcceleration" ) ) // default value

    //print( "permanent airAcceleration: " + string( airAcceleration ) )
    return expect int( airAcceleration )
}

int function GetPlayerPermanentAirSpeed( entity player )
{
    int ornull airSpeed
    if ( player.IsTitan() )
        airSpeed = file.playerSavedMovement[ player ].airSpeedAsTitan
    else
        airSpeed = file.playerSavedMovement[ player ].airSpeed

    if ( airSpeed == null )
        return int( player.GetPlayerSettingsField( "airSpeed" ) ) // default value

    //print( "permanent airSpeed: " + string( airSpeed ) )
    return expect int( airSpeed )
}

float function GetPlayerPermaentGroundFriction( entity player )
{
    float ornull groundFriction
    if ( player.IsTitan() )
        groundFriction = file.playerSavedMovement[ player ].groundFrictionAsTitan
    else
        groundFriction = file.playerSavedMovement[ player ].groundFriction

    if ( groundFriction == null )
        return 1.0 // default value

    //print( "permanent groundFriction: " + string( groundFriction ) )
    return expect float( groundFriction )
}

void function RestorePlayerPermanentGravity( entity player )
{
    player.kv.gravity = GetPlayerPermanentGravity( player )
}

void function RestorePlayerPermanentAirAcceleration( entity player )
{
    player.kv.airAcceleration = GetPlayerPermanentAirAcceleration( player )
}

void function RestorePlayerPermanentAirSpeed( entity player )
{
    player.kv.airSpeed = GetPlayerPermanentAirSpeed( player )
}

void function RestorePlayerPermanentGroundFriction( entity player )
{
    player.SetGroundFrictionScale( GetPlayerPermaentGroundFriction( player ) )
}

void function ForceStand_IncreaseStack( entity player )
{
    player.ForceStand()
    file.playerForceStandStackCount[ player ]++
}

void function UnforceStand_DecreaseStack( entity player )
{
    if ( file.playerForceStandStackCount[ player ] > 0 )
        file.playerForceStandStackCount[ player ]--
    if ( file.playerForceStandStackCount[ player ] <= 0 )
        player.UnforceStand()
}

void function ForceCrouch_IncreaseStack( entity player )
{
    player.ForceCrouch()
    file.playerForceCrouchStackCount[ player ]++
}

void function UnforceCrouch_DecreaseStack( entity player )
{
    if ( file.playerForceCrouchStackCount[ player ] > 0 )
        file.playerForceCrouchStackCount[ player ]--
    if ( file.playerForceCrouchStackCount[ player ] <= 0 )
        player.UnforceCrouch()
}