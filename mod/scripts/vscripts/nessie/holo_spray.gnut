// note: the holospray idea is from https://github.com/uniboi/HoloSprays, trying to make my own version
global function Nessie_HoloSpray_Init

global function HoloSpray_SetMaxCountPerPlayer
global function ThrowHoloSprayForPlayer
global function RegisterHoloSpray

//global function OnProjectileCollision_holo_spray // weapon utility

const int MAX_HOLO_SPRAY_PER_PLAYER         = 3
const string HOLO_SPRAY_WEAPON              = "mp_weapon_hard_cover" // fire grenade from this weapon

// base settings
const asset HOLO_SPRAY_BASE_MODEL           = $"models/weapons/sentry_shield/sentry_shield_proj.mdl"
const string HOLO_SPRAY_LIGHT_ATTACHMENT    = "fx_center"
const float HOLO_SPRAY_LAUNCH_SPEED         = 800
const vector HOLO_SPRAY_LAUNCH_OFFSET       = < 0, 0, -10 >
const float HOLO_SPRAY_INHERIT_VEL_SCALE    = 1.0
const string HOLO_SPRAY_LAUNCH_ATTACHMENT   = "PROPGUN"
const float HOLO_SPRAY_ANGLE_LIMIT          = 0.55
const float HOLO_SPRAY_BASE_MODELSCALE      = 1.0
const vector HOLO_SPRAY_BASE_OFFSET_DEFAULT = < 0, 0, 5 >
const vector HOLO_SPRAY_BASE_ANGLES_DEFAULT = < -90, 0, 0 >
const float HOLO_SPRAY_BASE_OFFSET_TRACED   = 3
const string HOLO_SPRAY_BASE_SCRIPTNAME     = "holospray_base"
const int HOLO_SPRAY_BASE_SOLIDTYPE         = 0 // was SOLID_VPHYSICS, SOLID_HITBOXES will make player slipping on it
const bool HOLO_SPRAY_SOUND_EVENT           = false
const string HOLO_SPRAY_DEPLOYED_SOUND      = "weapon_sentryfragdrone_bounce"
const string HOLO_SPRAY_LOOP_SOUND          = "Complex_Emit_ArkHologram_A"//"Boomtown_Emit_Holomap"

struct HoloSprayStruct
{
    asset sprite
    vector offset
    float scale
    string lightColor // mostly white( "125 125 125" )
}

struct
{
    int maxCountPerPlayer = MAX_HOLO_SPRAY_PER_PLAYER

    array<HoloSprayStruct> holoSprayStructs
    table < entity, array<entity> > playerHoloSprayTable
    table < entity, array<entity> > holoSprayEntSpriteTable
} file

void function Nessie_HoloSpray_Init()
{
    RegisterDefaultHoloSprays()
    AddCallback_OnClientConnected( OnClientConnected )
    
    // debugging
    //AddClientCommandCallback( "holospray", CC_ThrowHoloSpray )
}

void function HoloSpray_SetMaxCountPerPlayer( int count )
{
    file.maxCountPerPlayer = count
}

// debugging
bool function CC_ThrowHoloSpray( entity player, array<string> args )
{
    ThrowHoloSprayForPlayer( player )
    return true
}

void function RegisterDefaultHoloSprays()
{
    // from cl_main_hud, assume they're not used in ttf2?
    RegisterHoloSpray( $"materials/ui/scoreboard_mcorp_logo.vmt", < 0, 0, 40 >, 0.2, "125 125 125" )
    RegisterHoloSpray( $"materials/ui/scoreboard_imc_logo.vmt", < 0, 0, 40 >, 0.2, "125 125 125" )

    //RegisterHoloSpray( $"materials/ui/icon_loading.vmt", < 0, 0, 50 >, 0.5, "150 150 150" )
    //RegisterHoloSpray( $"materials/ui/hud/attacker_onscreen.vmt", < 0, 0, 50 >, 0.5, "150 150 150" )
    //RegisterHoloSpray( $"materials/models/holo_screens/holo_screen_scroll_text.vmt", < 0, 0, 50 >, 0.4, "150 150 150" )
    //RegisterHoloSpray( $"materials/models/weapons_r2/titan_plasma_railgun/titan_sniper_charge_fx.vmt", < 0, 0, 50 >, 0.5, "150 150 150" )
}

void function OnClientConnected( entity player )
{
    file.playerHoloSprayTable[ player ] <- []
}

// shared utility
void function ThrowHoloSprayForPlayer( entity player )
{
	entity grenade = Entities_CreateProjectileByClassname( "grenade", HOLO_SPRAY_WEAPON )
    //print( grenade )
    if ( !IsValid( grenade ) )
        return
    // settings for the base
    grenade.SetValueForModelKey( HOLO_SPRAY_BASE_MODEL )
    vector pos = player.EyePosition() - HOLO_SPRAY_LAUNCH_OFFSET // default
    vector angs = < 0, player.EyeAngles().y, 0 >
    vector vel = player.GetVelocity() * HOLO_SPRAY_INHERIT_VEL_SCALE + player.GetViewVector() * HOLO_SPRAY_LAUNCH_SPEED
    int attachID = player.LookupAttachment( HOLO_SPRAY_LAUNCH_ATTACHMENT )
    if ( attachID > 0 )
        pos = player.GetAttachmentOrigin( attachID )
	grenade.SetOrigin( pos )
    grenade.SetAngles( angs )
	grenade.SetOwner( player )
	//SetTeam( grenade, team )
    grenade.proj.savedAngles = < 0, angs.y, 0 > // for we deploying it
	DispatchSpawn( grenade )

    grenade.SetModel( HOLO_SPRAY_BASE_MODEL )
    //print( grenade.GetModelName() )
	grenade.SetVelocity( vel )
    thread TrackHoloSprayBasePlanted( grenade )
}

void function TrackHoloSprayBasePlanted( entity grenade )
{
    grenade.EndSignal( "OnDestroy" )

    grenade.WaitSignal( "Planted" )
    vector origin = grenade.GetOrigin()
    vector angles = grenade.GetAngles()
    entity owner = grenade.GetOwner()
    entity prop = CreatePropDynamic( HOLO_SPRAY_BASE_MODEL, origin, angles, HOLO_SPRAY_BASE_SOLIDTYPE )
    if ( !IsValid( prop ) )
        return
    // basic settings
    prop.kv.modelscale = HOLO_SPRAY_BASE_MODELSCALE
    prop.SetOwner( owner )
    thread TrackOwnerLifeTime( prop, owner )
    // owner settings
    if ( IsValid( owner ) )
    {
        if ( owner.IsPlayer() )
        {
            file.playerHoloSprayTable[ owner ].append( prop )
            if ( file.playerHoloSprayTable[ owner ].len() > file.maxCountPerPlayer )
            {
                entity latestSpray = file.playerHoloSprayTable[ owner ][0]
                if ( IsValid( latestSpray ) )
                {
                    //print( latestSpray )
                    file.playerHoloSprayTable[ owner ].removebyvalue( latestSpray )
                    StopHoloSpray( latestSpray )
                }
            }
        }
    }
    // deployment
    // default values
    vector deployOrigin = origin - HOLO_SPRAY_BASE_OFFSET_DEFAULT
    vector deployAngles = angles - HOLO_SPRAY_BASE_ANGLES_DEFAULT
    // get proper angles
    vector endOrigin = origin - < 0, 0, 32 >
    vector surfaceAngles = grenade.proj.savedAngles
    vector oldUpDir = AnglesToUp( surfaceAngles )
    TraceResults traceResult = TraceLine( origin, endOrigin, [], TRACE_MASK_SOLID, TRACE_COLLISION_GROUP_NONE )
    if ( traceResult.fraction < 1.0 )
    {
        vector forward = AnglesToForward( grenade.proj.savedAngles )
        surfaceAngles = AnglesOnSurface( traceResult.surfaceNormal, forward )

        vector newUpDir = AnglesToUp( surfaceAngles )
        if ( DotProduct( newUpDir, oldUpDir ) < HOLO_SPRAY_ANGLE_LIMIT )
            surfaceAngles = grenade.proj.savedAngles
        
        deployOrigin = traceResult.endPos + traceResult.surfaceNormal * HOLO_SPRAY_BASE_OFFSET_TRACED
    }
    prop.SetAbsOrigin( deployOrigin )
	prop.SetAbsAngles( deployAngles )
    DeployHoloSpray( prop )

    // destroy existing grenade
    grenade.Destroy()
}

void function DeployHoloSpray( entity baseEnt )
{
    // sound event
    if ( HOLO_SPRAY_SOUND_EVENT )
    {
        EmitSoundOnEntity( baseEnt, HOLO_SPRAY_DEPLOYED_SOUND )
        EmitSoundOnEntity( baseEnt, HOLO_SPRAY_LOOP_SOUND )
    }
    // get settings
    baseEnt.SetScriptName( HOLO_SPRAY_BASE_SCRIPTNAME )
    HoloSprayStruct spray = file.holoSprayStructs.getrandom()
    vector pos = baseEnt.GetOrigin()
    // attach sprite
    entity sprite = CreateSprite( pos, <0, 0, 0 >, spray.sprite, spray.lightColor, spray.scale )
    sprite.SetParent( baseEnt ) 
    sprite.SetOrigin( spray.offset )
    // attach light
    entity light = CreateSprite( pos, <0, 0 ,0 >, $"sprites/glow_05.vmt", spray.lightColor, 0.75 )
    light.SetParent( baseEnt, HOLO_SPRAY_LIGHT_ATTACHMENT )
    // save sprites for later clean up
    file.holoSprayEntSpriteTable[ baseEnt ] <- []
    file.holoSprayEntSpriteTable[ baseEnt ].append( sprite )
    file.holoSprayEntSpriteTable[ baseEnt ].append( light )
}

void function StopHoloSpray( entity baseEnt )
{
    if ( !( baseEnt in file.holoSprayEntSpriteTable ) )
        return
    StopSoundOnEntity( baseEnt, HOLO_SPRAY_LOOP_SOUND )
    array<entity> sprites = file.holoSprayEntSpriteTable[ baseEnt ]
    foreach ( entity sprite in sprites ) // stop effects first
    {
        if ( IsValid( sprite ) )
            sprite.Destroy()
    }
    if ( HOLO_SPRAY_SOUND_EVENT )
        EmitSoundOnEntity( baseEnt, "object_dissolve" )
    baseEnt.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
}

// track owner destroy
void function TrackOwnerLifeTime( entity baseEnt, entity owner )
{
    baseEnt.EndSignal( "OnDestroy" )

    owner.WaitSignal( "OnDestroy" )
    baseEnt.Destroy()
}

// from CreateLightSprite(), modified to allow using modified sprite
entity function CreateSprite( vector origin, vector angles, asset sprite, string lightColor = "255 0 0", float scale = 0.5, int renderMode = 9 )
{
    // maybe add some fadeDist?
	entity env_sprite = CreateEntity( "env_sprite" )
	env_sprite.SetScriptName( UniqueString( "molotov_sprite" ) )
	env_sprite.kv.rendermode = renderMode
	env_sprite.kv.origin = origin
	env_sprite.kv.angles = angles
	env_sprite.kv.rendercolor = lightColor
	env_sprite.kv.renderamt = 255
	env_sprite.kv.framerate = "10.0"
	env_sprite.SetValueForModelKey( sprite )
	env_sprite.kv.scale = string( scale )
	env_sprite.kv.spawnflags = 1
	env_sprite.kv.GlowProxySize = 16.0
	env_sprite.kv.HDRColorScale = 1.0
	DispatchSpawn( env_sprite )
	EntFireByHandle( env_sprite, "ShowSprite", "", 0, null, null )

	return env_sprite
}

// registering
void function RegisterHoloSpray( asset sprite, vector offset, float scale, string lightColor )
{
    PrecacheSprite( sprite )
    HoloSprayStruct newSpray
    newSpray.sprite = sprite
    newSpray.offset = offset
    newSpray.scale = scale
    newSpray.lightColor = lightColor
    file.holoSprayStructs.append( newSpray )
}