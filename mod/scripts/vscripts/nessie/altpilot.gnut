untyped // .SetPlayerSettingsWithMods() need it

global function AltPilot_Enable_Init // for loadedinits
global function AltPilot_Init

global function AltPilot_ReplacePilotModel
global function AltPilot_GivePlayerRandomModel

global function AltPilot_ApplyOverridesToPlayer

global function AltPilot_SetShouldReplaceModel
global function AltPilot_SetModelReplaceChance
global function AltPilot_SetShouldReplacePlayerSettings // this means we'll replace player's arms model and voice pack
global function AltPilot_SetPlayerModelAllRandom
global function AltPilot_SetShouldRemovePlayerCamo // we may want to remove player's arm camo if current model don't support camo well

global function AltPilot_SetPlayerSettingsOverride
global function AltPilot_SetPlayerModelOverride
global function AltPilot_RemovePlayerSettingsOverride
global function AltPilot_RemovePlayerModelOverride

// init all usable models here, with default player settings string
const table<asset, string> ALTPILOT_ALL_MODELS = 
{
	// vanilla pilot model
	[$"models/humans/pilots/pilot_medium_stalker_m.mdl"]		= "pilot_stalker_male",
	[$"models/humans/pilots/pilot_medium_stalker_f.mdl"]		= "pilot_stalker_female",
	[$"models/humans/pilots/pilot_medium_geist_m.mdl"]			= "pilot_grapple_male", 
	[$"models/humans/pilots/pilot_medium_geist_f.mdl"]			= "pilot_grapple_female",
	[$"models/humans/pilots/pilot_medium_reaper_m.mdl"]			= "pilot_medium_male",
	[$"models/humans/pilots/pilot_medium_reaper_f.mdl"]			= "pilot_medium_female",
	[$"models/humans/pilots/pilot_light_ged_m.mdl"]				= "pilot_light_male",
	[$"models/humans/pilots/pilot_light_ged_f.mdl"]				= "pilot_light_female",
	[$"models/humans/pilots/pilot_light_jester_m.mdl"]			= "pilot_nomad_male",
	[$"models/humans/pilots/pilot_light_jester_f.mdl"]			= "pilot_nomad_female", 
	[$"models/humans/pilots/pilot_heavy_drex_m.mdl"] 			= "pilot_geist_male",
	[$"models/humans/pilots/pilot_heavy_drex_f.mdl"] 			= "pilot_geist_female",
	[$"models/humans/pilots/pilot_heavy_roog_m.mdl"]			= "pilot_heavy_male", 
	[$"models/humans/pilots/pilot_heavy_roog_f.mdl"]			= "pilot_heavy_female", 

	// infantry pilot model
	[$"models/humans/grunts/mlt_grunt_lmg.mdl"]					= "pilot_medium_male", 
	[$"models/humans/grunts/imc_grunt_lmg.mdl"]					= "pilot_grapple_male",
	[$"models/humans/grunts/mlt_grunt_smg.mdl"]					= "pilot_medium_male", 
	[$"models/humans/grunts/imc_grunt_smg.mdl"]					= "pilot_grapple_male", 
	[$"models/humans/grunts/mlt_grunt_shotgun.mdl"]				= "pilot_medium_male", 
	[$"models/humans/grunts/imc_grunt_shotgun.mdl"]				= "pilot_grapple_male", 
	[$"models/humans/grunts/mlt_grunt_rifle.mdl"]				= "pilot_medium_male", 
	[$"models/humans/grunts/imc_grunt_rifle.mdl"]				= "pilot_grapple_male", 
	[$"models/humans/grunts/imc_grunt_shield_captain.mdl"]		= "pilot_heavy_male", 
	[$"models/robots/spectre/imc_spectre.mdl"]					= "pilot_nomad_male",

	// faction leader pilot model
	[$"models/Humans/heroes/imc_hero_ash.mdl"]					= "pilot_nomad_female", 
	[$"models/Humans/heroes/imc_hero_blisk.mdl"]				= "pilot_medium_male", 
	[$"models/humans/heroes/mlt_hero_jack.mdl"]					= "pilot_grapple_male", 
	[$"models/humans/heroes/mlt_hero_sarah.mdl"]				= "pilot_grapple_female", 
	[$"models/humans/pilots/sp_medium_geist_f.mdl"]				= "pilot_grapple_female", 
	[$"models/humans/pilots/sp_medium_reaper_m.mdl"]			= "pilot_medium_male", 
	[$"models/humans/pilots/sp_medium_stalker_m.mdl"]			= "pilot_stalker_male",
}

// this array listed all player models that supports camo
const array<asset> ALTPILOT_CAMO_MODELS = 
[
	$"models/humans/pilots/pilot_medium_stalker_m.mdl",
	$"models/humans/pilots/pilot_medium_stalker_f.mdl",
	$"models/humans/pilots/pilot_medium_geist_m.mdl",
	$"models/humans/pilots/pilot_medium_geist_f.mdl",
	$"models/humans/pilots/pilot_medium_reaper_m.mdl",
	$"models/humans/pilots/pilot_medium_reaper_f.mdl",
	$"models/humans/pilots/pilot_light_ged_m.mdl",
	$"models/humans/pilots/pilot_light_ged_f.mdl",
	$"models/humans/pilots/pilot_light_jester_m.mdl",
	$"models/humans/pilots/pilot_light_jester_f.mdl",
	$"models/humans/pilots/pilot_heavy_drex_m.mdl",
	$"models/humans/pilots/pilot_heavy_drex_f.mdl",
	$"models/humans/pilots/pilot_heavy_roog_m.mdl",
	$"models/humans/pilots/pilot_heavy_roog_f.mdl",
]

// valid models for randomizer to pick
const array<asset> ALTPILOT_RANDOMIZER_MODELS = 
[
	// vanilla pilot model
	$"models/humans/pilots/pilot_medium_stalker_m.mdl",
	$"models/humans/pilots/pilot_medium_stalker_f.mdl",
	$"models/humans/pilots/pilot_medium_geist_m.mdl",
	$"models/humans/pilots/pilot_medium_geist_f.mdl",
	$"models/humans/pilots/pilot_medium_reaper_m.mdl",
	$"models/humans/pilots/pilot_medium_reaper_f.mdl",
	$"models/humans/pilots/pilot_light_ged_m.mdl",
	$"models/humans/pilots/pilot_light_ged_f.mdl",
	$"models/humans/pilots/pilot_light_jester_m.mdl",
	$"models/humans/pilots/pilot_light_jester_f.mdl",
	$"models/humans/pilots/pilot_heavy_drex_m.mdl",
	$"models/humans/pilots/pilot_heavy_drex_f.mdl",
	$"models/humans/pilots/pilot_heavy_roog_m.mdl",
	$"models/humans/pilots/pilot_heavy_roog_f.mdl",

	// infantry pilot model
	$"models/humans/grunts/imc_grunt_shield_captain.mdl",
	$"models/robots/spectre/imc_spectre.mdl",

	// faction leader pilot model
	$"models/Humans/heroes/imc_hero_ash.mdl",
	$"models/Humans/heroes/imc_hero_blisk.mdl",
	$"models/humans/heroes/mlt_hero_jack.mdl",
	$"models/humans/heroes/mlt_hero_sarah.mdl",
	$"models/humans/pilots/sp_medium_geist_f.mdl",
	$"models/humans/pilots/sp_medium_reaper_m.mdl",
	$"models/humans/pilots/sp_medium_stalker_m.mdl",
]

// grunt has various models, use weight for controlling
const int RANDOMIZER_GRUNT_MODEL_WEIGHT = 2 // there're two kinds of team based models for grunts, we add 2 weight for them
const array<asset> ALTPILOT_GRUNT_MODELS =
[
	$"models/humans/grunts/mlt_grunt_lmg.mdl",
	$"models/humans/grunts/imc_grunt_lmg.mdl",
	$"models/humans/grunts/mlt_grunt_smg.mdl",
	$"models/humans/grunts/imc_grunt_smg.mdl",
	$"models/humans/grunts/mlt_grunt_shotgun.mdl",
	$"models/humans/grunts/imc_grunt_shotgun.mdl",
	$"models/humans/grunts/mlt_grunt_rifle.mdl",
	$"models/humans/grunts/imc_grunt_rifle.mdl",
]

// some models have special skin and stuffs... don't want to use them, listed here
const array<asset> ALTPILOT_SKIN_DISABLED_MODELS =
[
	// have ghost camo which makes them less likely can be seen...
	$"models/humans/heroes/mlt_hero_jack.mdl",
	$"models/humans/heroes/mlt_hero_sarah.mdl",

	$"models/humans/pilots/sp_medium_reaper_m.mdl", // has a FD only skin; replaces "64" on helmet with new faction logo
]

// now using playerSettings to check, saving model names here

// Holopilot Male
//$"models/humans/pilots/pilot_medium_stalker_m.mdl"
// Holopilot Female
//$"models/humans/pilots/pilot_medium_stalker_f.mdl"

// Shifter Male
//$"models/humans/pilots/pilot_light_ged_m.mdl"
// Shifter Female
//$"models/humans/pilots/pilot_light_ged_f.mdl"

// Stim Male
//$"models/humans/pilots/pilot_light_jester_m.mdl"
// Stim Female
//$"models/humans/pilots/pilot_light_jester_f.mdl"

// PulseBlade Male
//$"models/humans/pilots/pilot_medium_reaper_m.mdl"
// PulseBlade Female
//$"models/humans/pilots/pilot_medium_reaper_f.mdl"

// Grapple Male
//$"models/humans/pilots/pilot_medium_geist_m.mdl"
// Grapple Female
//$"models/humans/pilots/pilot_medium_geist_f.mdl"

// Cloak Male
//$"models/humans/pilots/pilot_heavy_drex_m.mdl"
// Cloak Female
//$"models/humans/pilots/pilot_heavy_drex_f.mdl"

// A-Wall Male
//$"models/humans/pilots/pilot_heavy_roog_m.mdl"
// A-Wall Female
//$"models/humans/pilots/pilot_heavy_roog_f.mdl

struct
{
	// no need to change table contents
	// in-file variables
	table<entity, bool> playerPickedModelChangeChance
	table<entity, bool> playerThisLifeChangeModel // for we can have more stable model changes
	table<entity, bool> playerHasChangedModel

	// settings variables
	bool modelReplaceEnabled = false
	float modelReplaceChance = 0.25 // 25% by default
	bool replacePlayerSettings = false
	bool allRandomModel = false
	bool removePlayerCamo = false
	
	// settings override
	table<string, string> playerSettingsOverrides
	table<asset, asset> playerModelOverrides
} file

void function AltPilot_Enable_Init()
{
	file.modelReplaceEnabled = true
}

void function AltPilot_Init() 
{
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )
	
	// stop any thread processing
	RegisterSignal( "AltPilotModelReplace" )
	RegisterSignal( "BadSkinPrevention" )

	//AddCallback_OnPlayerRespawned( RespawnModelSet ) // really doesn't seem needed, change loadout can handle it, this might mess up some models
	AddCallback_OnClientConnected( InitializeAltPilot )
	AddDeathCallback( "player", CleanUpModelChance )
	AddCallback_OnPlayerGetsNewPilotLoadout( ChangeloadoutModelSet )
	AddCallback_OnTitanBecomesPilot( DisembarkingModelSet )
}

void function InitializeAltPilot( entity player )
{
	file.playerPickedModelChangeChance[ player ] <- false
	file.playerThisLifeChangeModel[ player ] <- false
	file.playerHasChangedModel[ player ] <- false
}

void function AltPilot_SetShouldReplaceModel( bool should )
{
	file.modelReplaceEnabled = should
}

void function AltPilot_SetModelReplaceChance( float percentage )
{
	file.modelReplaceChance = percentage
}

void function AltPilot_SetShouldReplacePlayerSettings( bool should )
{
	file.replacePlayerSettings = should
}

void function AltPilot_SetPlayerModelAllRandom( bool random )
{
	file.allRandomModel = random
	// defined in forced_bodytype.gnut. bind together to fix death effect
	// well maybe no need, we could enable this in modifier/gamemodes we want
	//SetPlayerBodyTypeDependOnSurfaceProp( random )
}

void function AltPilot_SetShouldRemovePlayerCamo( bool should )
{
	file.removePlayerCamo = should
}

void function AltPilot_SetPlayerSettingsOverride( string original, string replacement )
{
	if ( !( original in file.playerSettingsOverrides ) )
		file.playerSettingsOverrides[ original ] <- replacement
	else
		file.playerSettingsOverrides[ original ] = replacement
}

void function AltPilot_SetPlayerModelOverride( asset original, asset replacement )
{
	if ( !( original in file.playerModelOverrides ) )
		file.playerModelOverrides[ original ] <- replacement
	else
		file.playerModelOverrides[ original ] = replacement
}

void function AltPilot_RemovePlayerSettingsOverride( string original )
{
	if ( original in file.playerSettingsOverrides )
		delete file.playerSettingsOverrides[ original ]
}

void function AltPilot_RemovePlayerModelOverride( asset original )
{
	if ( original in file.playerModelOverrides )
		delete file.playerModelOverrides[ original ]
}

/* // really doesn't seem needed, change loadout can handle it, this might mess up some models
void function RespawnModelSet( entity player )
{
	// try to do recovering
	RecoverFromModelChange( player )

	// do model overrides
	AltPilot_ApplyOverridesToPlayer( player )
	
	// apply random/replacement models
	if( file.allRandomModel )
		AltPilot_GivePlayerRandomModel( player )
	else if( file.modelReplaceEnabled )
	{
		if ( RandomInt( file.modelReplaceChance ) == 0 )
			AltPilot_ReplacePilotModel( player )
	}
}
*/

void function CleanUpModelChance( entity victim, var damageInfo )
{
	if ( victim in file.playerPickedModelChangeChance )
		file.playerPickedModelChangeChance[ victim ] = false
}

// changeLoadout to same tactical doesn't reset model
// maybe reset it could be funnier, but always trigger ghost skin
void function ChangeloadoutModelSet( entity player , PilotLoadoutDef p )
{
	player.Signal( "AltPilotModelReplace" ) // marking that we're attempting model replace

	// pick modelchange chance. this is called earlier than "OnPlayerRespawned()", we cannot get from it
	//print( "file.playerPickedModelChangeChance[ player ]: " + string( file.playerPickedModelChangeChance[ player ] ) )
	if ( !file.playerPickedModelChangeChance[ player ] )
	{
		file.playerThisLifeChangeModel[ player ] = false
		if ( file.modelReplaceEnabled )
			file.playerThisLifeChangeModel[ player ] = RandomInt( int( 1.0 / file.modelReplaceChance ) ) == 0
		file.playerPickedModelChangeChance[ player ] = true
	}

	//print( "file.playerHasChangedModel[ player ]: " + string( file.playerHasChangedModel[ player ] ) )
	//print( "file.playerThisLifeChangeModel[ player ]: " + string( file.playerThisLifeChangeModel[ player ] ) )

	// try to do recovering
	if ( file.playerHasChangedModel[ player ] )
	{
		RecoverFromModelChange( player )
		file.playerHasChangedModel[ player ] = false
	}

	// do model overrides
	AltPilot_ApplyOverridesToPlayer( player )

	// apply random/replacement models
	if( file.allRandomModel )
		AltPilot_GivePlayerRandomModel( player )
	else if( file.modelReplaceEnabled )
	{
		if ( file.playerThisLifeChangeModel[ player ] )
			AltPilot_ReplacePilotModel( player )
	}

	thread BadSkinPrevention( player ) // always loop this
}

void function AltPilot_ApplyOverridesToPlayer( entity player )
{
	int skin = player.GetSkin()
	int camo = player.GetCamo()

	bool hasOverride = false
	string playerSettings = player.GetPlayerSettings()
	asset playerModel = player.GetModelName()
	
	if ( playerSettings in file.playerSettingsOverrides ) // player settings override priors
	{
		hasOverride = true
		string replacementSettings = file.playerSettingsOverrides[ playerSettings ]
		array<string> settingMods = player.GetPlayerSettingsMods()
		player.SetPlayerSettingsWithMods( replacementSettings, settingMods )
	}
	else if ( playerModel in file.playerModelOverrides ) // model name override comes later
	{
		hasOverride = true
		asset replacementModel = file.playerModelOverrides[ playerModel ]
		player.SetValueForModelKey( replacementModel )
		player.SetModel( replacementModel )
	}

	// if we do override player model or settings, give skin and camo back, mark as model changed so we recover on player respawn
	if ( hasOverride )
	{
		player.SetSkin( skin )
		player.SetCamo( camo )
		file.playerHasChangedModel[ player ] = true // mark as player changed model
	}
}

void function DisembarkingModelSet( entity player, entity titan )
{
	player.Signal( "AltPilotModelReplace" ) // marking that we're attempting model replace
	thread DisembarkingModelSet_Threaded( player, titan )
}

void function DisembarkingModelSet_Threaded( entity player, entity titan )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "AltPilotModelReplace" )

	WaitEndFrame() // wait for player actually been set to animating state
	if ( player.Anim_IsActive() )
		WaitSignal( player, "OnAnimationDone", "OnAnimationInterrupted" ) // wait for player finish disembarking anim

	asset startingModel = player.GetModelName()
	// do model overrides
	AltPilot_ApplyOverridesToPlayer( player )

	// apply random/replacement models
	if( file.allRandomModel )
		AltPilot_GivePlayerRandomModel( player )
	else if( file.modelReplaceEnabled )
	{
		if ( file.playerThisLifeChangeModel[ player ] )
			AltPilot_ReplacePilotModel( player )
	}

	thread BadSkinPrevention( player ) // always loop this
	// HACK for handling nessy costume: if we're gonna change model, it's never good to have original costume
	if ( Nessie_ShouldSpawnCostumeForPlayers() && startingModel != player.GetModelName() )
		SpawnNessyCostume( player )
}

//Apply Model
void function AltPilot_ReplacePilotModel( entity player )
{
	if ( !IsValid( player ) ) //Anti Crash
		return

	string playerSettings = player.GetPlayerSettings()
	array<asset> replacementModels

	switch ( playerSettings )
	{
		case "pilot_stalker_male": // Holopilot Male
		case "pilot_stalker_female": // Holopilot Female
			// choose from grunt models
			replacementModels.append( $"models/humans/grunts/mlt_grunt_lmg.mdl" )
			replacementModels.append( $"models/humans/grunts/imc_grunt_lmg.mdl" )
			replacementModels.append( $"models/humans/grunts/mlt_grunt_smg.mdl" )
			replacementModels.append( $"models/humans/grunts/imc_grunt_smg.mdl" )
			replacementModels.append( $"models/humans/grunts/mlt_grunt_rifle.mdl" )
			replacementModels.append( $"models/humans/grunts/imc_grunt_rifle.mdl" )
			replacementModels.append( $"models/humans/grunts/mlt_grunt_shotgun.mdl" )
			replacementModels.append( $"models/humans/grunts/imc_grunt_shotgun.mdl" )
			break
		
		case "pilot_light_male": // Shifter Male
		case "pilot_light_female": // Shifter Female
			// choose from robotic models
			replacementModels.append( $"models/robots/spectre/imc_spectre.mdl" )
			replacementModels.append( $"models/Humans/heroes/imc_hero_ash.mdl" )
			break
		
		case "pilot_nomad_male": // Stim Male
		case "pilot_nomad_female": // Stim Female
			// choose from MLT faction leaders. sometimes shows holo skin, tried to fix it with BadSkinPrevention()
			replacementModels.append( $"models/humans/heroes/mlt_hero_jack.mdl" )
			replacementModels.append( $"models/humans/heroes/mlt_hero_sarah.mdl" )
			break
		
		case "pilot_medium_male": // PulseBlade Male
		case "pilot_medium_female": // PulseBlade Female
			replacementModels.append( $"models/Humans/heroes/imc_hero_blisk.mdl" )
			replacementModels.append( $"models/humans/pilots/sp_medium_geist_f.mdl" )
			break
		
		case "pilot_grapple_male": // Grapple Male
		case "pilot_grapple_female": // Grapple Female
			replacementModels.append( $"models/humans/pilots/sp_medium_reaper_m.mdl" )
			replacementModels.append( $"models/humans/pilots/sp_medium_stalker_m.mdl" )
			break
		
		case "pilot_heavy_male": // A-Wall Male
		case "pilot_heavy_female": // A-Wall Female
			replacementModels.append( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )
			break
	}
	
	if ( replacementModels.len() > 0 )
	{
		asset replacementModel = replacementModels[ RandomInt( replacementModels.len() ) ]
		AltPilot_ChangePlayerModel( player, replacementModel )
	}
}

void function AltPilot_ChangePlayerModel( entity player, asset replacementModel )
{
	int skin = player.GetSkin()
	int camo = player.GetCamo()

	// update player settings
	if ( file.replacePlayerSettings )
	{
		if ( replacementModel in ALTPILOT_ALL_MODELS )
		{
			string playerSettings = ALTPILOT_ALL_MODELS[ replacementModel ]
			array<string> settingMods = player.GetPlayerSettingsMods()
			player.SetPlayerSettingsWithMods( playerSettings, settingMods )
		}
	}
	// update model
	player.SetValueForModelKey( replacementModel )
	player.SetModel( replacementModel )
	file.playerHasChangedModel[ player ] = true // mark as player changed model

	if ( !file.removePlayerCamo || ALTPILOT_CAMO_MODELS.contains( replacementModel ) )
	{
		player.SetSkin( skin )
		player.SetCamo( camo )
	}
}

// HACK for sometimes going from spectre will hide model
void function RecoverFromModelChange( entity player )
{
	int skin = player.GetSkin()
	int camo = player.GetCamo()

	// fix visibility
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE 
	player.Show()

	// reset model
	player.SetValueForModelKey( $"models/humans/pilots/pilot_medium_reaper_m.mdl" )
	player.SetModel( $"models/humans/pilots/pilot_medium_reaper_m.mdl" )
	
	// recover player model
	asset model = GetPlayerSettingsAssetForClassName( player.GetPlayerSettings(), "bodymodel" )
	player.SetValueForModelKey( model )
	player.SetModel( model )

	player.SetSkin( skin )
	player.SetCamo( camo )
}

void function BadSkinPrevention( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "BadSkinPrevention" )
	player.EndSignal( "BadSkinPrevention" )
	player.EndSignal( "AltPilotModelReplace" )
	
	while( true )
	{
		// now we remove camo and skin for all our listed models
		/*
		// prevent jack and sarah being like ghost material
		if( player.GetModelName() == $"models/humans/heroes/mlt_hero_jack.mdl" || 
			player.GetModelName() == $"models/humans/heroes/mlt_hero_sarah.mdl" )
		*/
		if ( ALTPILOT_SKIN_DISABLED_MODELS.contains( player.GetModelName() ) )
		{
			// this causes player unable to use first person camo, but whatever
			player.SetSkin(0)
			player.SetCamo(0)
		}
		if( player.IsTitan() )
			return // player has embarked
		WaitFrame()
	}
}

void function AltPilot_GivePlayerRandomModel( entity player )
{
	int totalWeight = ALTPILOT_RANDOMIZER_MODELS.len() + RANDOMIZER_GRUNT_MODEL_WEIGHT
	bool useGruntModel = RandomInt( totalWeight ) < RANDOMIZER_GRUNT_MODEL_WEIGHT
	asset model = $""
	if ( useGruntModel )
		model = ALTPILOT_GRUNT_MODELS[ RandomInt( ALTPILOT_GRUNT_MODELS.len() ) ]
	else
		model = ALTPILOT_RANDOMIZER_MODELS[ RandomInt( ALTPILOT_RANDOMIZER_MODELS.len() ) ]

	if ( model != $"" )
		AltPilot_ChangePlayerModel( player, model )
}

array<asset> function AltPilot_GetAllValidPlayerModels()
{
	array<asset> validModels
	foreach ( asset modelName, string playerSettings in ALTPILOT_ALL_MODELS )
		validModels.append( modelName )

	return validModels
}