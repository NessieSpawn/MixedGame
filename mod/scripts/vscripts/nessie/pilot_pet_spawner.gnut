global function Pilot_Pet_Spawner_Init

global function PilotPet_SetShouldCleanUpPetOnDeath
global function PlayerThrowsPetBall

global function CreateRandomPet

struct
{
	// controller variables
	bool cleanUpPetOnDeath = true

	table< entity, bool > playerHasPetTable
} file

void function Pilot_Pet_Spawner_Init()
{
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnClientConnected( OnClientConneted )
	// ingame script
	if( GetGameState() >= eGameState.Prematch )
    {
        foreach( entity player in GetPlayerArray() )
            OnClientConneted( player )
    }
}

void function OnPlayerRespawned( entity player )
{
	PlayerThrowsPetBall( player )
}

void function OnClientConneted( entity player )
{
	file.playerHasPetTable[player] <- false
	//AddButtonPressedPlayerInputCallback( player, IN_USE, PlayerThrowsPetBall )
}

void function PilotPet_SetShouldCleanUpPetOnDeath( bool should )
{
	file.cleanUpPetOnDeath = should
}

void function PlayerThrowsPetBall( entity player )
{
	entity ball = CreateEntity( "prop_physics" )
	//entity ball = Entities_CreateProjectileByClassname( "grenade", "mp_weapon_grenade_emp" )
	ball.SetValueForModelKey( $"models/weapons/bullets/triple_threat_projectile.mdl" )
	ball.SetModel( $"models/weapons/bullets/triple_threat_projectile.mdl" )
	ball.SetOrigin( player.EyePosition() + player.GetViewVector() * 100 + < 0,0,40 > ) // don't spawn so close, or it will interrupt zipline
	//ball.SetAngles( < 0, player.EyeAngles().y - 90, 0 > )
	DispatchSpawn( ball )
	ball.kv.CollisionGroup = TRACE_COLLISION_GROUP_DEBRIS
	entity effectHandle = StartParticleEffectOnEntity_ReturnEntity( ball, GetParticleSystemIndex( $"wpn_grenade_frag_blue" ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
	ball.SetVelocity( player.GetVelocity() + player.GetViewVector() * 500 )
	
	//thread TrackParticleEffect( ball, effectHandle )
	thread BallBecomesPet( player, ball )
	
}

void function BallBecomesPet( entity player, entity ball )
{
	ball.EndSignal( "OnDestroy" )
	wait RandomFloatRange( 1.2, 1.8 )
	
	vector origin = ball.GetOrigin()
	vector angles = < 0, player.EyeAngles().y, 0 >
	int team = player.GetTeam()
	
	//"npc_marvin"
	//"npc_spectre"
	entity pet = CreateRandomPet( player, origin, angles )
		
	ball.Destroy()
}

entity function CreateRandomPet( entity owner, vector origin, vector angles )
{
	switch( RandomInt( 3 ) ) // this must up on date!
	{
		case 0:
			return CreateNessieTick( owner, origin, angles )
		case 1:
			return CreateNessieDrone( owner, origin, angles )
		case 2:
			return CreatePetMarvin( owner, origin, angles )
	}
}

void function TrackPetLifeTime( entity owner, entity pet )
{
	if( file.cleanUpPetOnDeath )
		owner.EndSignal( "OnDeath" )
	owner.EndSignal( "OnDestroy" )
	pet.EndSignal( "OnDeath" )
	pet.EndSignal( "OnDestroy" )
	
	OnThreadEnd(
		function():( pet )
		{
			if( IsValid( pet ) )
			{
				PlayFX( $"P_plasma_exp_SM", pet.GetOrigin(), < 0,pet.GetAngles().y,0 > )
				EmitSoundAtPosition( TEAM_UNASSIGNED, pet.GetOrigin(), "Explo_TripleThreat_Impact_3P" )
				pet.Destroy()
			}
		}
	)
	
	WaitForever()
}

entity function CreateNessieTick( entity owner, vector origin, vector angles )
{
	entity pet = CreateNPC( "npc_frag_drone", owner.GetTeam(), origin, angles )
	SuicideSpectre_SetNotExploding( pet ) // modified function in _ai_suicide_spectres.gnut for adding pet ticks
	
	pet.EnableNPCFlag( NPC_IGNORE_ALL )
	pet.kv.modelscale = 0.01
	pet.Hide()
	pet.SetInvulnerable()
	pet.kv.CollisionGroup = TRACE_COLLISION_GROUP_DEBRIS // no collision with player but still blocks bullet trace
	HideName( pet )
	NPCFollowsPlayer( pet, owner )
	Highlight_ClearOwnedHighlight( pet )
	thread TrackPetLifeTime( owner, pet )
	
	DispatchSpawn( pet )

	entity nessie = CreateEntity( "prop_dynamic" )
	nessie.SetValueForModelKey( $"models/domestic/nessy_doll.mdl" )
	DispatchSpawn( nessie )
	nessie.SetParent( pet, "CHESTFOCUS" )
	nessie.SetAngles( < 0, -90, 0 > )
	thread TrackNessieLifeTime( pet, nessie )
	
	return pet
}

entity function CreateNessieDrone( entity owner, vector origin, vector angles )
{
	entity pet = CreateNPC( "npc_drone", owner.GetTeam(), origin, angles )
	//TakeAllWeapons( pet )
	thread DisableDroneSound( pet )
	
	pet.EnableNPCFlag( NPC_IGNORE_ALL )
	pet.kv.modelscale = 0.01
	pet.Hide()
	pet.SetInvulnerable()
	pet.kv.CollisionGroup = TRACE_COLLISION_GROUP_DEBRIS // no collision with player but still blocks bullet trace
	HideName( pet )
	NPCFollowsPlayer( pet, owner )
	Highlight_ClearOwnedHighlight( pet )
	thread TrackPetLifeTime( owner, pet )
	
	DispatchSpawn( pet )

	entity nessie = CreateEntity( "prop_dynamic" )
	nessie.SetValueForModelKey( $"models/domestic/nessy_doll.mdl" )
	DispatchSpawn( nessie )
	nessie.SetParent( pet, "CHESTFOCUS" )
	nessie.SetAngles( < 0, -90, 0 > )
	thread TrackNessieLifeTime( pet, nessie )
	
	return pet
}

void function DisableDroneSound( entity drone ) // annoying sound!
{
	drone.EndSignal( "OnDestroy" )
	
	WaitFrame()
	StopSoundOnEntity( drone, "Drone_Mvmt_Hover_Hero" )
	StopSoundOnEntity( drone, "Drone_Mvmt_Hover" )
}

void function TrackNessieLifeTime( entity pet, entity nessie )
{
	pet.EndSignal( "OnDestroy" )
	nessie.EndSignal( "OnDestroy" )
	
	OnThreadEnd(
		function():( nessie )
		{
			if( IsValid( nessie ) )
				nessie.Destroy()
		}
	)
	
	WaitForever()
}

entity function CreatePetMarvin( entity owner, vector origin, vector angles )
{
	entity pet = CreateNPC( "npc_marvin", owner.GetTeam(), origin, angles )
	
	pet.EnableNPCFlag( NPC_IGNORE_ALL )
	pet.kv.modelscale = 0.5
	pet.SetInvulnerable()
	pet.kv.CollisionGroup = TRACE_COLLISION_GROUP_DEBRIS
	HideName( pet )
	NPCFollowsPlayer( pet, owner )
	Highlight_ClearOwnedHighlight( pet )
	thread TrackPetLifeTime( owner, pet )
	
	DispatchSpawn( pet )
	
	return pet
}

// test lol
void function TrackParticleEffect( entity ball, entity effectHandle )
{
	effectHandle.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function():( effectHandle )
		{
			if( !IsValid( effectHandle ) )
				print( "effectHandle Destroyed!" )
		}
	)
	ball.WaitSignal( "OnDestroy" )
	print( "Ball Destroyed!" )
	WaitForever()
}