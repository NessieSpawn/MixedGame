#if SERVER
untyped
#endif

global function Death_Package_Init
global function PrintDamageFlags
global function GetDescStringForDamageFlags

#if SERVER
	table bodyGroupSkeletons

	global function InitDamageStates
	global function HandleDeathPackage
	global function TransferDamageStates
	global function UpdateDamageState

	global function GetTagsForBodyGroup
	global function IsBodyGroupBroken
	global function GetStateCountForBodyGroup

	global function GibTitan // this function has been modified and no longer necessary to pass a damageInfo inside
	// modified function
	global function TitanHasBeenGibbed // get this titan is gibbbed or not by checking it's "torso" bodygroup

	global function DoomTitan
	global function UndoomTitan_Body

	global function GetNumBrokenLimbs
	global function TryHeadshotDeathFX

	global function PlayTitanDeathFx
	global function PlayTitanDeathFxUp
	// modified function: splite groundwash into function
	global function PlayTitanDeathGroundWashFx
	// here's a modified function: in case we want to add titan explode effect for ragdolled titans
	global function PlayTitanDeathFx_Ragdoll
	global function PlayTitanDeathFxUp_Ragdoll

	// modified to globalize!
	global function ShouldDoHumanSizedGibs
	global function HumanSizedGibDeath // function has been modified: can pass a null damageInfo inside, in that case gib velocity will use player's velocity
	// modified function, respawn messed up flesh target gibbed sound
	global function HumanSizedGibSound

	// modified!!! death package settings
	global function DeathPackage_SetDisabledForEntity
	global function DeathPackage_IsDisabledForEntity
	// modified!! headshotFX override
	global function DeathPackage_SetEntityHeadshotFXOverride
	global function DeathPackage_RemoveEntityHeadshotFXOverride

	// modified!! titan death effect setting
	// vanilla always gib titan on their death
	// we add a setting that only gib the titan when they're killed by DF_GIB
	global function DeathPackage_TitanAlwaysGibOnDeath
	// modified settings: in case we want to add titan explode effect for ragdolled titans
	global function DeathPackage_EnableTitanDeathFxOnRagdoll
	global function DeathPackage_IsTitanRagdollDeathFxEnabled // to be shared with _anim.gnut, for fixing effects
#endif

const NPC_GRUNT_DEATH = "npc_grunt_death"
const TITAN_GRUNT_SQUISH = "titan_grunt_squish"
const TITAN_SPECTRE_SQUISH = "titan_spectre_squish"
const TURRET_DEATH_FX = $"P_turret_exp_plasma"

int TITAN_EXPLOSION_EFFECT
const TITAN_EXPLOSION_GROUNDWASH_FX_TABLE = "titan_exp_ground"
const TITAN_EXPLOSION_GROUNDWASH_HEIGHT = 250

global const GRENADE_INDICATOR_ARROW_MODEL = $"models/hud/grenade_indicator/grenade_indicator_arrow.mdl"
global const GRENADE_INDICATOR_FRAG_MODEL = $"models/hud/grenade_indicator/grenade_indicator_frag.mdl"
global const GRENADE_INDICATOR_SONAR_MODEL = $"models/hud/grenade_indicator/grenade_indicator_sonar.mdl"
#if SP
global const GRENADE_INDICATOR_TICK_MODEL = $"models/hud/grenade_indicator/grenade_indicator_tick.mdl"
#else
global const GRENADE_INDICATOR_TICK_MODEL = $"models/hud/grenade_indicator/grenade_indicator_frag_sentry.mdl"
global const GRENADE_INDICATOR_STALKER_MODEL = $"models/hud/grenade_indicator/bang_indicator.mdl"
#endif
global const GRENADE_MODEL = $"models/weapons/grenades/m20_f_grenade.mdl"
global const DAMAGEARROW_MODEL = $"models/weapons/bullets/damage_arrow.mdl"

struct
{
	table hitDataCache
	table<string,bool> disallowDissolveList

	// modified in-file table settings
	table<entity, bool> entDisabledDeathPackage
	table<entity, asset> headshotFXOverride

	// modified setting
	bool titanAlwaysGibOnDeath = true // vanilla always gib titan on their death
	bool titanDeathFxOnRagdoll = true // this is modded behavior, not enabled by default. EDIT: enable by default could be cool?
} file

global enum damageTypes
{
	gibs 				= (DF_GIB)
	largeCaliberExp		= (DF_BULLET | DF_GIB | DF_EXPLOSION)
	gibBullet			= (DF_BULLET | DF_GIB)
	instant				= (DF_INSTANT)
	dissolve			= (DF_DISSOLVE)
	projectileImpact	= (DF_GIB)
	pinkMist 			= (DF_GIB) //If updated from DF_GIB, change the DF_GIB in Arc Cannon to match.
	ragdoll				= (DF_RAGDOLL)
	titanStepCrush		= (DF_TITAN_STEP)
	arcCannon			= (DF_DISSOLVE | DF_GIB | DF_ELECTRICAL )
	electric			= (DF_ELECTRICAL) //Only increases Vortex Shield decay for bullet weapons atm.
	explosive			= (DF_RAGDOLL | DF_EXPLOSION )
	bullet				= (DF_BULLET)
	largeCaliber		= (DF_BULLET | DF_KNOCK_BACK)
	shotgun				= (DF_BULLET | DF_GIB | DF_SHOTGUN )
	titanMelee			= (DF_MELEE | DF_RAGDOLL)
	titanBerserkerMelee	= (DF_MELEE | DF_RAGDOLL)
	titanEjectExplosion	= (DF_GIB | DF_EXPLOSION)
	dissolveForce		= (DF_DISSOLVE | DF_KNOCK_BACK | DF_EXPLOSION)
	rodeoBatteryRemoval	= (DF_RODEO | DF_EXPLOSION | DF_STOPS_TITAN_REGEN )
}

void function Death_Package_Init()
{
	// precaches for particles specified in "headshotFX" field of the aisettings and player set files
	PrecacheParticleSystem( $"P_headshot_human" )
	PrecacheParticleSystem( $"P_headshot_pilot" )
	PrecacheParticleSystem( $"P_headshot_pilot_robot" )
	PrecacheParticleSystem( $"xo_exp_death" )

	#if SERVER
		bodyGroupSkeletons = {}

		file.disallowDissolveList[ "npc_drone" ]			<- true
		file.disallowDissolveList[ "npc_gunship" ]			<- true
		file.disallowDissolveList[ "npc_spectre" ]			<- true
		file.disallowDissolveList[ "npc_stalker" ]			<- true
		file.disallowDissolveList[ "npc_turret_mega" ]		<- true
		file.disallowDissolveList[ "npc_turret_sentry" ] 	<- true
		file.disallowDissolveList[ "npc_dropship" ] 		<- true

		TITAN_EXPLOSION_EFFECT = GetParticleSystemIndex( $"xo_exp_death" )
		PrecacheImpactEffectTable( TITAN_EXPLOSION_GROUNDWASH_FX_TABLE )
		PrecacheEffect( $"P_wpn_dumbfire_burst_trail" )
		PrecacheEffect( $"P_exp_spectre_death" )
		PrecacheEffect( $"xo_exp_death" )

		if ( SentryTurretsExplodeOnDeath() )
			PrecacheEffect( TURRET_DEATH_FX )

		PrecacheModel( $"models/gibs/human_gibs.mdl" )

		PrecacheModel( GRENADE_INDICATOR_ARROW_MODEL )
		PrecacheModel( GRENADE_INDICATOR_FRAG_MODEL )
		PrecacheModel( GRENADE_INDICATOR_SONAR_MODEL )
		PrecacheModel( GRENADE_INDICATOR_TICK_MODEL )

		#if MP
		PrecacheModel( GRENADE_INDICATOR_STALKER_MODEL )
		#endif

		PrecacheModel( DAMAGEARROW_MODEL )

		PrecacheModel( $"models/weapons/bullets/mgl_grenade.mdl" )
		PrecacheModel( GRENADE_MODEL )

		// extra check for modified death cam!!!!
		RegisterSignal( "EnsureDissolveEffectIsCleared" )
		// modified signals to cancel out DelayedBodyGroupBreak()
		RegisterSignal( "TitanGibbed" )
		RegisterSignal( "TitanDoomedInstant" )

		// modified callback
		// remove modified mark on player respawn
		AddCallback_OnPlayerRespawned( DeathPackage_OnPlayerRespawned )
	#endif
}

// modified callback
#if SERVER
void function DeathPackage_OnPlayerRespawned( entity player )
{
	// remove modified mark on player respawn
	if ( "didDeathSound" in player.s )
		delete player.s.didDeathSound
}
#endif
//

#if SERVER
function InitDamageStates( ent )
{
	expect entity( ent )
	asset modelName = ent.GetModelName()
	if ( !(modelName in file.hitDataCache) )
	{
		local hitData = {}
		file.hitDataCache[modelName] <- hitData

		local entKVs = ent.CreateTableFromModelKeyValues()

		hitData.hasHitData <- ("hit_data" in entKVs)
		hitData.entKVs <- entKVs
		hitData.damageStateInfo <- {}
		hitData.skeletonData <- {}

		if ( !hitData.hasHitData )
			return

		if ( !(ent.GetModelName() in bodyGroupSkeletons) )
		{
			// build a graph of bodygroup connections to calculate radial damage states
			local skeletonData = {}

			foreach ( bodyGroupName, bodyGroupData in entKVs.hit_data )
			{
				skeletonData[bodyGroupName] <- { siblings = [] }
			}

			foreach ( bodyGroupName, bodyGroupData in entKVs.hit_data )
			{
				if ( !("parent" in bodyGroupData ) )
					continue

				local parentName = bodyGroupData["parent"]

				skeletonData[bodyGroupName].siblings.append( parentName )
				skeletonData[parentName].siblings.append( bodyGroupName )
			}

			bodyGroupSkeletons[ ent.GetModelName() ] <- skeletonData
		}

		hitData.damageStateInfo <- {}
		foreach ( bodyGroupName, bodyGroupData in entKVs.hit_data )
		{
			hitData.damageStateInfo[bodyGroupName] <- 0
		}

		hitData.skeletonData <- bodyGroupSkeletons[ ent.GetModelName() ]
	}

	ent.s.hasHitData <- file.hitDataCache[modelName].hasHitData
	ent.s.entKVs <- clone file.hitDataCache[modelName].entKVs
	ent.s.damageStateInfo <- clone file.hitDataCache[modelName].damageStateInfo
	ent.s.skeletonData <- clone file.hitDataCache[modelName].skeletonData
}


void function TransferDamageStates( entity source, entity dest )
{
	// when you get in a titan from the other team, it wants to make your model match your team. grr.
	if ( source.GetModelName() != dest.GetModelName() )
		return

	//Assert( source.GetModelName() == dest.GetModelName(), "Model name mismatch: " + source.GetModelName() + " " + dest.GetModelName() )

	dest.SetFullBodygroup( source.GetFullBodygroup() )

	if ( !HasDamageStates( dest ) )
	{
		dest.s.damageStateInfo <- null
		dest.s.hasHitData <- null
		dest.s.skeletonData <- null
	}

	dest.s.hasHitData = source.s.hasHitData
	dest.s.damageStateInfo = source.s.damageStateInfo
	dest.s.skeletonData = source.s.skeletonData
}

// hardcoded. fx inside this array will follow the victim's attachment while playing
const array<asset> HEASHOT_FX_FOLLOW =
[
	$"P_headshot_pilot",
	$"P_headshot_pilot_robot",
]

bool function TryHeadshotDeathFX( entity victim )
{
	asset headshotFX

	headshotFX = victim.GetSettingsHeadshotFX()  // looks for "headshotFX" in an AI settings file or a player set file
	
	// modified!!! headshotFX override
	if ( victim in file.headshotFXOverride )
		headshotFX = file.headshotFXOverride[ victim ]
	//
	
	if ( headshotFX == $"" )
		return false

	// Swap the head bodygroup
	int bodyGroupIndex = victim.FindBodyGroup( "head" )
	if ( bodyGroupIndex == -1 )
		bodyGroupIndex = victim.FindBodyGroup( "removableHead" )

	if ( bodyGroupIndex > -1 )
	{
		//The last body group should be the head swap
		int stateIndex = victim.GetBodyGroupModelCount( bodyGroupIndex ) -1

		victim.SetBodygroup( bodyGroupIndex, stateIndex )

		//printt( "Victim: " + victim + " BodyGroup: " + bodyGroupIndex + " StateIndex: " +  stateIndex )
	}

	int tagID = victim.LookupAttachment( "HEADSHOT" )
	vector fxOrg = victim.GetAttachmentOrigin( tagID )
	vector fxAng = victim.GetAttachmentAngles( tagID )

	// Play FX
	// nessie: needs tweak on effect play method...
	// P_headshot_human are blood spray, but other two have smoke effect and needs to follow victim
	// now just hardcode it by "HEASHOT_FX_FOLLOW" array
	bool fxFollowVictim = HEASHOT_FX_FOLLOW.contains( headshotFX )
	//if ( victim.IsPlayer() )
	if ( fxFollowVictim )
	{
		//PlayFXOnEntity( headshotFX, victim, "HEADSHOT" )

		int team = victim.GetTeam()

		//Create friendly and enemy colored particle systems
		entity friendlyColoredFX = CreateEntity( "info_particle_system" )
		friendlyColoredFX.kv.start_active = 1
		friendlyColoredFX.SetValueForEffectNameKey( headshotFX )
		SetTeam( friendlyColoredFX, team )
		friendlyColoredFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
		SetTargetName( friendlyColoredFX, UniqueString() )
		friendlyColoredFX.kv.cpoint1 = svGlobal.fx_CP_color_friendly.GetTargetName()
		//friendlyColoredFX.SetOrigin( fxOrg )
		//friendlyColoredFX.SetOwner( victim )
		friendlyColoredFX.SetParent( victim, "HEADSHOT" )
		DispatchSpawn( friendlyColoredFX )
		thread DestroyAfterTime( friendlyColoredFX, 3.0 )

		entity enemyColoredFX = CreateEntity( "info_particle_system" )
		enemyColoredFX.kv.start_active = 1
		enemyColoredFX.SetValueForEffectNameKey( headshotFX )
		SetTeam( enemyColoredFX, team )
		enemyColoredFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY
		SetTargetName( enemyColoredFX, UniqueString() )
		enemyColoredFX.kv.cpoint1 = svGlobal.fx_CP_color_enemy.GetTargetName()
		//friendlyColoredFX.SetOrigin( fxOrg )
		//friendlyColoredFX.SetOwner( victim )
		enemyColoredFX.SetParent( victim, "HEADSHOT" )
		DispatchSpawn( enemyColoredFX )
		thread DestroyAfterTime( enemyColoredFX, 3.0 )
	}
	else
	{
		PlayFX( headshotFX, fxOrg, fxAng, null )
	}

	return true
}

void function DestroyAfterTime( entity ent, float time )
{
	Assert( IsNewThread(), "Must be threaded off" )

	ent.EndSignal( "OnDestroy" )

	wait( time )

	ent.Destroy()

}

void function HandleDeathPackage( entity ent, var damageInfo )
{
	if ( ent.IsMarkedForDeletion() )
		return

	// modified settings override
	if ( DeathPackage_IsDisabledForEntity( ent ) )
		return
	//

	// Code will disallow ragdoll in some cases, such on a player that is inside a dying titan.
	if ( !DamageInfo_IsRagdollAllowed( damageInfo ) )
		return

	// this is hardcoded. should be added as a callback!
	if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.round_end )
		return

	#if REVIVE_ENABLED == true
	if ( ent.IsPlayer() && ShouldRevivePlayer( ent, damageInfo ) )
	{
		thread DeathPackage_PlayerRevive( ent )
		return
	}
	#endif

	int dpFlags = DamageInfo_GetCustomDamageType( damageInfo )

	if ( ent.HasKey( "deathScriptFuncName" ) && ent.kv.deathScriptFuncName != "" )
	{
		var exceptions = ( dpFlags & DF_DISSOLVE ) && !( ent.GetClassName() in file.disallowDissolveList )
		exceptions = exceptions || ( dpFlags & DF_GIB && ent.HasGibModel() )

		if ( !exceptions )
			return
	}

	Assert( !ent.e.forceGibDeath || !ent.e.forceRagdollDeath, ent + " had both ent.e.forceRagdollDeath and ent.e.forceGibDeath. Pick one!" )

	bool forceRagdoll = ent.e.forceRagdollDeath
	//print( "forceRagdoll: " + string( forceRagdoll ) )

	if ( dpFlags & DF_MELEE )
	{
		entity attacker = DamageInfo_GetAttacker( damageInfo )
		DamageInfo_SetDeathPackage( damageInfo, "knockback" )
	}

	if ( SentryTurretsExplodeOnDeath() )
	{
		if ( IsTurret( ent ) )
		{
			if ( ent.GetClassName() == "npc_turret_sentry" )
			{
				PlayFX( TURRET_DEATH_FX, ent.GetOrigin(), ent.GetAngles() )
				if ( ent.Dev_GetAISettingByKeyField( "turret_explode_on_death" ) == 1 )
					ent.Destroy()

				return
			}
		}
	}

	// hardcoded for titans: adding "didDeathSound" mark, so we don't play sound multiple times( because modification of GibTitan() )
	//if ( !( "silentDeath" in ent.s ) )
	if ( !( "silentDeath" in ent.s ) && !( "didDeathSound" in ent.s ) )
	{
		PlayDeathSounds( ent, damageInfo )
		// modified mark setup
		ent.s.didDeathSound <- true
	}


	if ( dpFlags <= 0 && !forceRagdoll )
	{
		if ( ent.IsTitan() )
		{
			// titan explodes!
			PlayTitanDeathFx( ent )

			// modified settings
			//GibTitan( ent, damageInfo )
			if ( file.titanAlwaysGibOnDeath )
				GibTitan( ent, damageInfo )
		}

		return
	}

	if ( IsSuperSpectre( ent ) )
	{
		return	// handled in SuperSpectreDeath
	}

	if ( ( dpFlags & DF_HEADSHOT ) && IsHumanSized( ent ) && !ent.IsHologram() )
		TryHeadshotDeathFX( ent )

	if ( dpFlags & DF_INSTANT )
		DamageInfo_SetDeathPackage( damageInfo, "instant" )
	else if ( dpFlags & ( DF_KNOCK_BACK | DF_TITAN_STEP ) )
		DamageInfo_SetDeathPackage( damageInfo, "knockback" )

	if ( !forceRagdoll )
	{
		if ( ent.IsTitan() )
		{
			PlayTitanDeathFx( ent )

			// GibTitan( ent, damageInfo )
			// modified settings
			bool shouldGibTitan = file.titanAlwaysGibOnDeath
			if ( dpFlags & DF_GIB )
				shouldGibTitan = true
			if ( shouldGibTitan )
				GibTitan( ent, damageInfo )

			return
		}
		else
		{
			if ( dpFlags & DF_DISSOLVE && ( !(ent.GetClassName() in file.disallowDissolveList ) ) )
			{
				if ( dpFlags & DF_GIB && !ent.IsMechanical() )
				{
					ent.Dissolve( ENTITY_DISSOLVE_PINKMIST, Vector( 0, 0, 0 ), 500 )
				}
				else
				{
					ent.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
				}

				// check for modified death cam!!!! if player quickly respawning themselves after being dissolved, they'll be hide!
				if ( ent.IsPlayer() )
					thread EnsureDissolveEffectIsClearedForPlayer( ent )
			}
		}

		if ( ShouldDoHumanSizedGibs( ent, dpFlags ) )
		{
			HumanSizedGibDeath( ent, dpFlags, damageInfo )
			return
		}
	}

	if ( ((dpFlags & DF_RAGDOLL) && ent.GetArmorType() != ARMOR_TYPE_HEAVY) || forceRagdoll )
	{
		// modified condition: in case we want to add titan explode effect for ragdolled titans
		// don't do effect on gibbed titans
		//print( "TitanHasBeenGibbed( ent ): " + string( TitanHasBeenGibbed( ent ) ) )
		if ( file.titanDeathFxOnRagdoll && ent.IsTitan() && !TitanHasBeenGibbed( ent ) )
		{
			//print( "Doing death FX on titan ragdoll" )
			PlayTitanDeathFx_Ragdoll( ent )
			// reverted: this can blow up at attacker's face and doen't look very nice
			//PlayTitanDeathFxUp_Ragdoll( ent ) // non-rotation death fx works better for ragdoll cases
		}

		vector forceVec = DamageInfo_GetDamageForce( damageInfo )
		float forceMag = Length( forceVec )
		forceVec = Normalize( forceVec )
		const MAX_FORCE = 30000
		if ( forceMag > MAX_FORCE )
			forceMag = MAX_FORCE

		const bool SKIP_ANIMATION = true
		ent.BecomeRagdoll( forceVec * forceMag, SKIP_ANIMATION )

		return
	}
}

bool function ShouldDoHumanSizedGibs( entity ent, int dpFlags )
{
	if ( !IsHumanSized( ent ) )
		return false

	if ( !ent.HasGibModel() )
		return false

	bool doGibs = false
	if ( ent.e.forceGibDeath || ( dpFlags & DF_GIB ) )
	{
		doGibs = true
	}
	else if ( ( dpFlags & DF_SHOTGUN ) && ent.IsMechanical() && ent.IsNPC() )
	{
		if ( RandomInt( 2 ) == 1 )
			doGibs = true
	}

	return doGibs
}

// function has been modified: can pass a null damageInfo inside, in that case gib velocity will use player's velocity
// dpFlags is no where used
//void function HumanSizedGibDeath( entity ent, int dpFlags, var damageInfo )
void function HumanSizedGibDeath( entity ent, int dpFlags = -1, var damageInfo = null )
{
	// modified forceVec: default uses player's velocity, if passing an valid damageInfo, use damageForce instead
	//vector forceVec = DamageInfo_GetDamageForce( damageInfo )
	vector forceVec = ent.GetVelocity()
	if ( damageInfo != null )
		forceVec = DamageInfo_GetDamageForce( damageInfo )
	ent.Gib( forceVec )

	// modified
	// respawn messed up flesh target gibbed sound
	HumanSizedGibSound( ent )
}

void function HumanSizedGibSound( entity ent )
{
	// respawn messed up flesh target gibbed sound. they put no sound for flesh pilot, and make grunts use pain_death_sound
	bool isMechanical = ent.IsMechanical()
	bool silentDeath = "silentDeath" in ent.s
	bool pinkMistDeath = !isMechanical && ent.IsDissolving() // DF_DISSOLVE + DF_GIB = ENTITY_DISSOLVE_PINKMIST, no need to fix sound here
	bool useGruntDeathSound = PainDeathSounds_GetBodyTypeOverride( ent ) == eBodyTypes.NPC_GRUNT // modified in pain_death_sounds.gnut
	bool doFleshGibSound = !isMechanical && !pinkMistDeath && ( silentDeath || !useGruntDeathSound )
	//print( "isMechanical: " + string( isMechanical ) )
	//print( "silentDeath: " + string( silentDeath ) )
	//print( "pinkMistDeath: " + string( pinkMistDeath ) )
	//print( "useGruntDeathSound: " + string( useGruntDeathSound ) )
	//print( "doFleshGibSound: " + string( doFleshGibSound ) )
	if ( doFleshGibSound )
        EmitSoundAtPosition( TEAM_UNASSIGNED, ent.GetOrigin(), "death.pinkmist" )
}

// extra check for modified death cam!!!!
// dissolving will delay 2s to hide player, but player may respawn earlier than 2s, making them being hide after respawn!
void function EnsureDissolveEffectIsClearedForPlayer( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.Signal( "EnsureDissolveEffectIsCleared" )
	player.EndSignal( "EnsureDissolveEffectIsCleared" )

	float startTime = Time()
	wait 2.1 // 2s is required for the dissolving player being hide, we wait 0.1s more
	// we do this initial wait is for handling player being dissolved multiple times within 2s(may caused by modified deathCam)

	float endTime = Time() + 4.0 // update end time
	while ( player.kv.VisibilityFlags != "0" ) // dissolving will finally set player to ENTITY_VISIBLE_TO_NOBODY
	{
		//print( "waiting for player being hide" )
		if ( Time() > endTime ) // if we wait too long, just ignore
			return
	
		WaitFrame() 
	}

	// fuck respawn. even player.DissolveStop() can't stop player from being hide. have to call it before player.RespawnPlayer(), now featured in DecideRespawnPlayer()
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
	//print( "resetting player visibility! time elapsed: " + string( Time() - startTime ) )
}
//

// add some hardcoded checks: we shouldn't gib titan's legs and hip...
// buddy titan model have blank state for those bodygroups
const array<string> GIB_IGNORE_TITAN_BODYGROUPS =
[
	"left_leg",
	"right_leg",
	"hip",
]

// add some hardcoded checks: we should hide titan's "states" bodygroup
// that bodygroup exists for monarch, but isn't inited in hit_data keyvalues...
const table<string, int> GIB_FORCED_TITAN_BODYGROUPS =
{
	// hopefully this can work...
	// oh wait, we already got a Titan_MonarchCleanup() in _titan_health.gnut???
	// why it sometimes don't work at all?
	// now handled all in this file to prevent mess up "file.titanAlwaysGibOnDeath = false" cases
	["states"]		= 2,
}

// this function has been modified and no longer necessary to pass a damageInfo inside
//void function GibTitan( entity titan, var damageInfo )
void function GibTitan( entity titan, var damageInfo = null )
{
	if ( !HasHitData( titan ) )
		return

	// modified signal to cancel out DelayedBodyGroupBreak()
	titan.Signal( "TitanGibbed" )
	entity soul = titan.GetTitanSoul()
	if ( IsValid( soul ) )
		soul.Signal( "TitanGibbed" )

	if ( damageInfo != null )
		DamageInfo_SetDeathPackage( damageInfo, "instant" )

	local entKVs = titan.CreateTableFromModelKeyValues()
	local hitData = entKVs["hit_data"]

	foreach ( bodyGroupName, bodyGroupData in hitData )
	{
		// modified checks: we shouldn't gib titan's legs and hip
		if ( GIB_IGNORE_TITAN_BODYGROUPS.find( expect string( bodyGroupName ) ) != -1 )
			continue
		//

		if ( !("blank" in bodyGroupData) )
			continue

		local bodyGroupIndex = titan.FindBodyGroup( bodyGroupName )
		local stateCount = titan.GetBodyGroupModelCount( bodyGroupIndex )
		titan.SetBodygroup( bodyGroupIndex, stateCount - 1 )
	}

	// note: this sound is still played by server-side, PlayDeathSounds()
	// I want to do some misc fix here: do death sound on titan gib, so it will sound better for anim events
	// ( mostly for scorch and ronin prime executions, seems respawn forgot to handle details in dlc updates )

//	EmitSoundOnEntity( titan, "titan_death_explode" ) // moved to client side on bodygroup chang

	// modified fix version
	// "didDeathSound" is modified mark, so we don't play death sound multiple times for titan
	if ( !( "silentDeath" in titan.s ) && !( "didDeathSound" in titan.s ) )
	{
		// this function has been modified and no longer necessary to pass a damageInfo inside
		PlayDeathSounds( titan )
		// mark as "didDeathSound" so it won't play sound again in HandleDeathPackage()
		titan.s.didDeathSound <- true
	}

	// modified checks: we should always hide titan's upgrade states
	// in vanilla it's handled by _titan_health.gnut, seems respawn forgot how to handle entKVs in dlc updates
	// but that don't work well with "file.titanAlwaysGibOnDeath = false" cases, so change to handle all in this file
	foreach ( bodyGroupName, stateIndex in GIB_FORCED_TITAN_BODYGROUPS )
	{
		int bodyGroupIndex = titan.FindBodyGroup( bodyGroupName )
		if ( bodyGroupIndex > -1 ) // validation check
		{
			int stateCount = titan.GetBodyGroupModelCount( bodyGroupIndex )
			if ( stateCount - 1 >= stateIndex )
				titan.SetBodygroup( bodyGroupIndex, stateIndex )
		}
	}
}

// modified function: get this titan is gibbbed or not
// find bodygroups from this array until we got one valid
const array<string> GIBBED_TITAN_BODYGROUPS = 
[
	"torso", // tf2 titans
	"front", // buddy titans
]

bool function TitanHasBeenGibbed( entity titan )
{
	int bodyGroupIndex = -1
	foreach ( string bodyGroup in GIBBED_TITAN_BODYGROUPS )
	{
		bodyGroupIndex = titan.FindBodyGroup( bodyGroup )
		if ( bodyGroupIndex > -1 )
			break
	}
			
	if ( bodyGroupIndex > -1 )
	{
		int currentState = titan.GetBodyGroupState( bodyGroupIndex )
		int stateCount = titan.GetBodyGroupModelCount( bodyGroupIndex )
		if ( currentState == ( stateCount - 1 ) ) // max state!
			return true
	}

	return false
}

void function UndoomTitan_Body( entity titan )
{
	if ( !HasHitData( titan ) )
		return

	local entKVs = titan.CreateTableFromModelKeyValues()
	local hitData = entKVs["hit_data"]

	foreach ( bodyGroupName, bodyGroupData in hitData )
	{
		// modified checks: we shouldn't affect titan's back, same as DoomTitan() does
		if ( DOOM_IGNORE_TITAN_BODYGROUPS.find( expect string( bodyGroupName ) ) != -1 )
			continue
		//

		int bodyGroupIndex = titan.FindBodyGroup( bodyGroupName )
		titan.SetBodygroup( bodyGroupIndex, 0 )
		//titan.SetBodygroup( bodyGroupIndex, stateCount - 1 )
	}
}

// add some hardcoded checks: we shouldn't doom titan's back...
// those bodygroups only exists for buddy titans, but it only contains rocket pod mdoel, doesn't look well after hiding
const array<string> DOOM_IGNORE_TITAN_BODYGROUPS =
[
	"back",
]

// function pamameter has been modified, allow skipping random wait
//void function DoomTitan( entity titan )
void function DoomTitan( entity titan, bool doomInstant = false )
{
	if ( !HasHitData( titan ) )
		return

	local entKVs = titan.CreateTableFromModelKeyValues()
	local hitData = entKVs["hit_data"]

	// modified parameter: allow skipping random wait, instantly doom titan bodygroups
	if ( doomInstant )
	{
		// modified signal to cancel out DelayedBodyGroupBreak()
		titan.Signal( "TitanDoomedInstant" )
		entity soul = titan.GetTitanSoul()
		if ( IsValid( soul ) )
			soul.Signal( "TitanDoomedInstant" )
	}

	foreach ( bodyGroupName, bodyGroupData in hitData )
	{
		// modified checks: we shouldn't doom titan's back
		if ( DOOM_IGNORE_TITAN_BODYGROUPS.find( expect string( bodyGroupName ) ) != -1 )
			continue
		//

		bool hasBlank = ("blank" in bodyGroupData)

		int bodyGroupIndex = titan.FindBodyGroup( bodyGroupName )
		int stateCount = titan.GetBodyGroupModelCount( bodyGroupIndex )

		if ( hasBlank )
			stateCount -= 1

		// vanilla behavior
		/*
		thread DelayedBodyGroupBreak( titan, bodyGroupIndex, stateCount - 1 )
		//titan.SetBodygroup( bodyGroupIndex, stateCount - 1 )
		*/

		// modified checks: if we already set state to doom or blank, don't do anything
		int currentState = titan.GetBodyGroupState( bodyGroupIndex )
		if ( currentState >= stateCount - 1 ) // blank state
		{
			//print( "titan bodygroup: " + bodyGroupName + " already doomed! skipping think" )
			//print( "currentState: " + string( currentState ) )
			continue
		}

		// modified parameter: allow skipping random wait, instantly doom titan bodygroups
		if ( doomInstant )
			titan.SetBodygroup( bodyGroupIndex, stateCount - 1 )
		else
			thread DelayedBodyGroupBreak( titan, bodyGroupIndex, stateCount - 1 )
	}
}

void function DelayedBodyGroupBreak( entity titan, int bodyGroupIndex, int stateIndex )
{
	titan.EndSignal( "OnDeath" )
	titan.EndSignal( "TitanEjectionStarted" )
	titan.EndSignal( "TitanUnDoomed" )
	// modified signals to cancel out think
	titan.EndSignal( "TitanGibbed" )
	titan.EndSignal( "TitanDoomedInstant" )

	if ( !HasSoul( titan ) )
		return

	entity soul = titan.GetTitanSoul()
	soul.EndSignal( "OnDestroy" )
	// modified signals to cancel out think
	soul.EndSignal( "TitanUnDoomed" ) // signaled by modified UndoomTitan() function
	soul.EndSignal( "TitanGibbed" )
	soul.EndSignal( "TitanDoomedInstant" )

	// modified checks here: insure we didn't update bodygroup mid-way
	int stateIndexBeforeWait = titan.GetBodyGroupState( bodyGroupIndex )

	wait RandomFloat( 4.0 )

	if ( !soul.HasValidTitan() )
		return

	titan = soul.GetTitan()

	if ( titan == null )
		return

	// modifeid checks: if we updated bodygroup during wait, don't do anything
	if ( stateIndexBeforeWait != titan.GetBodyGroupState( bodyGroupIndex ) )
		return

	titan.SetBodygroup( bodyGroupIndex, stateIndex )
}

void function ExplodeTitanBits( entity titan )
{
	if ( !HasHitData( titan ) )
		return

	local entKVs = titan.CreateTableFromModelKeyValues()
	local hitData = entKVs["hit_data"]

	foreach ( bodyGroupName, bodyGroupData in hitData )
	{
		local hasBlank = ("blank" in bodyGroupData)

		local bodyGroupIndex = titan.FindBodyGroup( bodyGroupName )
		local stateCount = titan.GetBodyGroupModelCount( bodyGroupIndex )

		if ( hasBlank )
			stateCount -= 1

		titan.SetBodygroup( bodyGroupIndex, stateCount - 1 )
	}
}


function UpdateDamageState( ent, damageInfo )
{
}


function GetNumBrokenLimbs( titan )
{
	int brokenLimbs = 0

	if ( titan.s.damageStateInfo["right_leg"] )
		brokenLimbs++
	if ( titan.s.damageStateInfo["left_leg"] )
		brokenLimbs++
	if ( titan.s.damageStateInfo["right_arm"] )
		brokenLimbs++
	if ( titan.s.damageStateInfo["left_arm"] )
		brokenLimbs++

	return brokenLimbs
}

function IsBodyGroupBroken( ent, bodyGroupName )
{
	if ( ent.IsTitan() )
		return ( ent.s.damageStateInfo[bodyGroupName] )
	else
		return ( ent.s.damageStateInfo[bodyGroupName] > ( ent.GetMaxHealth() * TITAN_DAMAGE_STATE_ARMOR_HEALTH ) )
}


int function GetStateCountForBodyGroup( ent, bodyGroupName )
{
	local bodyGroupIndex = ent.FindBodyGroup( bodyGroupName )
	local entKVs = ent.CreateTableFromModelKeyValues()
	local hitData = entKVs["hit_data"]

	int stateCount = expect int( ent.GetBodyGroupModelCount( bodyGroupIndex ) )

	if ( "blank" in hitData[bodyGroupName] )
		stateCount--

	return stateCount
}

function GetTagsForBodyGroup( ent, bodyGroupName )
{
	local entKVs = ent.CreateTableFromModelKeyValues()

	local hitData = entKVs["hit_data"]

	local bodyGroupData = hitData[bodyGroupName]

	local tags = []

	foreach ( k, v in bodyGroupData )
	{
		if ( k.find( "tag" ) == null )
			continue

		tags.append( v )
	}

	return tags
}

function PlayTitanDeathFx( entity titan )
{
	PlayTitanDeathFx_Internal( titan, FX_PATTACH_POINT_FOLLOW )
}

function PlayTitanDeathFxUp( entity titan )
{
	PlayTitanDeathFx_Internal( titan, FX_PATTACH_POINT_FOLLOW_NOROTATE )
}

function PlayTitanDeathFx_Internal( entity titan, int attachType )
{
	int attachmentIndex = titan.LookupAttachment( "exp_torso_main" )
	StartParticleEffectOnEntity( titan, TITAN_EXPLOSION_EFFECT, attachType, attachmentIndex )

	// split this one into function so we don't have to deal with it
	/*
	TraceResults results = TraceLine( titan.GetOrigin(), titan.GetOrigin() + Vector( 0, 0, -TITAN_EXPLOSION_GROUNDWASH_HEIGHT ), [ titan ], TRACE_MASK_NPCSOLID_BRUSHONLY | TRACE_MASK_WATER, TRACE_COLLISION_GROUP_NONE )

	if ( !results.startSolid && !results.allSolid && results.hitEnt )
		PlayImpactFXTable( results.endPos, titan, TITAN_EXPLOSION_GROUNDWASH_FX_TABLE )
	*/
	PlayTitanDeathGroundWashFx( titan )
}

// split this one into function so we don't have to deal with it
void function PlayTitanDeathGroundWashFx( entity titan )
{
	TraceResults results = TraceLine( titan.GetOrigin(), titan.GetOrigin() + Vector( 0, 0, -TITAN_EXPLOSION_GROUNDWASH_HEIGHT ), [ titan ], TRACE_MASK_NPCSOLID_BRUSHONLY | TRACE_MASK_WATER, TRACE_COLLISION_GROUP_NONE )

	if ( !results.startSolid && !results.allSolid && results.hitEnt )
		PlayImpactFXTable( results.endPos, titan, TITAN_EXPLOSION_GROUNDWASH_FX_TABLE )
}

// here's a modified function: in case we want to add titan explode effect for ragdolled titans
void function PlayTitanDeathFx_Ragdoll( entity titan )
{
	int attachmentIndex = titan.LookupAttachment( "exp_torso_main" )
	vector origin = titan.GetAttachmentOrigin( attachmentIndex )
	vector angles = titan.GetAttachmentAngles( attachmentIndex )
	StartParticleEffectInWorld( TITAN_EXPLOSION_EFFECT, origin, angles )

	PlayTitanDeathGroundWashFx( titan )
}

void function PlayTitanDeathFxUp_Ragdoll( entity titan )
{
	int attachmentIndex = titan.LookupAttachment( "exp_torso_main" )
	vector origin = titan.GetAttachmentOrigin( attachmentIndex )
	vector angles = titan.GetAttachmentAngles( attachmentIndex )
	angles.x = 0 // no rotation
	angles.z = 0 // no rotation
	StartParticleEffectInWorld( TITAN_EXPLOSION_EFFECT, origin, angles )

	PlayTitanDeathGroundWashFx( titan )
}
#endif

const table<int, string> damageFlagsToNames =
{
	[DF_GIB					] = "DF_GIB",
	[DF_DISSOLVE			] = "DF_DISSOLVE",
	[DF_INSTANT				] = "DF_INSTANT",
	[DF_NO_SELF_DAMAGE		] = "DF_NO_SELF_DAMAGE",
	[DF_IMPACT				] = "DF_IMPACT",
	[DF_BYPASS_SHIELD		] = "DF_BYPASS_SHIELD",
	[DF_RAGDOLL				] = "DF_RAGDOLL",
	[DF_TITAN_STEP 			] = "DF_TITAN_STEP",
	[DF_RADIUS_DAMAGE 		] = "DF_RADIUS_DAMAGE",
	[DF_ELECTRICAL 			] = "DF_ELECTRICAL",
	[DF_BULLET 				] = "DF_BULLET",
	[DF_EXPLOSION			] = "DF_EXPLOSION",
	[DF_MELEE				] = "DF_MELEE",
	[DF_NO_INDICATOR		] = "DF_NO_INDICATOR",
	[DF_KNOCK_BACK			] = "DF_KNOCK_BACK",
	[DF_STOPS_TITAN_REGEN	] = "DF_STOPS_TITAN_REGEN",
	[DF_DISMEMBERMENT		] = "DF_DISMEMBERMENT",
	[DF_MAX_RANGE			] = "DF_MAX_RANGE",
	[DF_SHIELD_DAMAGE		] = "DF_SHIELD_DAMAGE",
	[DF_CRITICAL			] = "DF_CRITICAL",
	[DF_SKIP_DAMAGE_PROT	] = "DF_SKIP_DAMAGE_PROT",
	[DF_HEADSHOT			] = "DF_HEADSHOT",
	[DF_VORTEX_REFIRE		] = "DF_VORTEX_REFIRE",
	[DF_RODEO				] = "DF_RODEO",
	[DF_BURN_CARD_WEAPON	] = "DF_BURN_CARD_WEAPON",
	[DF_KILLSHOT			] = "DF_KILLSHOT",
	[DF_SHOTGUN				] = "DF_SHOTGUN",
	[DF_SKIPS_DOOMED_STATE	] = "DF_SKIPS_DOOMED_STATE",
	[DF_DOOMED_HEALTH_LOSS	] = "DF_DOOMED_HEALTH_LOSS",
	[DF_DOOM_PROTECTED		] = "DF_DOOM_PROTECTED",
	[DF_DOOM_FATALITY		] = "DF_DOOM_FATALITY",
	[DF_NO_HITBEEP			] = "DF_NO_HITBEEP"
}

void function PrintDamageFlags( int flags )
{
	foreach ( int key, string value in damageFlagsToNames )
	{
		if ( flags & key )
			printt( "Damage Flag: " + value + " was set    (" + key + ")" )
	}
}

string function GetDescStringForDamageFlags( int flags )
{
	string appendedNames
	int foundCount = 0
	foreach ( int key, string value in damageFlagsToNames )
	{
		if ( !(flags & key) )
			continue

		if ( foundCount != 0 )
			appendedNames += ", "
		appendedNames = value

		foundCount++
	}

	return ("(" + appendedNames + ")")
}

// BELOW ARE MODIFIED FUNCTIONS
#if SERVER
// death package settings
void function DeathPackage_SetDisabledForEntity( entity ent, bool disable )
{
	if ( !( ent in file.entDisabledDeathPackage ) )
		file.entDisabledDeathPackage[ ent ] <- false // default value
	file.entDisabledDeathPackage[ ent ] = disable
}

bool function DeathPackage_IsDisabledForEntity( entity ent )
{
	if ( !( ent in file.entDisabledDeathPackage ) )
		return false // default value
	return file.entDisabledDeathPackage[ ent ]
}

// headshotFX override
void function DeathPackage_SetEntityHeadshotFXOverride( entity ent, asset headshotFX )
{
	if ( !( ent in file.headshotFXOverride ) )
		file.headshotFXOverride[ ent ] <- ent.GetSettingsHeadshotFX() // default value
	file.headshotFXOverride[ ent ] = headshotFX
}

void function DeathPackage_RemoveEntityHeadshotFXOverride( entity ent )
{
	if ( !( ent in file.headshotFXOverride ) )
		return
	delete file.headshotFXOverride[ ent ]
}

// modified settings
void function DeathPackage_TitanAlwaysGibOnDeath( bool alwaysGib )
{
	file.titanAlwaysGibOnDeath = alwaysGib
}

void function DeathPackage_EnableTitanDeathFxOnRagdoll( bool deathFxOnRagdoll )
{
	file.titanDeathFxOnRagdoll = deathFxOnRagdoll
}

// to be shared with _anim.gnut, for fixing effects
bool function DeathPackage_IsTitanRagdollDeathFxEnabled()
{
	return file.titanDeathFxOnRagdoll
}
#endif