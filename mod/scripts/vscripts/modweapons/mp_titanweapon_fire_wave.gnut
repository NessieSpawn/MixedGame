global function MpTitanWeaponFireWave_Init

global function OnWeaponActivate_titanweapon_fire_wave
global function OnWeaponPrimaryAttack_titanweapon_fire_wave
#if SERVER
global function OnWeaponNpcPrimaryAttack_titanweapon_fire_wave

// change titan damage in keyvalues will influnce vortexSphere damage, done in script
const float FIRE_WAVE_DAMAGE = 75
const float FIRE_WAVE_DAMAGE_TITANARMOR	= 1100
#endif

void function MpTitanWeaponFireWave_Init()
{
#if SERVER
	// adding a new damageSourceId. it's gonna transfer to client automatically
	RegisterWeaponDamageSource( "mp_titanweapon_fire_wave", "Fire Wave" )
	AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_fire_wave, FireWaveDamagedTarget )
#endif
}

// only used for flamewall mod
void function OnWeaponActivate_titanweapon_fire_wave( entity weapon )
{
	// vanilla behavior
	weapon.EmitWeaponSound_1p3p( "flamewall_start_1p", "flamewall_start_3p" )

	// fix for atlas npc titan usage
	#if SERVER
		entity owner = weapon.GetWeaponOwner()
		if ( owner.IsNPC() )
		{
			// shared from special_3p_attack_anim_fix.gnut
			// fix atlas chassis animation
			HandleSpecial3pAttackAnim( owner, weapon, 0.5, OnWeaponPrimaryAttack_titanweapon_fire_wave )
		}
	#endif
}

var function OnWeaponPrimaryAttack_titanweapon_fire_wave( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	if ( weaponOwner.IsPhaseShifted() )
		return 0

	bool shouldPredict = weapon.ShouldPredictProjectiles()
	#if CLIENT
		if ( !shouldPredict )
			return 1
	#endif

	const float FUSE_TIME = 99.0
	entity projectile = FireWeaponGrenade_RecordData( weapon, attackParams.pos, attackParams.dir, < 0,0,0 >, FUSE_TIME, damageTypes.projectileImpact, damageTypes.explosive, shouldPredict, true, true )
	if ( IsValid( projectile ) )
	{
		entity owner = weapon.GetWeaponOwner()

		if ( owner.IsPlayer() )
			PlayerUsedOffhand( owner, weapon )

		#if SERVER
			projectile.ProjectileSetDamageSourceID( eDamageSourceId.mp_titanweapon_fire_wave ) // change damageSourceID
			thread BeginFireWave( projectile, attackParams )
		#endif
	}

	#if SERVER
		// anim fix for titanpick
		if ( weaponOwner.IsPlayer() )
		{
			// shared from special_3p_attack_anim_fix.gnut
			// fix atlas chassis animation
			// firewave's npc fix already handled in OnWeaponActivate_titanweapon_fire_wave()
			HandleSpecial3pAttackAnim( weaponOwner, weapon, 0.5 )
		}
	#endif

	return weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
}

#if SERVER
void function BeginFireWave( entity projectile, WeaponPrimaryAttackParams attackParams )
{
	projectile.EndSignal( "OnDestroy" )
	projectile.SetAbsOrigin( projectile.GetOrigin() )
	projectile.SetAbsAngles( projectile.GetAngles() )
	projectile.SetVelocity( Vector( 0, 0, 0 ) )
	projectile.StopPhysics()
	projectile.SetTakeDamageType( DAMAGE_NO )
	projectile.Hide()
	projectile.NotSolid()
	projectile.e.onlyDamageEntitiesOnce = true
	// modded titan: stryder_fire_wave
    EmitSoundOnEntity( projectile, "flamewall_flame_start" )
    waitthread WeaponAttackWave( projectile, 0, projectile, attackParams.pos + attackParams.dir * 25.0, attackParams.dir, CreateFireWaveSegment )
    StopSoundOnEntity( projectile, "flamewall_flame_start" )

	projectile.Destroy()
}

// modified: stryder_fire_wave
bool function CreateFireWaveSegment( entity projectile, int projectileCount, entity inflictor, entity movingGeo, vector pos, vector angles, int waveCount )
{
	projectile.SetOrigin( pos )

	float damageScalar = 1.0
	// not using charged shot
	//bool isChargedShot = projectile.proj.isChargedShot
	//if ( isChargedShot )
	//	damageScalar = 1.5
	
	vector fxPos = pos + < 0, 0, 15 > // flamewall fx needs a bit offset
	entity fx = PlayFX( $"P_wpn_meteor_wall", fxPos, angles )
	EffectSetControlPointVector( fx, 1, pos ) // use current pos, or the fx will spread to map's < 0, 0, 0 >
	thread FireWaveFXLifeTime( fx )

	fxPos = pos - < 0, 0, 50 > // exp fx needs a bit offset
	PlayFX( $"impact_exp_burst_FRAG_2", fxPos, angles )

	int damageSourceID = eDamageSourceId.mp_titanweapon_fire_wave
	RadiusDamage(
		pos,
		projectile.GetOwner(), 			//attacker
		inflictor, 						//inflictor
		FIRE_WAVE_DAMAGE,
		FIRE_WAVE_DAMAGE_TITANARMOR,
		112, 							// inner radius
		112, 							// outer radius
		SF_ENVEXPLOSION_NO_DAMAGEOWNER | SF_ENVEXPLOSION_MASK_BRUSHONLY | SF_ENVEXPLOSION_NO_NPC_SOUND_EVENT,
		0, 								// distanceFromAttacker
		0, 								// explosionForce
		DF_EXPLOSION | DF_STOPS_TITAN_REGEN,
		damageSourceID
	)

	return true
}

void function FireWaveFXLifeTime( entity fx )
{
	fx.EndSignal( "OnDestroy" )
	wait 0.5 // enough time for the fx
	EffectStop( fx )
}

// damage
void function FireWaveDamagedTarget( entity victim, var damageInfo )
{
	if ( !IsAlive( victim ) )
		return

	Thermite_DamagePlayerOrNPCSounds( victim )
}

// npc
var function OnWeaponNpcPrimaryAttack_titanweapon_fire_wave( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    const float FUSE_TIME = 99.0
	entity projectile = FireWeaponGrenade_RecordData( weapon, attackParams.pos, attackParams.dir, < 0,0,0 >, FUSE_TIME, damageTypes.projectileImpact, damageTypes.explosive, false, true, true )
	if ( IsValid( projectile ) )
		thread BeginFireWave( projectile, attackParams )

	return 1
}
#endif