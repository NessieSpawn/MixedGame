global function MpAbilityJumpPad_Init

global function OnWeaponTossPrep_ability_jump_pad
global function OnWeaponTossReleaseAnimEvent_ability_jump_pad
global function OnProjectileCollision_ability_jump_pad

#if SERVER
//global function SetPlayerInJumpPadCooldown // was shared, now all be in this file
//global function IsPlayerInJumpPadCooldown
#endif

// not letting too much jump pads causes crash
const float JUMP_PAD_LIFETIME = 20 // increased from 15. zipline gun lasts 30s
const int MAX_JUMP_PAD_COUNT = 64
// taken from r5 jumppad
const float JUMP_PAD_VIEW_PUNCH_SOFT = 10.0 // 25.0 in r5
const float JUMP_PAD_VIEW_PUNCH_HARD = 2.0 // 4.0 in r5
const float JUMP_PAD_VIEW_PUNCH_RAND = 2.0 // 4.0 in r5
// unused
const float JUMP_PAD_VIEW_PUNCH_SOFT_TITAN = 120.0
const float JUMP_PAD_VIEW_PUNCH_HARD_TITAN = 20.0
const float JUMP_PAD_VIEW_PUNCH_RAND_TITAN = 20.0

// classname checks
const bool JUMP_PAD_ALLOW_HEAVYARMOR = false
const array<string> JUMP_PAD_ALLOWED_CLASSES =
[
	// player
	"player",
	// npc
	"npc_soldier",
	"npc_stalker",
	"npc_spectre",
	"npc_prowler",
	"npc_marvin",
	"npc_pilot_elite",
	// projectile

	// prop

]

struct JumpPadStruct
{
	entity tower
	entity projectile
}

struct
{
    array<JumpPadStruct> placedJumpPads

	// management
    //table< entity, bool > playerInJumpPadCooldown
	table< entity, bool > playerInJumpPad
} file

void function MpAbilityJumpPad_Init()
{
	// init for modded stim
    AddStimModifier( "jump_pad" )
	ModdedStim_AddTossPrepCallback( "jump_pad", OnWeaponTossPrep_ability_jump_pad )
    ModdedStim_AddTossReleaseAnimEventCallback( "jump_pad", OnWeaponTossReleaseAnimEvent_ability_jump_pad )
    ModdedStim_AddProjectileCollisionCallback( "jump_pad", OnProjectileCollision_ability_jump_pad )

#if SERVER
    // shared signals
    RegisterSignal( "JumpPadFlyStart" )
    RegisterSignal( "JumpPadPlayerTouchGround" )

    // velocity fix
    RegisterSignal( "JumpPadForcedVelocityStart" )

    // trail
    RegisterSignal( "JumpPadTrailStart" )

    // triple jump
    RegisterSignal( "JumpPadGainTripleJump" )
    RegisterSignal( "JumpPadTripleJumpThinkStart" )

	// cooldown
	RegisterSignal( "JumpPadCooldown" )

	// freefall
	RegisterSignal( "StartFreeFallSound" )

    AddCallback_OnClientConnected( JumpPadInitilaize )
#endif
}

void function OnWeaponTossPrep_ability_jump_pad( entity weapon, WeaponTossPrepParams prepParams )
{
	// fix sound!
	string fpSound = string ( GetGrenadeDeploySound_1p( weapon ) )
	string tpSound = string ( GetGrenadeDeploySound_3p( weapon ) )
	weapon.EmitWeaponSound_1p3p( fpSound, tpSound )
}

var function OnWeaponTossReleaseAnimEvent_ability_jump_pad( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity ownerPlayer = weapon.GetWeaponOwner()

	// fix sound!
	string fpSound = string ( GetGrenadeThrowSound_1p( weapon ) )
	string tpSound = string ( GetGrenadeThrowSound_3p( weapon ) )
	weapon.EmitWeaponSound_1p3p( fpSound, tpSound )

    entity deployable = ThrowDeployable( weapon, attackParams, DEPLOYABLE_THROW_POWER, OnJumpPadPlanted )
    #if SERVER
		//thread HolsterWeaponForPilotInstants( weapon )
		SendHudMessage( ownerPlayer, "扔出跳板", -1, -0.35, 255, 255, 100, 255, 0, 3, 0 )
		PlayerUsedOffhand( ownerPlayer, weapon )
    #endif
    if ( deployable )
    {
        entity player = weapon.GetWeaponOwner()

        #if SERVER
			string projectileSound = GetGrenadeProjectileSound( weapon )
			if ( projectileSound != "" )
				EmitSoundOnEntity( deployable, projectileSound )

			weapon.w.lastProjectileFired = deployable

			// owner lifestate management
			// destroys grunt zipline on death
			// 1/16/2025 EDIT: abilities that can't deal damage no longer destroy themselves on owner death
			/*
			if ( weapon.HasMod( "gm_jumper" ) )
				thread TrackProjectileOwnerLifeTime( deployable, ownerPlayer )
			*/
        #endif
    }

    return weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
}

void function OnProjectileCollision_ability_jump_pad( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    return OnProjectileCollision_weapon_deployable( projectile, pos, normal, hitEnt, hitbox, isCritical )
}

void function OnJumpPadPlanted( entity projectile )
{
	#if SERVER
	Assert( IsValid( projectile ) )
	vector origin = projectile.GetOrigin()

	vector endOrigin = origin - Vector( 0.0, 0.0, 32.0 )
	vector surfaceAngles = projectile.proj.savedAngles
	vector oldUpDir = AnglesToUp( surfaceAngles )

	TraceResults traceResult = TraceLine( origin, endOrigin, [], TRACE_MASK_SOLID, TRACE_COLLISION_GROUP_NONE )
	if ( traceResult.fraction < 1.0 )
	{
		vector forward = AnglesToForward( projectile.proj.savedAngles )
		surfaceAngles = AnglesOnSurface( traceResult.surfaceNormal, forward )

		vector newUpDir = AnglesToUp( surfaceAngles )
		if ( DotProduct( newUpDir, oldUpDir ) < 0.55 )
			surfaceAngles = projectile.proj.savedAngles
	}

	projectile.SetAngles( surfaceAngles )

	DeployJumpPad( projectile, origin, surfaceAngles )
	#endif
}

#if SERVER
void function JumpPadInitilaize( entity player )
{
    // defined in mp_ability_heal.nut
	//if ( !( player in file.playerInJumpPadCooldown ) )
    //	file.playerInJumpPadCooldown[player] <- false
	if ( !( player in file.playerInJumpPad ) )
		file.playerInJumpPad[player] <- false
}

/* // now using file.playerInJumpPad
void function SetPlayerInJumpPadCooldown( entity player, float cooldown )
{
	player.Signal( "JumpPadCooldown" )
	player.EndSignal( "JumpPadCooldown" )
    file.playerInJumpPadCooldown[player] = true
    wait cooldown
    if( IsValid( player ) )
        file.playerInJumpPadCooldown[player] = false
}

bool function IsPlayerInJumpPadCooldown( entity player )
{
    return file.playerInJumpPadCooldown[player]
}
*/

// utilities
void function DeployJumpPad( entity projectile, vector origin, vector angles )
{
	#if SERVER
	int team = projectile.GetTeam()
	entity tower = CreateEntity( "prop_dynamic" )
	tower.SetModel( $"models/weapons/sentry_shield/sentry_shield_proj.mdl" )
	tower.SetOrigin( origin )
	tower.SetAngles( angles )
	tower.kv.modelscale = 4

	array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior
	if( mods.contains( "infinite_jump_pad" ) )
	{
		JumpPadStruct placedJumpPad
		placedJumpPad.tower = tower
		placedJumpPad.projectile = projectile
		file.placedJumpPads.append( placedJumpPad )
		JumpPadLimitThink()
	}

	thread JumpPadThink( projectile, tower )

	// grunt mode specifics!
	// 1/16/2025 EDIT: abilities that can't deal damage no longer destroy themselves on owner death
	/*
	if ( mods.contains( "gm_jumper" ) )
		thread DestroyJumpPadOnOwnerDeath( projectile, projectile.GetOwner() )
	*/
	if( !mods.contains( "infinite_jump_pad" ) )
		thread CleanupJumpPad( tower, projectile, JUMP_PAD_LIFETIME )
	#endif
}

void function JumpPadThink( entity projectile, entity tower )
{
	projectile.EndSignal( "OnDestroy" )
	tower.EndSignal( "OnDestroy" )
	entity trigger = CreateEntity( "trigger_cylinder" )
	trigger.SetRadius( 44 ) // 64 can be bigger than it looks
	trigger.SetAboveHeight( 24 )
	trigger.SetBelowHeight( 0 )
	trigger.SetOrigin( tower.GetOrigin() )
	SetTeam( trigger, tower.GetTeam() )
	DispatchSpawn( trigger )
	trigger.SetParent( projectile ) // bind together

	trigger.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( projectile, tower, trigger )
		{
			if ( IsValid( projectile ) )
				projectile.GrenadeExplode( projectile.GetForwardVector() )
			if( IsValid( tower ) )
				tower.Destroy()
			if( IsValid( trigger ) )
				trigger.Destroy()
		}
	)

	trigger.SetEnterCallback( JumpPadTriggerEnter )
	trigger.SetLeaveCallback( JumpPadTriggerLeave )

	// search for entities on spawn
	trigger.SearchForNewTouchingEntity() // trigger.GetTouchingEntities() will not return entities already in the trigger unless this is called
	array<entity> trigTouchingEnts = trigger.GetTouchingEntities()
	foreach ( entity ent in trigTouchingEnts )
		JumpPadTriggerEnter( trigger, ent )

	/* // now using setEnterCallback()
	while( true )
	{
		array<entity> touchingEnts = trigger.GetTouchingEntities()

		foreach( entity ent in touchingEnts )
		{
			GiveJumpPadEffect( trigger, ent )
			//ScriptTriggerRemoveEntity( trigger, ent ) // don't remove since we are checking entities touching
		}

		WaitFrame()
	}
	*/

	WaitForever() // jump pad duration handled by CleanupJumpPad()
}

void function JumpPadTriggerEnter( entity trigger, entity ent )
{
	if( !IsAlive( ent ) )
		return
	// allow npcs to use jump pad now
	//if( !ent.IsPlayer() )
	//	return
	if ( !EntityAllowedToUseJumpPad( ent ) )
		return
	if( ent.IsPhaseShifted() )
		return
	if( ent.GetParent() != null )
		return
	//if( IsPlayerInJumpPadCooldown( player ) )
	//	return
	// allow npc usage, always initialize here
	JumpPadInitilaize( ent )
	if ( file.playerInJumpPad[ ent ] ) // already in jumppad?
		return
	
	// all checks passed
	file.playerInJumpPad[ ent ] = true
	GiveJumpPadEffect( ent )
}

void function JumpPadTriggerLeave( entity trigger, entity ent )
{
	// allow npcs to use jump pad now
	//if( !ent.IsPlayer() )
	//	return
	// allow npc usage, always initialize here
	JumpPadInitilaize( ent )

	// this only marks player as left jump pad
	if ( file.playerInJumpPad[ ent ] )
		file.playerInJumpPad[ ent ] = false
}

bool function EntityAllowedToUseJumpPad( entity ent )
{
	if ( !IsValid( ent ) )
		return false

	// only affects pilots, npcs, prop_physics and grenades
	if ( !JUMP_PAD_ALLOW_HEAVYARMOR && ent.GetArmorType() == ARMOR_TYPE_HEAVY )
		return false
	string className = ent.GetClassName()
	if ( !JUMP_PAD_ALLOWED_CLASSES.contains( className ) )
		return false

	// all checks passed
	return true
}

void function GiveJumpPadEffect( entity player )
{
	if ( player.IsPlayer() )
	{
		StopSoundOnEntity( player, "Boost_Card_SentryTurret_Deployed_3P" ) // prevent sound stacking
		for( int i = 0; i < 2; i++ ) // was 3, first version uses 5
			EmitSoundOnEntity( player, "Boost_Card_SentryTurret_Deployed_3P" )
	}
	else // reduce npc noise
		EmitSoundOnEntity( player, "Boost_Card_SentryTurret_Deployed_3P" )
	
	if ( player.IsPlayer() ) // add compatibliity for npc usage
	{
		//Remote_CallFunction_Replay( player, "ServerCallback_ScreenShake", 5, 10, 0.5 )
		player.ViewPunch( player.GetOrigin(), JUMP_PAD_VIEW_PUNCH_SOFT, JUMP_PAD_VIEW_PUNCH_HARD, JUMP_PAD_VIEW_PUNCH_RAND )
	}

	vector targetVelocity
	if( player.IsPlayer() && ( player.IsInputCommandHeld( IN_DUCK ) || player.IsInputCommandHeld( IN_DUCKTOGGLE ) ) ) // further but lower
		targetVelocity = < player.GetVelocity().x * 1.5, player.GetVelocity().y * 1.5, 550 >
	else // higher
		targetVelocity = < player.GetVelocity().x * 1.3, player.GetVelocity().y * 1.3, 750 >
	thread JumpPadForcedVelocity( player, targetVelocity ) // maybe not a good idea: prevent jump higher through manually jump input, also prevents tap strafe

	if ( player.IsPlayer() ) // add compatibliity for npc usage
		player.TouchGround() // regen doublejump

	thread JumpPadFlying( player ) // signal sender
	if ( player.IsPlayer() ) // add compatibliity for npc usage
	{
		//thread JumpPadCooldownThink( player ) // now using file.playerInJumpPad
		thread JumpPadTrailThink( player )
		thread JumpPadTripleJumpThink( player )
		thread JumpPadFreefallSoundThink( player )
	}
}

void function JumpPadFlying( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "JumpPadFlyStart" )
	player.EndSignal( "JumpPadFlyStart" )

	AddPlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, SignalOnPlayerTouchGround )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, SignalOnPlayerTouchGround )
		}
	)

	waitthread WaitForPlayerTouchGround( player )
}

void function SignalOnPlayerTouchGround( entity player )
{
	player.Signal( "JumpPadPlayerTouchGround" )
}

void function WaitForPlayerTouchGround( entity player )
{
	// "OnDeath" and "OnDestroy" inherits from JumpPadFlying()
	player.EndSignal( "JumpPadPlayerTouchGround" ) // main functional signal

	// failsafe looping case
	while ( !player.IsOnGround() && !player.IsWallRunning() && !player.IsWallHanging() )
		WaitFrame()
}

void function JumpPadForcedVelocity( entity player, vector targetVelocity )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "JumpPadPlayerTouchGround" )
	player.Signal( "JumpPadForcedVelocityStart" )
	player.EndSignal( "JumpPadForcedVelocityStart" )

	float forcedTime = 0.2 // was 0.6, more than player's lurch time
	float startTime = Time()
	while( Time() < startTime + forcedTime )
	{
		player.SetVelocity( targetVelocity )
		if ( player.IsPlayer() ) // add compatibliity for npc usage
			player.ConsumeDoubleJump() // disable double jump
		WaitFrame()
	}

	if ( player.IsPlayer() ) // add compatibliity for npc usage
		player.TouchGround() // restore one doublejump usage

	// apex legends behavior: vertical speed won't go down 0 for some moment, to prevent using jumppad inside rooms to have weird interaction
	// maybe no need to implement though... our gravity lift also not using apex behavior( has no cooldown between multiple lifts )
}

void function JumpPadTripleJumpThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "JumpPadPlayerTouchGround" )
	player.EndSignal( "JumpPadGainTripleJump" )
	player.Signal( "JumpPadTripleJumpThinkStart" )
	player.EndSignal( "JumpPadTripleJumpThinkStart" )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, RegenDoubleJump )
		}
	)

	AddPlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, RegenDoubleJump )

	WaitForever()
}

void function RegenDoubleJump( entity player )
{
	player.TouchGround()
	player.Signal( "JumpPadGainTripleJump" )
}

void function JumpPadTrailThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "JumpPadPlayerTouchGround" )
	player.Signal( "JumpPadTrailStart" )
	player.EndSignal( "JumpPadTrailStart" )

	player.EndSignal( "StartPhaseShift" ) // phase shift should clean up trail effect

	array<entity> jumpJetFX

	OnThreadEnd(
		function(): ( jumpJetFX )
		{
			foreach( entity fx in jumpJetFX )
			{
				if( IsValid( fx ) )
					EffectStop( fx )
			}
		}
	)

	// enemy left vent fx, // "vent_left_out" "vent_right_out" direction is a little bit weird
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_left", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_left", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON", "vent_left", false ) )
	// enemy right vent fx
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_right", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_right", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON", "vent_right", false ) )
	// enemy center vent fx
	// this can be too big!! maybe use it for flame throwers?
	//jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_center_DBL", "vent_center", false ) )

	// friendly left vent fx, "P_team_jump_jet_WR_trails" is more visible with some transparent flames
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_DBL", "vent_left", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_left", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON", "vent_left", true ) )
	// friendly right vent fx
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_DBL", "vent_right", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_right", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON", "vent_right", true ) )
	// friendly center vent fx
	// this can be too big!! maybe use it for flame throwers?
	//jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_center_DBL", "vent_center", true ) )

	WaitForever()
}

entity function CreateJumpPadJetFxForPlayer( entity player, asset particle, string attachment, bool isFriendly )
{
	int particleID = GetParticleSystemIndex( particle )
	int attachID = player.LookupAttachment( attachment )
	if( attachID <= 0 ) // no attachment valid, don't play fx on this model
		return null
	entity fx = StartParticleEffectOnEntity_ReturnEntity( player, particleID, FX_PATTACH_POINT_FOLLOW, attachID )
	fx.SetOwner( player )
	SetTeam( fx, player.GetTeam() )
	if( isFriendly ) // removed: player can see friendly fx( blue flames and trails )
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY // | ENTITY_VISIBLE_TO_OWNER // this might get annoying!
	else
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY

	fx.SetStopType( "DestroyImmediately" ) // so we don't leave an annoying spotlight on ground
	return fx
}

/* // now using file.playerInJumpPad
void function JumpPadCooldownThink( entity player )
{
	SetPlayerInJumpPadCooldown( player, 1.0 ) // hardcoded now
}
*/

void function JumpPadFreefallSoundThink( entity player )
{
	// clean up jumpjet sound
    StopSoundOnEntity( player, "jumpjet_jet_body_1p" )
    StopSoundOnEntity( player, "jumpjet_jet_body_3p" )
    StopSoundOnEntity( player, "jumpjet_freefall_body_1p" )
    StopSoundOnEntity( player, "jumpjet_freefall_body_3p" )

	player.EndSignal( "OnDestroy" )
	player.Signal( "StartFreeFallSound" )
	player.EndSignal( "StartFreeFallSound" )
	// end thread when player enter another jump pad or touch ground
	player.EndSignal( "JumpPadFlyStart" )
	player.EndSignal( "JumpPadPlayerTouchGround" )

	// wait for player's vertical speed lowered
	while ( player.GetVelocity().z >= 0 )
		WaitFrame()

	// player already on ground?
	if ( player.IsOnGround() )
		return
	// player is pretty close to ground?
	if ( IsPlayerNearGround( player ) )
		return

	// start sound 
	StopSoundOnEntity( player, "jumpjet_freefall_body_1p" )
	StopSoundOnEntity( player, "jumpjet_freefall_body_3p" )
	EmitSoundOnEntityOnlyToPlayer( player, player, "jumpjet_freefall_body_1p" )
	EmitSoundOnEntityExceptToPlayer( player, player, "jumpjet_freefall_body_3p" )

	OnThreadEnd
	(
		function(): ( player )
		{
			if ( IsValid( player ) )
			{
				StopSoundOnEntity( player, "jumpjet_freefall_body_1p" )
				StopSoundOnEntity( player, "jumpjet_freefall_body_3p" )
			}
		}
	)

	// wait for player drop to ground or start traversing
	while ( !player.IsOnGround() && !player.IsTraversing() )
		WaitFrame( true ) // ignore 10fps limitation to have better effect
}

bool function IsPlayerNearGround( entity player, float checkHeight = 200 ) // default convar "pilot_freefall_sound_height" value is 200
{
	array<entity> ignoreEnts
	// always ignore all npcs and players, try to hit onto ground
	ignoreEnts.extend( GetPlayerArray() )
	ignoreEnts.extend( GetNPCArray() )

	vector traceStart = player.GetOrigin()
	vector traceEnd = traceStart - < 0, 0, checkHeight >

	TraceResults downTrace = TraceLine( traceStart, traceEnd, ignoreEnts, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
	entity hitEnt = downTrace.hitEnt
	if ( !IsValid( hitEnt ) ) // we cannot trace any entity
		return false

	return true
}

void function TrackProjectileOwnerLifeTime( entity projectile, entity owner )
{
	owner.EndSignal( "OnDestroy" )
	projectile.EndSignal( "OnDestroy" )
	projectile.EndSignal( "Planted" ) // end think if projectile gets deployed( which handled by DestroyJumpPadOnOwnerDeath() )

	owner.WaitSignal( "OnDeath" )
	projectile.GrenadeExplode( < 0, 0, 0 > )
}

void function DestroyJumpPadOnOwnerDeath( entity projectile, entity owner )
{
	projectile.EndSignal( "OnDestroy" )
	owner.EndSignal( "OnDestroy" )
	owner.EndSignal( "OnDeath" )

	OnThreadEnd(
		function(): ( projectile )
		{
			if ( IsValid( projectile ) )
				projectile.GrenadeExplode( projectile.GetForwardVector() )
		}
	)

	WaitForever()
}

void function CleanupJumpPad( entity tower, entity projectile, float delay )
{
	wait delay
	if( IsValid(tower) )
		tower.Destroy()
	if( IsValid(projectile) )
		projectile.GrenadeExplode(< 0,0,10 >)
}

void function JumpPadLimitThink()
{
	if( file.placedJumpPads.len() >= MAX_JUMP_PAD_COUNT )
	{
		JumpPadStruct curJumpPad = file.placedJumpPads[0]
		if( IsValid( curJumpPad.tower ) )
			curJumpPad.tower.Destroy()
		if( IsValid( curJumpPad.projectile ) )
			curJumpPad.projectile.GrenadeExplode(< 0,0,10 >)
		file.placedJumpPads.remove(0)
	}
}
#endif