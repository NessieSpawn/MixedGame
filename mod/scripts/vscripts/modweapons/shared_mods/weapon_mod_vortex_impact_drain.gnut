global function WeaponMod_Vortex_Impact_Drain_Init

// vortex nerf: drain on impact no matter what it catches
// THESE are hardcoded, should be in callbacks like AddCallback_VortexDrainedByImpact()
const float VORTEX_DRAIN_ON_PROJECTILE_HIT_ALWAYS = 0.045 // use this amount of drain if the projectile has no "vortex_drain"
// projectile shotgun being refired will deal it's original damage
// mostly the damage is pretty low so we scale down cost
const float VORTEX_DRAIN_PROJECTILE_SHOTGUN_FRAC = 0.3

const float VORTEX_DRAIN_ON_BULLET_HIT_ALWAYS = 0.03 // use this amount of drain if the weapon has no "vortex_drain"
// bullet shotgun being refired by vortex shield can still deal full damage
// no need to check for it

void function WeaponMod_Vortex_Impact_Drain_Init()
{
    #if SERVER
        // from modified _vortex.nut
        AddCallback_VortexDrainedByImpact( VortexAlwaysDrainOnImpact )
    #endif
}

#if SERVER
float function VortexAlwaysDrainOnImpact( entity vortexWeapon, entity weapon, entity projectile, var damageType, float drainAmount )
{
    if ( IsValid( projectile ) )
	{
		// vortex nerf: drain on impact no matter what it catches
        if( vortexWeapon.HasMod( "impact_drain_vortex" ) )
        {
            float amount = projectile.GetProjectileWeaponSettingFloat( eWeaponVar.vortex_drain )
            if ( amount <= 0 ) // only do default drain if we have no drain from projectile
            {
                // debug
                //print( "Attacker weapon has no vortex_drain, using default value" )
                
                drainAmount = VORTEX_DRAIN_ON_PROJECTILE_HIT_ALWAYS
                // projectile shotgun check
                #if SERVER
                    if ( IsProjectileShotgunPellets( projectile ) )
                        drainAmount *= VORTEX_DRAIN_PROJECTILE_SHOTGUN_FRAC
                #endif // SERVER
            }
        }
	}
	else
	{
		// vortex nerf: drain on impact no matter what it catches
		if( vortexWeapon.HasMod( "impact_drain_vortex" ) )
		{
            float amount = weapon.GetWeaponSettingFloat( eWeaponVar.vortex_drain )
			if ( amount <= 0 ) // only do default drain if we have no drain from weapon
			{
				// debug
				//print( "Attacker weapon has no vortex_drain, using default value" )

				drainAmount = VORTEX_DRAIN_ON_BULLET_HIT_ALWAYS
			}
		}
	}

    return drainAmount
}

// projectile shotgun check
bool function IsProjectileShotgunPellets( entity projectile )
{
	entity owner = projectile.GetOwner()
	if ( !IsValid( owner ) ) // projectile don't have a valid owner?
		return false
	if ( projectile.GetClassName() != "crossbow_bolt" ) // not a bolt projectile?
		return false

	// if there're any other projectile with the same owner created at the same time
	// we consider them as a shotgun blast projectile
	float creationTime = projectile.GetProjectileCreationTime()
	foreach ( entity otherProj in GetProjectileArray() )
	{
		if ( otherProj == projectile )
			continue
		if ( otherProj.GetClassName() != "crossbow_bolt" )
			continue
		
		if ( projectile.GetOwner() == owner && projectile.GetProjectileCreationTime() == creationTime )
		{
			// debug
			//print( "This is a projectile shotgun pellet!" )

			return true
		}
	}

	return false
}
#endif