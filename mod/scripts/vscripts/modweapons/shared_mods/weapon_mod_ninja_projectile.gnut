global function WeaponMod_NinjaProjectile_Init

global function OnWeaponActivate_ninja_projectile
global function OnWeaponTossReleaseAnimEvent_ninja_projectile
global function OnProjectileCollision_ninja_projectile

// it takes time to dissolve itself, so don't make it's lifetime too long
const float NINJA_PROJECTILE_LIFETIME = 3.0 

void function WeaponMod_NinjaProjectile_Init()
{
    #if SERVER
        RegisterWeaponDamageSource( "mp_weapon_ninja_projectile_kunai", "#MELEE_KUNAI" )
        RegisterWeaponDamageSource( "mp_weapon_ninja_projectile_dataknife", "#PATCH_DATAKNIFE" )
    #endif
}

void function OnWeaponActivate_ninja_projectile( entity weapon )
{

}

var function OnWeaponTossReleaseAnimEvent_ninja_projectile( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    // base grenade modifiers, function shared from modified _grenade.nut
    entity grenade = Grenade_OnWeaponToss_ReturnEntity( weapon, attackParams )
    if ( IsValid( grenade ) )
    {
        #if SERVER
            grenade.ProjectileSetDamageSourceID( eDamageSourceId.mp_weapon_ninja_projectile_kunai )
        #endif
        // model change
        if ( weapon.HasMod( "data_knife_projectile" ) )
        {
            grenade.SetModel( $"models/weapons/data_knife/v_data_knife.mdl" )
            #if SERVER
                grenade.ProjectileSetDamageSourceID( eDamageSourceId.mp_weapon_ninja_projectile_dataknife )
            #endif
        }
    }

    return weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
}

void function OnProjectileCollision_ninja_projectile( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior

    // fx goes every collision
    #if SERVER
        projectile.proj.projectileBounceCount++
        if ( projectile.proj.projectileBounceCount == 1 ) // firstBounce
        {
            // play a sound
            entity owner = projectile.GetOwner()
            if( IsValid( owner ) && owner.IsPlayer() )
            {
                EmitSoundAtPositionExceptToPlayer( TEAM_UNASSIGNED, pos, owner, "Pilot_PulseBlade_Activated_3P" )
                EmitSoundAtPositionOnlyToPlayer( TEAM_UNASSIGNED, pos, owner, "Pilot_PulseBlade_Activated_1P" )
            }
            else
                EmitSoundAtPosition( TEAM_UNASSIGNED, pos, "Pilot_PulseBlade_Activated_3P" )
        }
        // removing normal for FX
        vector fxPos = pos //pos + normal
        PlayFX( $"P_impact_exp_laserlite_AMP", fxPos, VectorToAngles( normal ) )
        //EmitSoundAtPosition( TEAM_UNASSIGNED, pos, "PulseBlade_SurfaceImpact_BubbleShield_3P" )
        //EmitSoundAtPosition( TEAM_UNASSIGNED, pos, "Pilot_PulseBlade_Activated_3P" )
        
    #endif

    bool didStick = false
    if ( mods.contains( "impact_bounce" ) ) // bounce on impact
    {
        if ( IsHumanSized( hitEnt ) )//Don't stick on Pilots/Grunts/Spectres. Causes pulse blade to fall into ground
		    return
        didStick = PlantStickyGrenade( projectile, pos, normal, hitEnt, hitbox, 4.0, false )
    }
    else // always try to stick
        didStick = PlantSuperStickyGrenade( projectile, pos, normal, hitEnt, hitbox )

    #if SERVER
        if ( didStick ) // successfully sticked!
        {
            if ( mods.contains( "kunai_mode" ) ) // dissolve the projectile immediately if we're in kunai_mode
            {
                projectile.SetReducedEffects() // hide trail..? doesn't seem to work on client-side
                projectile.Dissolve( ENTITY_DISSOLVE_PHASESHIFT, Vector( 0, 0, 0 ), 500 )
            }
            else
                thread NinjaProjectileLifeTime( projectile )

            // data knife model don't have proper rotation, rotate it manually
            vector impactAngle = VectorToAngles( normal )
            if ( mods.contains( "data_knife_projectile" ) )
            {
                vector projectileAngle = impactAngle
                projectileAngle.x = ClampAngle( impactAngle.x + 90 )
                projectile.SetAbsAngles( projectileAngle )
            }
        }
    #endif
}

#if SERVER
void function NinjaProjectileLifeTime( entity projectile )
{
    projectile.EndSignal( "OnDestroy" )
    wait NINJA_PROJECTILE_LIFETIME
    projectile.SetReducedEffects() // hide trail..? doesn't seem to work on client-side
    projectile.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
}
#endif