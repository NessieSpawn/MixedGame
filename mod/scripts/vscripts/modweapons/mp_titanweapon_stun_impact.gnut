global function MpTitanWeaponStunImpact_Init

global function OnWeaponPrimaryAttack_titanweapon_stun_impact
global function OnProjectileCollision_titanweapon_stun_impact

#if SERVER
global function OnWeaponNPCPrimaryAttack_titanweapon_stun_impact
#endif

// consts
const float STUN_IMPACT_PROJECTILE_FUSE_TIME        = 5.0 // max fuse time
//const float STUN_IMPACT_PROJECTILE_DETONATION_DELAY = 0.5 // handled by "grenade_ignition_time"
const int STUN_IMPACT_DAMAGE_FLAGS                  = DF_RAGDOLL | DF_EXPLOSION | DF_ELECTRICAL

void function MpTitanWeaponStunImpact_Init()
{
#if SERVER
    // this is a safe damageSourceID, respawn didn't do anything to it
	// adding a new damageSourceId. it's gonna transfer to client automatically
	RegisterWeaponDamageSource( "mp_titanweapon_stun_impact", "Stun Impact" )
    AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_stun_impact, ImpactStun_OnDamagedTarget )
#endif
}

var function OnWeaponPrimaryAttack_titanweapon_stun_impact( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity weaponOwner = weapon.GetWeaponOwner()
	if ( weaponOwner.IsPlayer() )
		PlayerUsedOffhand( weaponOwner, weapon )

	return FireStunImpactProjectile( weapon, attackParams )
}

// projectile function, shuold keep up with FireSonarPulse() for client prediction
int function FireStunImpactProjectile( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    bool shouldPredict = weapon.ShouldPredictProjectiles()
	#if CLIENT
		if ( !shouldPredict )
			return 1
	#endif

    vector angularVelocity = Vector( RandomFloatRange( -1200, 1200 ), 100, 0 )
	entity projectile = weapon.FireWeaponGrenade( attackParams.pos, attackParams.dir, < 0, 0, 0 >, STUN_IMPACT_PROJECTILE_FUSE_TIME, STUN_IMPACT_DAMAGE_FLAGS, STUN_IMPACT_DAMAGE_FLAGS, shouldPredict, true, false )
	weapon.SetWeaponChargeFractionForced( 1.0 ) // this will end the pod sequence immediately
    if ( projectile )
    {
        projectile.SetModel( $"models/weapons/grenades/arc_grenade_projectile.mdl" )
        #if SERVER
            projectile.ProjectileSetDamageSourceID( eDamageSourceId.mp_titanweapon_stun_impact )
            thread DelayedFixTrailEffect( projectile )
        #endif
    }

	return weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
}

void function OnProjectileCollision_titanweapon_stun_impact( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    // force stick on server
	// genericlly a copy of PlantSuperStickyGrenade(), remove hitEnt checks.
	// be sure to keep on date
    if ( hitEnt.IsWorld() )
	{
		projectile.StopPhysics()
	}
	else
	{
		if ( !projectile.IsMarkedForDeletion() && !hitEnt.IsMarkedForDeletion() )
		{
			if ( hitbox > 0 )
				projectile.SetParentWithHitbox( hitEnt, hitbox, true )
			else // Hit a func_brush
				projectile.SetParent( hitEnt )

			// modified: remove player only disappering parent check. 
			// breaks vanilla behavior but whatever, this is better for npc combats
			//if ( hitEnt.IsPlayer() )
			//{
				thread HandleDisappearingParent( projectile, hitEnt )
			//}
		}
	}

	// same as mp_weapon_grenade_emp does
#if SERVER
    if ( projectile.GrenadeHasIgnited() )
        return
    //Triggering this on the client triggers an impact effect.
    projectile.GrenadeIgnite()
#endif
}

#if SERVER
void function HandleDisappearingParent( entity ent, entity parentEnt )
{
	parentEnt.EndSignal( "OnDeath" )
	ent.EndSignal( "OnDestroy" )

	OnThreadEnd(
	function() : ( ent )
		{
			ent.ClearParent()
		}
	)

	parentEnt.WaitSignal( "StartPhaseShift" )
}
#else
void function HandleDisappearingParent( entity ent, entity parentEnt )
{
	parentEnt.EndSignal( "OnDeath" )
	ent.EndSignal( "OnDestroy" )

	parentEnt.WaitSignal( "StartPhaseShift" )

	ent.ClearParent()
}
#endif

#if SERVER
void function ImpactStun_OnDamagedTarget( entity victim, var damageInfo )
{
    entity inflictor = DamageInfo_GetInflictor( damageInfo )
    if ( !IsValid( inflictor ) )
        return
    if ( !inflictor.IsProjectile() )
        return
    
    array<string> mods = Vortex_GetRefiredProjectileMods( inflictor ) // modded weapon refire behavior
    if ( !mods.contains( "archon_stun_impact" ) ) // don't have the mod! should check it
        return

    EMP_DamagedPlayerOrNPC( victim, damageInfo )
}

void function DelayedFixTrailEffect( entity projectile )
{
    WaitFrame()
	if ( IsValid( projectile ) )
	{
		// don't use PlayFXOnEntity(), if the projectile not transmitted to client yet, it will crash
		int particleID = GetParticleSystemIndex( $"wpn_grenade_frag_blue" )
		StartParticleEffectOnEntity( projectile, particleID, FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
	}
}

// npc
var function OnWeaponNPCPrimaryAttack_titanweapon_stun_impact( entity weapon, WeaponPrimaryAttackParams attackParams )
{   
	return FireStunImpactProjectile( weapon, attackParams )
}

#endif