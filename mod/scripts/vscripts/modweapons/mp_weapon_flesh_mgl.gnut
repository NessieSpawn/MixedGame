// MGL that can attract flesh targets
global function MpWeaponFleshMGL_Init

global function OnWeaponPrimaryAttack_weapon_flesh_mgl
global function OnProjectileCollision_weapon_flesh_mgl

#if SERVER
global function OnWeaponNpcPrimaryAttack_weapon_flesh_mgl
#endif

void function MpWeaponFleshMGL_Init()
{
#if SERVER
	// burnmod blacklist
	// has been fixed by better burn_mod_mgl, no need to disable anymore
	//ModdedBurnMods_AddDisabledMod( "flesh_magnetic" )
	//ModdedBurnMods_AddDisabledMod( "magnetic_rollers" )
#endif
}

void function OnWeaponPrimaryAttack_weapon_flesh_mgl( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity player = weapon.GetWeaponOwner()

	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
	//vector bulletVec = ApplyVectorSpread( attackParams.dir, player.GetAttackSpreadAngle() * 2.0 )
	//attackParams.dir = bulletVec

	if ( IsServer() || weapon.ShouldPredictProjectiles() )
		FireGrenade( weapon, attackParams )
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_weapon_flesh_mgl( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
	FireGrenade( weapon, attackParams, true )
}
#endif // #if SERVER

void function FireGrenade( entity weapon, WeaponPrimaryAttackParams attackParams, bool isNPCFiring = false )
{
    // mostly keep same as mgl does, in case we don't desync
	vector angularVelocity = Vector( RandomFloatRange( -1200, 1200 ), 100, 0 )
	entity nade = weapon.FireWeaponGrenade( attackParams.pos, attackParams.dir, angularVelocity, 0, damageTypes.explosive, damageTypes.explosive, !isNPCFiring, true, false )

	if ( nade )
	{
		entity weaponOwner = weapon.GetWeaponOwner()
		#if SERVER
			EmitSoundOnEntity( nade, "Weapon_MGL_Grenade_Emitter" )
			// will set proj.onlyAllowSmartPistolDamage = true, which makes us cannot destroy it by normal weapons
			Grenade_Init( nade, weapon )
		#endif

		if( weapon.HasMod( "nessie_mgl" ) ) // nessie mgl support
			nade.SetModel( $"models/domestic/nessy_doll.mdl" )

		#if SERVER
			GiveProjectileFakeMagnetic( nade ) // modified function in modutility/_fake_magnetic_ammo.gnut
		#endif

		//thread MagneticFlight( nade, MGL_MAGNETIC_FORCE )
	}
}

void function OnProjectileCollision_weapon_flesh_mgl( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
    if ( !IsValid( hitEnt ) )
		return

    array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior

	if( mods.contains( "magnetic_rollers" ) )
	{
#if SERVER
		if( projectile.proj.projectileBounceCount == 0 )
		{
			if( hitEnt.IsNPC() || hitEnt.IsPlayer() )
				return
			GiveProjectileFakeMagnetic( projectile, 95 )
			projectile.proj.projectileBounceCount++
			return
		}
		projectile.proj.projectileBounceCount++
#endif
	}

    if ( ( hitEnt.IsNPC() || hitEnt.IsPlayer() ) && ( FriendlyFire_IsEnabled() || hitEnt.GetTeam() != projectile.GetTeam() ) )
    {
#if SERVER
        // visual fix for client hitting near target
        FixImpactEffectForProjectileAtPosition( projectile, pos ) // shared from _unpredicted_impact_fix.gnut
#endif
        projectile.ExplodeForCollisionCallback( normal )
        return
    }

}