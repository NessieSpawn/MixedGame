global function MpWeaponNessiePistol_Init

global function OnWeaponPrimaryAttack_weapon_nessie_pistol

global function OnProjectileCollision_weapon_nessie_pistol
global function OnProjectileIgnite_weapon_nessie_pistol

#if SERVER
global function OnWeaponNPCPrimaryAttack_weapon_nessie_pistol
#endif

const asset NESSIE_MODEL = $"models/domestic/nessy_doll.mdl"
const asset NESSIE_DRONE_FX = $"P_xo_battery"

const float NESSIE_DRONE_LIFETIME = 12
const float NESSIE_GRUNT_LIFETIME = 15

const float NESSIE_PROP_LIFETIME = 10
const float NESSIE_PROP_MAXCOUNT = 512 // pretty scary

struct
{
	array<entity> nessieDolls
} file

void function MpWeaponNessiePistol_Init()
{
	#if SERVER
		NessiePrecache()

		// burnmod replace
		ModdedBurnMods_AddReplacementBurnMod( "apex_nessie", "burn_mod_apex_nessie" )
		ModdedBurnMods_AddDisabledMod( "nessie_doll_launcher" )
	#endif
}

#if SERVER
void function NessiePrecache()
{
	PrecacheModel( $"models/domestic/nessy_doll.mdl" )
	PrecacheParticleSystem( $"P_xo_battery" )
}
#endif

var function OnWeaponPrimaryAttack_weapon_nessie_pistol( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	if ( weapon.HasMod( "nessie_doll_launcher" ) )
		return FireNessieProp( weapon, attackParams )

	return FireNessieGrenade( weapon, attackParams, false )
}

// this is't actually a weapon, it fires a prop
var function FireNessieProp( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	entity owner = weapon.GetWeaponOwner()
#if CLIENT
	weapon.EmitWeaponSound_1p3p( "Weapon_SmartPistol_FireSuppressed_1P", "" )
	weapon.EmitWeaponSound_1p3p( "weapon_shotgunpistol_fire_suppressed_1p", "" )
#elseif SERVER
	// funny firing sound
	if ( owner.IsPlayer() )
	{
		//EmitSoundOnEntityOnlyToPlayer( weapon, owner, "Weapon_SmartPistol_FireSuppressed_1P" )
		EmitSoundOnEntityExceptToPlayer( weapon, owner, "Weapon_SmartPistol_FireSuppressed_3P" )
		EmitSoundOnEntityExceptToPlayer( weapon, owner, "weapon_shotgunpistol_fire_suppressed_3p" )
	}
	else
	{
		EmitSoundOnEntity( weapon, "Weapon_SmartPistol_FireSuppressed_3P" )
		EmitSoundOnEntity( weapon, "weapon_shotgunpistol_fire_suppressed_3p" )
	}
#endif // SERVER

#if SERVER
	entity nessie = CreateEntity( "prop_dynamic" )
	nessie.SetValueForModelKey( NESSIE_MODEL )
	DispatchSpawn( nessie )

	// attach nessie to physics
	vector origin = owner.EyePosition() + owner.GetViewVector() * 9.5
	vector angles = < 0, owner.EyeAngles().y, 0 >
	entity physics = CreatePropPhysics( $"models/dev/empty_physics.mdl", origin, angles )
	// huh
	// can't be used due to no attachments
	/*
	entity physics = CreatePropPhysics( $"models/gibs/human_gibs.mdl", origin, angles )
	physics.Hide()
	SetForceDrawWhileParented( nessie, true )
	*/

	// attach nessie
	nessie.SetParent( physics, "origin" )
	//nessie.SetParent( physics, "REF" )

	nessie.SetAngles( < 0, 90, 0 > ) // rotate
	nessie.SetOrigin( < 0, 0, -3 > ) // offset

	// throw forward
	physics.SetVelocity( owner.GetViewVector() * 800 + owner.GetVelocity() * 1.0 ) // was *1.5

	if ( weapon.HasMod( "rgb_nessie" ) )
		thread RGB_Highlight( nessie, true )

	float lifeTime = NESSIE_PROP_LIFETIME
	if ( weapon.HasMod( "infinite_duration_nessie" ) )
		lifeTime = -1 // infinite
	bool dissolve = weapon.HasMod( "rgb_nessie" )
	thread NessiePhysicsLifeTimeCheck( physics, nessie, lifeTime, dissolve )

	file.nessieDolls.append( nessie )
	NessieLimitThink()
#endif

	return 1
}

#if SERVER
void function NessiePhysicsLifeTimeCheck( entity physics, entity nessie, float maxLifeTime, bool dissolve )
{
	nessie.EndSignal( "OnDestroy" )
	physics.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( nessie, physics )
		{
			if( IsValid( nessie ) )
				nessie.Destroy()
			if( IsValid( physics ) )
				physics.Destroy()
		}
	)

	if ( maxLifeTime > 0 )
	{
		wait maxLifeTime
		//file.nessieDolls.removebyvalue( nessie ) // already dissolving, no longer consider as living thing
		if ( dissolve )
			nessie.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
		else
		{
			// function defined in prop_utility.gnut, taken from r5s3
			thread PROTO_FadeModelAlphaOverTime( nessie, 1.0, 255, 0 )
		}
		wait 2.0
	}
	else
		WaitForever()
}

void function NessieLimitThink()
{
	if( file.nessieDolls.len() > NESSIE_PROP_MAXCOUNT )
	{
		if( IsValid( file.nessieDolls[0] ) )
			file.nessieDolls[0].Destroy()
		file.nessieDolls.remove(0)
	}
}
#endif

var function FireNessieGrenade( entity weapon, WeaponPrimaryAttackParams attackParams, bool isNPCFiring = false )
{
	// prediction checks
	#if CLIENT
        if ( !weapon.ShouldPredictProjectiles() )
            return 1
    #endif // #if CLIENT

    bool shouldCreateProjectile = false
	if ( IsServer() || weapon.ShouldPredictProjectiles() )
		shouldCreateProjectile = true

	if ( isNPCFiring )
		shouldCreateProjectile = false
	//

	vector angularVelocity = Vector( RandomFloatRange( -1200, 1200 ), 100, 0 )

	int damageType = DF_RAGDOLL | DF_EXPLOSION

	entity nade = FireWeaponGrenade_RecordData( weapon, attackParams.pos, attackParams.dir, angularVelocity, 0.0 , damageType, damageType, shouldCreateProjectile, true, false )

	if ( nade )
	{
		#if SERVER
			Grenade_Init( nade, weapon )
		#else
			entity weaponOwner = weapon.GetWeaponOwner()
			SetTeam( nade, weaponOwner.GetTeam() )
		#endif

		nade.SetModel( NESSIE_MODEL )
		return 1
	}
}

void function OnProjectileCollision_weapon_nessie_pistol( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	entity player = projectile.GetOwner()
	if ( hitEnt == player )
		return

	if ( projectile.GrenadeHasIgnited() )
		return

	projectile.GrenadeIgnite() // so the grenade can bounce without triggering this multiple times if we want!
	projectile.SetDoesExplode( false )
}

void function OnProjectileIgnite_weapon_nessie_pistol( entity projectile )
{
	#if SERVER
		array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior

		if ( mods.contains( "nessie_drone_spawn" ) )
			GrenadesToDrones( projectile )
		else if ( mods.contains( "nessie_grunt_spawn" ) )
			GrenadesToGrunts( projectile )
	#endif
}

#if SERVER
var function OnWeaponNPCPrimaryAttack_weapon_nessie_pistol( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	return FireNessieGrenade( weapon, attackParams, true )
}


// utility
entity function CreateNessieForEnt( entity targetEnt, string attachment, vector angles = < 0, -90, 0 > )
{
	entity nessie = CreateEntity( "prop_dynamic" )
	nessie.SetModel( NESSIE_MODEL )
	nessie.SetParent( targetEnt, attachment )
	nessie.SetAngles( angles )

	nessie.SetTakeDamageType( DAMAGE_YES )
	nessie.kv.solid = SOLID_HITBOXES
	nessie.kv.CollisionGroup = TRACE_COLLISION_GROUP_BLOCK_WEAPONS

	DispatchSpawn( nessie )
	nessie.kv.fadedist = 65535 // prevent it from fading out

	nessie.SetMaxHealth( targetEnt.GetMaxHealth() )
	nessie.SetHealth( nessie.GetMaxHealth() )

	nessie.SetOwner( targetEnt ) // hopefully this can avoid them block it's owner shoot
	SetForceDrawWhileParented( nessie, true )

	AddEntityCallback_OnDamaged( nessie, OnNessieDamaged ) // unfortunatelly nessie's actual hitboxes are scaled with their owner...

	// target settings
	targetEnt.SetInvulnerable() // we clean it when nessie takes damage!
	targetEnt.NotSolid()
	//targetEnt.Hide() // will make target unable to show their title
	targetEnt.kv.CollisionGroup = 0
	SetObjectCanBeMeleed( targetEnt, false )

	return nessie
}

void function OnNessieDamaged( entity nessie, var damageInfo )
{
	// re-direct damage to it's owner
	entity victim = nessie.GetOwner()

	//print( "nessie damaged! owner is: " + string( victim ) )
	if ( IsValid( victim ) )
	{
		victim.ClearInvulnerable() // clear once, they'll take damage

		entity attacker = DamageInfo_GetAttacker( damageInfo )
		if ( attacker.IsProjectile() ) // anti-crash
			attacker = null
		entity inflictor = DamageInfo_GetInflictor( damageInfo )
		victim.TakeDamage(
			DamageInfo_GetDamage( damageInfo ),
			attacker, 
			inflictor, 
			{ // damage table
				weapon = DamageInfo_GetWeapon( damageInfo ),
				origin = DamageInfo_GetDamagePosition( damageInfo ), 
				force = DamageInfo_GetDamageForce( damageInfo ), 
				scriptType = DamageInfo_GetCustomDamageType( damageInfo ), 
				damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )
			}
		)

		victim.SetInvulnerable()

		// player hitmarker, no need since TakeDamage() will do it
		/*
		entity attacker = DamageInfo_GetAttacker( damageInfo )
		if ( IsValid( attacker ) && attacker.IsPlayer() )
		{
			attacker.NotifyDidDamage( 
				victim, 
				DamageInfo_GetHitBox( damageInfo ), 
				DamageInfo_GetDamagePosition( damageInfo ), 
				DamageInfo_GetCustomDamageType( damageInfo ), 
				DamageInfo_GetDamage( damageInfo ), 
				DamageInfo_GetDamageFlags( damageInfo ), 
				DamageInfo_GetHitGroup( damageInfo ), 
				DamageInfo_GetWeapon( damageInfo ), 
				DamageInfo_GetDistFromAttackOrigin( damageInfo ) 
			)
		}
		*/
	}

	DamageInfo_SetDamage( damageInfo, 0 )
}

void function NessieLifetime( entity drone, entity nessie, float delay )
{
	drone.EndSignal( "OnDestroy" )
	OnThreadEnd
	(
		function(): ( drone, nessie )
		{
			if( IsValid( nessie ) )
			{
				nessie.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
			}
			if( IsValid( drone ) )
			{
				// fake explode effect
				PlayFX( $"P_plasma_exp_SM", drone.GetOrigin(), drone.GetAngles() )
				EmitSoundAtPosition( drone.GetTeam(), drone.GetOrigin(), "explo_plasma_small" )
				drone.Destroy()
			}
		}
	)
	
	wait delay
}

void function AfterTimeDissolveNessie( entity drone, entity nessie, entity fx, float delay )
{
	wait delay
	if( IsValid(drone) )
		drone.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
	if( IsValid(nessie) )
		nessie.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
	if( IsValid(fx) )
		EffectStop( fx )

}
//

// nessie drone
array<string> NESSIE_DRONE_TYPES = 
[ 
	"npc_drone_beam", 
	"npc_drone_rocket", 
	"npc_drone_plasma" 
]

void function GrenadesToDrones( entity nade )
{
	entity owner = nade.GetThrower()
	vector pos = nade.GetOrigin() + Vector(0,0,10)
	vector angs = nade.GetAngles()
	int team = nade.GetTeam()

	string dronename = NESSIE_DRONE_TYPES[ RandomInt( NESSIE_DRONE_TYPES.len() ) ]
	entity drone = CreateNPC( "npc_drone", team , pos, angs )
	SetSpawnOption_AISettings( drone, dronename )
	drone.kv.modelscale = 0.01
	//drone.kv.modelscale = 0.5
	//drone.Hide() // this one can't show a title!
	DispatchSpawn( drone )
	drone.SetTitle( "小尼斯水怪" )
	drone.SetMaxHealth( 50 )
	drone.SetHealth( drone.GetMaxHealth() )
	//drone.SetOwner( owner )
	drone.SetBossPlayer( owner )
	//NPCFollowsPlayer( drone, owner ) // weird one

	// attach a nessie
	entity nessie = CreateNessieForEnt( drone, "CHESTFOCUS" )
	
	thread DisableNessieDroneSound( drone )
	thread NessieLifetime( drone, nessie, NESSIE_DRONE_LIFETIME )
	//thread AfterTimeDissolveNessie( drone, nessie, fx, NESSIE_DRONE_LIFETIME )
}

void function DisableNessieDroneSound( entity drone ) // annoying sound!
{
	drone.EndSignal( "OnDestroy" )
	
	WaitFrame()
	StopSoundOnEntity( drone, "Drone_Mvmt_Hover_Hero" )
	StopSoundOnEntity( drone, "Drone_Mvmt_Hover" )
	// enemy sound still needs to be played, I think?
	// modified function in _utility.gnut
	EmitSoundOnEntityExceptToTeam( drone, "Drone_Mvmt_Hover_Hero", drone.GetTeam() )
}

// nessie grunts(actually spectres since they can scale model)
array<string> NESSIE_GRUNT_WEAPONS =
[
	//"mp_weapon_epg", // barrel too close to ground!
	//"mp_weapon_mgl",
	"mp_weapon_autopistol",
]

void function GrenadesToGrunts( entity nade )
{
	entity owner = nade.GetThrower()
	vector pos = nade.GetOrigin()
	vector angs = < 0, nade.GetAngles().y, 0 > // only needs angles.y for ground units!
	int team = nade.GetTeam()

	string gruntWeapon = NESSIE_GRUNT_WEAPONS[ RandomInt( NESSIE_GRUNT_WEAPONS.len() ) ]
	entity grunt = CreateNPC( "npc_spectre", team , pos, angs )
	SetSpawnOption_Weapon( grunt, gruntWeapon )
	grunt.kv.modelscale = 0.01
	//grunt.kv.modelscale = 0.5
	//grunt.Hide() // this one can't show a title!
	DispatchSpawn( grunt )

	// better origin for grounded units
	vector ornull clampedPos = NavMesh_ClampPointForAIWithExtents( pos, grunt, < 256, 256, 256 > )
	if ( clampedPos != null )
	{
		expect vector( clampedPos )
		grunt.SetOrigin( clampedPos )
	}

	// remove useless behaviors
	grunt.DisableNPCFlag( NPC_USE_SHOOTING_COVER | NPC_CROUCH_COMBAT )

	grunt.SetTitle( "小尼斯水怪" )
	grunt.SetMaxHealth( 1 )
	grunt.SetHealth( grunt.GetMaxHealth() )
	//grunt.SetOwner( owner )
	grunt.SetBossPlayer( owner )
	//NPCFollowsPlayer( grunt, owner ) // weird one

	// attach a nessie
	entity nessie = CreateNessieForEnt( grunt, "HEADSHOT", < 0, -90, 5 > )
	
	thread NessieLifetime( grunt, nessie, NESSIE_GRUNT_LIFETIME )
	//thread AfterTimeDissolveNessie( drone, nessie, fx, NESSIE_GRUNT_LIFETIME )
}
#endif