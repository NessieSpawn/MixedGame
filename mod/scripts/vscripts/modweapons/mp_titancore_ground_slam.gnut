global function OnWeaponActivate_titancore_ground_slam
global function MpTitanWeaponGoundSlam_Init

global function OnAbilityCharge_GoundSlam
global function OnAbilityChargeEnd_GoundSlam

global function OnWeaponPrimaryAttack_titancore_ground_slam

// dashing
const float TITAN_GROUND_SLAM_DASH_VELOCITY = 800
const float TITAN_GROUND_SLAM_DASH_TIME = 0.8
const int TITAN_GROUND_SLAM_DAMAGE = 500
const int TITAN_GROUND_SLAM_DAMAGE_HEAVYARMOR = 3750
const int TITAN_GROUND_SLAM_DAMAGE_FLAGS = DF_GIB | DF_BYPASS_SHIELD
const float TITAN_GROUND_SLAM_INNER_RADIUS = 320
const float TITAN_GROUND_SLAM_RADIUS = 425

const float TITAN_HOVER_SLAM_VERTICAL_VEL = 750

void function MpTitanWeaponGoundSlam_Init()
{
	#if SERVER
        RegisterSignal( "GroundSlamChargeBegin" )

        // adding a new damageSourceId. it's gonna transfer to client automatically
	    RegisterWeaponDamageSource( "mp_titancore_ground_slam", "Slam Core" )
		AddDamageCallbackSourceID( eDamageSourceId.mp_titancore_ground_slam, GroundSlam_DamagedPlayerOrNPC )
	#endif
}

void function OnWeaponActivate_titancore_ground_slam( entity weapon )
{
    if ( weapon.HasMod( "hover_slam" ) )
        thread HoverSlamThink( weapon )
    else
    {
        weapon.EmitWeaponSound_1p3p( "flamewave_start_1p", "flamewave_start_3p" ) // do the sound event here
        
	    OnAbilityCharge_TitanCore( weapon ) // core start

        thread GroundSlamThink( weapon )
    }
}

void function GroundSlamThink( entity weapon )
{
    entity owner = weapon.GetWeaponOwner()
    if( !owner.IsPlayer() )
        return

#if SERVER
    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "TitanEjectionStarted" )

    owner.SetTitanDisembarkEnabled( false )
    // distroy mobile bubble shield
    owner.Signal( "KillBruteShield" )
    
    array<entity> fx

	OnThreadEnd(
		function () : ( owner, fx )
		{
			foreach ( effect in fx )
			{
				if ( !IsValid( effect ) )
					continue

				effect.ClearParent()
				effect.Destroy()
			}
		}
	)

    if( owner.LookupAttachment( "thrust" ) > 0 )
    {
        entity jetFX = PlayFXOnEntity( $"P_xo_jet_fly_small", owner, "thrust" )
        jetFX.SetOwner( owner )
        jetFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY
        fx.append( jetFX )
    }
    if( owner.LookupAttachment( "vent_left" ) > 0 ) // was vent_left_back, this is better
    {
        // $"P_team_jet_hover_HLD" is good enough for both team players and owner themself
        entity jetFX = PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_left" )
        jetFX.SetOwner( owner )
        jetFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY
        fx.append( jetFX )
    }
    if( owner.LookupAttachment( "vent_right" ) > 0 ) // was vent_right_back, this is better
    {
        entity jetFX = PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_right" )
        jetFX.SetOwner( owner )
        jetFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY
        fx.append( jetFX )
    }

    EmitSoundOnEntityOnlyToPlayer( owner, owner, "titan_flight_liftoff_1p" )
    EmitSoundOnEntityExceptToPlayer( owner, owner, "titan_flight_liftoff_3p" )

    // start dash
    thread GroundSlamDash( owner )
    wait TITAN_GROUND_SLAM_DASH_TIME // wait for dash's max duration

    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.Signal( "GroundSlamChargeBegin" )
#endif
}

#if SERVER
void function GroundSlamDash( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "TitanEjectionStarted" )

    float dashEndTime = Time() + TITAN_GROUND_SLAM_DASH_TIME
    // allow dodging to cancel dash
	float lastDodgePower = player.GetDodgePower()
    bool dodgeCancelled = false

    // start dash
    while ( Time() <= dashEndTime )
    {
        vector dashVelocity = player.GetViewVector() * TITAN_GROUND_SLAM_DASH_VELOCITY
        dashVelocity.z = player.GetVelocity().z // don't change
        player.SetVelocity( dashVelocity ) // dash to target pos
        WaitFrame( true ) // ignore script fps limit!

        // at least let the dash last 1 frame, or it will seem weird
		if ( player.GetDodgePower() < lastDodgePower ) // consider this means player dodged, cancel the dash melee
		{
            dodgeCancelled = true // mark as we've cancelled dodge
        	break
        }
		lastDodgePower = player.GetDodgePower()
    }

    // stop player, dash down to ground
    if ( !dodgeCancelled )
        player.SetVelocity( < 0, 0, -270 > )
}
#endif

// WIP: add a indicator, jump and indicate to certain location before damaging, same as apex newcastle does
void function HoverSlamThink( entity weapon )
{
    entity owner = weapon.GetWeaponOwner()
    if( !owner.IsPlayer() )
        return

#if SERVER
    //thread TryFixHoverSlamClientSFX( weapon, owner ) // never sending too much entity signals. hoverSlam is recommanded with client script installed
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "TitanEjectionStarted" )

    owner.SetTitanDisembarkEnabled( false )
    owner.SetPredictionEnabled( false )
    owner.Server_TurnDodgeDisabledOn()
    HolsterAndDisableWeapons( owner )
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.Signal( "KillBruteShield" )
    
    array<entity> fx

	OnThreadEnd(
		function () : ( owner, fx )
		{
            if( IsValid( owner ) )
            {
                DeployAndEnableWeapons( owner )
                // defensive clean up
                owner.SetPredictionEnabled( true )
                owner.Server_TurnDodgeDisabledOff()
            }
			foreach ( effect in fx )
			{
				if ( !IsValid( effect ) )
					continue

				effect.ClearParent()
				effect.Destroy()
			}
		}
	)

    // should change attachment for hover ones...
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_small", owner, "thrust" ) )
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_left" ) )
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_right" ) )

    PlayImpactFXTable( owner.GetOrigin(), owner, "droppod_impact", SF_ENVEXPLOSION_INCLUDE_ENTITIES )
    EmitSoundOnEntityOnlyToPlayer( owner, owner, "titan_flight_liftoff_1p" )
    EmitSoundOnEntityExceptToPlayer( owner, owner, "titan_flight_liftoff_3p" )
    vector baseVelocity = owner.GetViewVector() * BERSERKER_DASH_VELOCITY
    baseVelocity.z = TITAN_HOVER_SLAM_VERTICAL_VEL
    owner.SetVelocity( baseVelocity )
    wait BERSERKER_DASH_TIME
    owner.SetVelocity( < 0, 0, -170 > ) // drop player down to slam
    while( true ) // wait until player is close to ground
    {
        WaitFrame()
        // keep hostering weapon until owner is near the ground( ~300hu ),
        TraceResults traceresult = TraceLine( owner.GetOrigin(), owner.GetOrigin() - < 0, 0, 300 >, owner, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
        if( IsValid( traceresult.hitEnt ) )
            break
    }
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.Signal( "GroundSlamChargeBegin" )
    EmitSoundOnEntityOnlyToPlayer( owner, owner, "titan_flight_descent_1p" )
    EmitSoundOnEntityExceptToPlayer( owner, owner, "titan_flight_descent_3p" )
    owner.SetActiveWeaponByName( "mp_titancore_flame_wave" )

    owner.SetPredictionEnabled( true )
    owner.Server_TurnDodgeDisabledOff()
	OnAbilityCharge_TitanCore( weapon )
#endif
}

bool function OnAbilityCharge_GoundSlam( entity weapon )
{
#if SERVER
    entity owner = weapon.GetWeaponOwner()
    float chargeTime = weapon.GetWeaponSettingFloat( eWeaponVar.charge_time )
    entity soul = owner.GetTitanSoul()
    if ( soul == null )
        soul = owner
    StatusEffect_AddTimed( soul, eStatusEffect.damageAmpFXOnly, 1.0, chargeTime, 0 )
    StatusEffect_AddTimed( soul, eStatusEffect.damage_reduction, BERSERKER_INCOMING_DAMAGE_DAMPEN, chargeTime, 0 )
#endif

	return true
}

void function OnAbilityChargeEnd_GoundSlam( entity weapon )
{
	#if SERVER
		entity owner = weapon.GetWeaponOwner()
		if ( owner.IsPlayer() )
			owner.SetTitanDisembarkEnabled( true )
		OnAbilityChargeEnd_TitanCore( weapon )
	#endif // #if SERVER
}

var function OnWeaponPrimaryAttack_titancore_ground_slam( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	OnAbilityStart_TitanCore( weapon )

#if SERVER
    entity weaponOwner = weapon.GetWeaponOwner()
    entity groundEntity = weaponOwner.GetGroundEntity()
    vector damageOrigin = weaponOwner.GetOrigin()
	if ( groundEntity != null && groundEntity.HasPusherRootParent() )
        damageOrigin = groundEntity.GetOrigin()
    PlayImpactFXTable( damageOrigin, weaponOwner, "titan_exp_ground", SF_ENVEXPLOSION_INCLUDE_ENTITIES )
    PlayFX( FLIGHT_CORE_IMPACT_FX, weaponOwner.GetOrigin() )
    PlayFX( TURBO_WARP_FX, damageOrigin, <0,90,0> )
    CreateShake( damageOrigin, 16, 150, 2, 1500 )
    CreatePhysExplosion( damageOrigin + < 0,0,10 >, 512, PHYS_EXPLOSION_LARGE, 15 )
    //PlayHotdropImpactFX( weaponOwner ) // this one also trigger a titanfall damagedef????
    EmitDifferentSoundsAtPositionForPlayerAndWorld( "core_ability_land_1p", "core_ability_land_3p", damageOrigin, weaponOwner, weaponOwner.GetTeam())
    for( int i = 0; i < 3; i ++ ) // really large sound!
	    EmitDifferentSoundsAtPositionForPlayerAndWorld( "Titan_1P_Warpfall_WarpToLanding_fast", "Titan_3P_Warpfall_WarpToLanding_fast", damageOrigin, weaponOwner, weaponOwner.GetTeam())
    RadiusDamage(
        damageOrigin + < 0,0,10 >,						    // center
        weaponOwner,		                                // attacker
        weaponOwner,									    // inflictor
        TITAN_GROUND_SLAM_DAMAGE,		                    // damage
        TITAN_GROUND_SLAM_DAMAGE_HEAVYARMOR,			    // damageHeavyArmor
        TITAN_GROUND_SLAM_INNER_RADIUS,		                // innerRadius
        TITAN_GROUND_SLAM_RADIUS,				            // outerRadius
        SF_ENVEXPLOSION_NO_DAMAGEOWNER,			            // flags
        0,										            // distanceFromAttacker
        30000,				                                // explosionForce
        TITAN_GROUND_SLAM_DAMAGE_FLAGS,                     // scriptDamageFlags
        eDamageSourceId.mp_titancore_ground_slam )          //damageSourceID

	OnAbilityEnd_TitanCore( weapon )
#endif

	return 1
}

#if SERVER
// keep trying stopping SFXs to avoid client receiving too much noise
void function TryFixHoverSlamClientSFX( entity weapon, entity owner )
{
    weapon.EndSignal( "OnDestroy" )
    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "GroundSlamChargeBegin" ) // real sound begins

    while( true )
    {
        StopSoundOnEntity( weapon, "flamewave_start_1p" )
        StopSoundOnEntity( owner, "flamewave_start_1p" )
        WaitFrame()
    }
}

const FX_EMP_BODY_HUMAN			= $"P_emp_body_human"
const FX_EMP_BODY_TITAN			= $"P_emp_body_titan"

void function GroundSlam_DamagedPlayerOrNPC( entity ent, var damageInfo )
{
    if ( !IsValid( ent ) )
		return
	
    // removed emp screen effect
    //VanguardEnergySiphon_DamagedPlayerOrNPC( ent, damageInfo )

    entity attacker = DamageInfo_GetAttacker( damageInfo )
    if ( ent.IsPlayer() ) // if player took groundslam damage, we do a fake arc wave damaged effect
        ent.TakeDamage( 1, attacker, attacker, { damageSourceId = eDamageSourceId.mp_titanweapon_arc_wave } )
}
#endif