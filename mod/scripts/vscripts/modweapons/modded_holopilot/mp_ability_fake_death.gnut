untyped // for us using ent.s.silentDeath
global function MpAbilityFakeDeath_Init

global function OnAbilityStart_FakeDeath

#if SERVER
global function CreateFakeDeathObitForPlayerFromDamageInfo
global function CreateFakeDeathObitForPlayerByDamageSourceID

const float FAKE_DEATH_DAMAGE_REDUCTION = 0.5
const float FAKE_DEATH_ACTIVATE_PERIOD = 10
const float FAKE_DEATH_VANISH_DURATION = 1.0
const float FAKE_DEATH_INVULNERABLE_DURATON = 0.3 // lower than FAKE_DEATH_VANISH_DURATION * 0.5
const float FAKE_DEATH_CLOAK_DURATION = 2.5
const float FAKE_DEATH_DAMAGE_REDUCTION_DURATION = 1.0 // FAKE_DEATH_DAMAGE_REDUCTION_DURATION + FAKE_DEATH_INVULNERABLE_DURATON should be lower than FAKE_DEATH_DISABLE_WEAPON_DURATION
const float FAKE_DEATH_BOOST_SEVERITY = 0.6 // should set higher for safe escape
const float FAKE_DEATH_SPEED_BOOST_DURATION = 1.0
const float FAKE_DEATH_DISABLE_WEAPON_DURATION = 1.6 // longer than vanish time
#endif

void function MpAbilityFakeDeath_Init()
{
#if SERVER
	RegisterSignal( "FakeDeathActivate" )
	RegisterSignal( "StartFakeDeathThink" )
	RegisterSignal( "EndFakeDeathThink" )
#endif
}

var function OnAbilityStart_FakeDeath( entity weapon, WeaponPrimaryAttackParams attackParams )
{
#if SERVER
	entity weaponOwner = weapon.GetWeaponOwner()
	if( !weaponOwner.IsPlayer() )
		return 0 
    thread FakeDeathThink( weaponOwner )
	return weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
#endif
}

#if SERVER
void function FakeDeathThink( entity player )
{
	player.Signal( "StartFakeDeathThink" )
    player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "StartFakeDeathThink" )
	player.EndSignal( "FakeDeathActivate" )
	player.EndSignal( "EndFakeDeathThink" )
	int storedSkin = player.GetSkin()
	int storedCamo = player.GetCamo()
	OnThreadEnd(
		function(): ( player, storedSkin, storedCamo )
		{
			if( IsValid( player ) )
			{
				SendHudMessage( player, "假死已失效! ", -1, -0.3, 255, 255, 100, 255, 0, 2, 0 )
				EmitSoundOnEntityOnlyToPlayer( player, player, "holopilot_end_1P" )
				StopSoundOnEntity( player, "holopilot_loop" )
				RemoveEntityCallback_OnDamaged( player, OnFakeDeathPlayerDamaged )
				player.SetSkin( storedSkin )
				player.SetCamo( storedCamo )
			}
		}
	)
	SendHudMessage( player, "激活假死: \n下一次被击中所受伤害大幅减少, 并且留下一具假的尸体", -1, -0.2, 255, 255, 100, 255, 0, 6, 0 )
	EmitSoundOnEntityToTeam( player, "holopilot_loop", player.GetTeam() )
	player.SetSkin( 0 ) // since npc_pilot_elite aren't changed skin
	player.SetCamo( 0 )
	AddEntityCallback_OnDamaged( player, OnFakeDeathPlayerDamaged )
	wait FAKE_DEATH_ACTIVATE_PERIOD
}

void function OnFakeDeathPlayerDamaged( entity player, var damageInfo )
{
	FakeDeathDamageReduction( player, damageInfo )
	DamageInfo_AddCustomDamageType( damageInfo, DF_KILLSHOT )
	CreateFakeDeathObitForPlayerFromDamageInfo( player, damageInfo )
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( IsValid( attacker ) && attacker != player )
	{
		if( attacker.IsPlayer() )
			AddPlayerScore( attacker, "KillPilot", player ) // show a "pilot kill" medal and killfeed
	}

	player.Signal( "FakeDeathActivate" )
	thread PlayerStartFakeDeath( player, damageInfo ) 
}

void function PlayerStartFakeDeath( entity player, var damageInfo )
{
	// defensive fix, maybe not useful
	if( IsInstantDeath( damageInfo ) || DamageInfo_GetForceKill( damageInfo ) || player.IsTitan() )	
		return
	CreateFakeDeathFakeCorpse( player, damageInfo ) // create corpse first
	DamageInfo_AddCustomDamageType( damageInfo, DF_KILLSHOT ) // kill flash
	// speed boost, stim effect may better be removed since it also amps health regen
	StatusEffect_AddTimed( player, eStatusEffect.speed_boost, FAKE_DEATH_BOOST_SEVERITY, FAKE_DEATH_SPEED_BOOST_DURATION, 0 )
	StatusEffect_AddTimed( player, eStatusEffect.stim_visual_effect, 1.0, FAKE_DEATH_SPEED_BOOST_DURATION, FAKE_DEATH_SPEED_BOOST_DURATION )
	thread FakeDeathInvulnerableThink( player )
	thread FakeDeathDamageReductionThink( player )
	thread FakeDeathWeaponDisableThink( player )
	
	// visual think start after fakeBody dies
	thread FakeDeathVisualThink( player )
}

void function CreateFakeDeathFakeCorpse( entity player,var damageInfo )
{
	entity activeWeapon = player.GetActiveWeapon()
	string weaponName = "mp_weapon_rspn101_og"
	array<string> weaponMods = ["extended_ammo", "pas_fast_reload", "hcog"]
	if( !IsValid( activeWeapon ) || !player.GetMainWeapons().contains( activeWeapon ) )
		activeWeapon = player.GetMainWeapons()[0]
	if( IsValid( activeWeapon ) )
	{
		weaponName = activeWeapon.GetWeaponClassName()
		weaponMods = activeWeapon.GetMods()
	}
	//entity weapon = CreateWeaponEntityByNameWithPhysics( weaponName, player.GetOrigin() + < 0,0,20 >, player.GetAngles() )
	//weapon.SetMods( weaponMods )

	//entity fakeBody = CreateNPC( "npc_pilot_elite", player.GetTeam(), player.GetOrigin(), player.GetAngles() )
	string npcClass = "npc_soldier"
	if ( player.IsMechanical() )
		npcClass = "npc_spectre"
	entity fakeBody = CreateNPC( npcClass, player.GetTeam(), player.GetOrigin(), player.GetAngles() )
	DispatchSpawn( fakeBody )

	TakeAllWeapons( fakeBody )
	fakeBody.GiveWeapon( weaponName, weaponMods )
	fakeBody.SetActiveWeaponByName( weaponName )

	fakeBody.s.silentDeath <- true
	fakeBody.SetModel( player.GetModelName() )
	fakeBody.SetValueForModelKey( player.GetModelName() )
	// not using DamageInfo_GetAttacker( damageInfo ) cause extra_spanwer has given killing npcPilots a scoreEvent
	fakeBody.Die( null, null, { forceKill = true, scriptDamageType = DamageInfo_GetCustomDamageType( damageInfo ), damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo ) } )
}

void function FakeDeathDamageReductionThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				RemoveEntityCallback_OnDamaged( player, FakeDeathDamageReduction )
		}
	)

	AddEntityCallback_OnDamaged( player, FakeDeathDamageReduction )
	wait FAKE_DEATH_DAMAGE_REDUCTION_DURATION + FAKE_DEATH_INVULNERABLE_DURATON
}

void function FakeDeathDamageReduction( entity player, var damageInfo )
{
	int damageAmout = int( DamageInfo_GetDamage( damageInfo ) )
	float damageScale = 1 - FAKE_DEATH_DAMAGE_REDUCTION
	int actualDamage = int( damageAmout * damageScale )
	//print( actualDamage )

	DamageInfo_SetDamage( damageInfo, actualDamage )
}

void function FakeDeathInvulnerableThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				player.ClearInvulnerable()
		}
	)
	player.SetInvulnerable()
	wait FAKE_DEATH_INVULNERABLE_DURATON
}

void function FakeDeathVisualThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
			{
				StopSoundOnEntity( player, "cloak_sustain_loop_1P" )
				player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
				player.SetNameVisibleToEnemy( true )
				DisableCloak( player )
			}
		}
	)
	thread CloakWarningtoEndSound( player )
	player.kv.VisibilityFlags = 0
	player.SetNameVisibleToEnemy( false )
	player.SetCloakDuration( CLOAK_FADE_IN, -1, CLOAK_FADE_OUT )
	//Battery_StopFXAndHideIconForPlayer( player )
	EmitSoundOnEntityOnlyToPlayer( player, player, "cloak_on_1P" )
	EmitSoundOnEntityOnlyToPlayer( player, player, "cloak_sustain_loop_1P" )

	wait FAKE_DEATH_VANISH_DURATION
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
	player.SetNameVisibleToEnemy( true )

	wait FAKE_DEATH_CLOAK_DURATION
	DisableCloak( player )
}

void function FakeDeathWeaponDisableThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
			{
				//player.DeployWeapon()
				//player.Server_TurnOffhandWeaponsDisabledOff()
				DeployViewModelAndEnableWeapons( player )
				DeployWeapons( player )
			}
		}
	)

	// function HolsterAndDisableWeapons() now has stack system for HolsterWeapon() method... no need to loop anymore I think
	/*
	float startTime = Time()
	while( startTime + FAKE_DEATH_DISABLE_WEAPON_DURATION > Time() )
	{
		WaitFrame()
		player.HolsterWeapon()
		player.Server_TurnOffhandWeaponsDisabledOn()
	}
	*/

	HolsterViewModelAndDisableWeapons( player ) // to make player's viewmodel disappear immediately
	HolsterWeapons( player )
	wait FAKE_DEATH_DISABLE_WEAPON_DURATION
}

void function CloakWarningtoEndSound( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	float soundBufferTime = 3.45
	float fakeDeathDuration = FAKE_DEATH_VANISH_DURATION + FAKE_DEATH_CLOAK_DURATION
	if( fakeDeathDuration >= soundBufferTime )
	{
		wait fakeDeathDuration - soundBufferTime
		EmitSoundOnEntityOnlyToPlayer( player, player, "cloak_warningtoend_1P" )
	}
}

//script CreateFakeDeathObitForPlayerByDamageSourceID( GetPlayerArray()[0], GetPlayerArray()[0], 0, eDamageSourceId.mp_weapon_sniper )
void function CreateFakeDeathObitForPlayerByDamageSourceID( entity attacker, entity victim, int scriptDamageType, int damageSourceId )
{
    int attackerEHandle = attacker.GetEncodedEHandle()
    int victimEHandle = victim.GetEncodedEHandle()
    foreach ( entity player in GetPlayerArrayOfEnemies( victim.GetTeam() ) )
	{
		Remote_CallFunction_NonReplay( player, "ServerCallback_OnEntityKilled", attackerEHandle, victimEHandle, scriptDamageType, damageSourceId )
	}
    thread DelayedRestoreIcons( victim )
}

void function DelayedRestoreIcons( entity player )
{
    WaitFrame()
    if( IsValid( player ) ) // OnEntityKilled() may cause players lose their tactical icons
        Remote_CallFunction_NonReplay( player, "ServerCallback_YouRespawned" )
}

void function CreateFakeDeathObitForPlayerFromDamageInfo( entity ent, var damageInfo )
{
	array<entity> players = GetPlayerArray()

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	// trigger_hurt is no longer networked, so the "attacker" fails to display obituaries
	if ( attacker )
	{
		string attackerClassname = attacker.GetClassName()

		if ( attackerClassname == "trigger_hurt" || attackerClassname == "trigger_multiple" )
			attacker = GetEntByIndex( 0 ) // worldspawn
	}

	int attackerEHandle = attacker ? attacker.GetEncodedEHandle() : -1

	int victimEHandle = ent.GetEncodedEHandle()
	int scriptDamageType = DamageInfo_GetCustomDamageType( damageInfo )
	int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	if ( scriptDamageType & DF_VORTEX_REFIRE )
		damageSourceId = eDamageSourceId.mp_titanweapon_vortex_shield

	if ( IsValidHeadShot( damageInfo, ent ) )
		scriptDamageType = scriptDamageType | DF_HEADSHOT
	else
		scriptDamageType = scriptDamageType & (~DF_HEADSHOT)

	foreach ( entity player in GetPlayerArrayOfEnemies( ent.GetTeam() ) )
	{
		Remote_CallFunction_NonReplay( player, "ServerCallback_OnEntityKilled", attackerEHandle, victimEHandle, scriptDamageType, damageSourceId )
	}
}
#endif