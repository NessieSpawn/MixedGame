global function MpAbilityHoloShift_Init

global function OnWeaponOwnerChanged_ability_holoshift
global function OnWeaponPrimaryAttack_ability_holoshift

const float PHASE_REWIND_PATH_SNAPSHOT_INTERVAL = 0.1

struct
{
    // holoshift tables
	table< entity > playerDecoyList //CUSTOM used to track the decoy the user will be teleported to
} file

void function MpAbilityHoloShift_Init()
{
    #if SERVER
	    RegisterSignal( "HoloShiftCooldownThink" )
        AddCallback_PlayerDecoyDie( HoloShiftCleanUp )
        AddCallback_PlayerDecoyDissolve( HoloShiftCleanUp )
	#endif
}

void function OnWeaponOwnerChanged_ability_holoshift( entity weapon, WeaponOwnerChangedParams changeParams )
{
    #if SERVER
	    thread DelayedCheckHoloshift( weapon )
	#endif
}

var function OnWeaponPrimaryAttack_ability_holoshift( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity weaponOwner = weapon.GetWeaponOwner()
	if ( !weaponOwner.IsPlayer() )
        return 0
    
    if ( !PlayerCanUseHoloShift( weapon ) )
        return 0

#if SERVER
	if ( weaponOwner in file.playerDecoyList )
	{
		CreateHoloPilotDecoys( weaponOwner, 1 )
		entity decoy = file.playerDecoyList[ weaponOwner ]
		weapon.SetWeaponPrimaryClipCount( 0 )
		PlayerUsesHoloRewind( weaponOwner, decoy )
	}
	else
	{
		entity decoy = CreateHoloPilotDecoys( weaponOwner, 1 )
		if( weapon.HasMod( "holoshift" ) )
			file.playerDecoyList[ weaponOwner ] <- decoy
	}
#endif

    return weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
}

bool function PlayerCanUseHoloShift( entity weapon )
{
    if ( !PlayerCanUseDecoy( weapon ) ) // basic check
        return false

    // holoshift specifics
    if ( weapon.GetWeaponPrimaryClipCount()<100 )
    {
        //#if SERVER
        //SendHudMessage(ownerPlayer, "需要完全充满以使用幻影转移", -1, -0.35, 255, 255, 100, 255, 0, 3, 0)
        //#endif
        return false
    }

    if ( weapon.GetWeaponPrimaryClipCount() < 200 && !( IsValid( file.playerDecoyList ) ) )
    {
        //#if SERVER
        //SendHudMessage(ownerPlayer, "场内无自身幻影!\n需要完全充满以使用幻影转移", -1, -0.35, 255, 255, 100, 255, 0, 3, 0)
        //#endif
        return false
    }
	
    // all checks passed
    return true
}

#if SERVER
void function DelayedCheckHoloshift( entity weapon )
{
	weapon.EndSignal( "OnDestroy" )
	WaitFrame()
	if( weapon.HasMod( "holoshift" ) )
		thread HoloShiftCooldownThink( weapon )
}

void function HoloShiftCooldownThink( entity weapon )
{
	entity player = weapon.GetWeaponOwner()
	if( !IsValid( player ) )
		return
	if( !player.IsPlayer() )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "HoloShiftCooldownThink" )
	player.EndSignal( "HoloShiftCooldownThink" )
	weapon.EndSignal( "OnDestroy" )

	bool lastFrameDecoyValid
	while( true )
	{	
		int currentAmmo = weapon.GetWeaponPrimaryClipCount()
		int maxAmmo = weapon.GetWeaponPrimaryClipCountMax()
		int ammoPerShot = weapon.GetAmmoPerShot()
		if ( player in file.playerDecoyList ) // we have a decoy waiting to be phase back!
		{
			weapon.SetWeaponPrimaryClipCountAbsolute( ammoPerShot ) // lock to only one charge
			lastFrameDecoyValid = true
		}
		else if( lastFrameDecoyValid ) // last frame decoy was valid...
		{
			weapon.SetWeaponPrimaryClipCountAbsolute( 0 ) // reset ammo
			lastFrameDecoyValid = false
		}
		else if( currentAmmo > ammoPerShot ) // decoy never valid
		{
			weapon.SetWeaponPrimaryClipCountAbsolute( maxAmmo ) // instant make it have 2 charges 
			lastFrameDecoyValid = false // clean it up
		}

		WaitFrame()
	}
}

void function HoloShiftCleanUp( entity decoy, int currentState )
{
    entity bossPlayer = decoy.GetBossPlayer()
    if ( IsValid( bossPlayer ) )
    {
        // holoshift clean up
        if( bossPlayer in file.playerDecoyList )
        {
            if( decoy == file.playerDecoyList[bossPlayer] )
                delete file.playerDecoyList[bossPlayer]
        }
    }
}

void function PlayerUsesHoloRewind( entity player, entity decoy )
{
	thread PlayerUsesHoloRewindThreaded( player, decoy )
}

void function PlayerUsesHoloRewindThreaded( entity player, entity decoy )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	decoy.EndSignal( "OnDestroy" )
	decoy.EndSignal( "OnDeath" )
	entity mover = CreateScriptMover( player.GetOrigin(), player.GetAngles() )
	player.SetParent( mover, "REF" )

	//print( "should forceCrouch player: " + string( decoyData.forceCrouch ) )

	OnThreadEnd( 
		function() : ( player, mover, decoy )
		{
			if ( IsValid( player ) )
			{
				CancelPhaseShift( player )
				player.DeployWeapon()
				player.SetPredictionEnabled( true )
				player.ClearParent()
				ViewConeFree( player )
				FindNearestSafeSpotAndPutEntity( player, 1 ) // defensive fix, good to have
			}

			if ( IsValid( mover ) )
				mover.Destroy()

			if ( IsValid( decoy ) )
				CleanupExistingDecoy( decoy )
		}
	)

	vector initial_origin = player.GetOrigin()
	vector initial_angle = player.GetAngles()
	array<PhaseRewindData> positions = clone player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions

	ViewConeZeroInstant( player )
	player.HolsterWeapon()
	player.SetPredictionEnabled( false )
	PhaseShift( player, 0.0, 7 * PHASE_REWIND_PATH_SNAPSHOT_INTERVAL * 1.5 )
	
	// this mean mover will try to catch up with decoy, 7 times
	for ( float i = 7; i > 0; i-- )
	{
		// clear last frame's forced state
		player.UnforceCrouch()
		player.UnforceStand()
		if( HoloShiftShouldForceCrouch( decoy ) )
			player.ForceCrouch() // make player's view lower
		else
			player.ForceStand()

		initial_origin -= ( initial_origin - decoy.GetOrigin() ) * ( 1 / i )
		initial_angle -= ( initial_angle - decoy.GetAngles() ) * ( 1 / i )
		mover.NonPhysicsMoveTo( initial_origin, PHASE_REWIND_PATH_SNAPSHOT_INTERVAL, 0, 0 )
		mover.NonPhysicsRotateTo( initial_angle, PHASE_REWIND_PATH_SNAPSHOT_INTERVAL, 0, 0 )
		wait PHASE_REWIND_PATH_SNAPSHOT_INTERVAL
	}

	// final movement
	mover.NonPhysicsMoveTo( decoy.GetOrigin(), PHASE_REWIND_PATH_SNAPSHOT_INTERVAL, 0, 0 )
	mover.NonPhysicsRotateTo( decoy.GetAngles(), PHASE_REWIND_PATH_SNAPSHOT_INTERVAL, 0, 0 )
	player.SetOrigin( decoy.GetOrigin() )
	player.SetAngles( decoy.GetAngles() )
	player.SetVelocity( decoy.GetVelocity() )

	// clean up!
	player.UnforceCrouch()
	player.UnforceStand()
	if( HoloShiftShouldForceCrouch( decoy ) )
		thread HoloRewindForceCrouch( player ) // this will handle "UnforceCrouch()"
}

bool function HoloShiftShouldForceCrouch( entity decoy )
{
	TraceResults result = TraceLine( decoy.GetOrigin(), 
									 decoy.GetOrigin() + < 0, 0, 80 >, // 40 is crouched pilot height! add additional 40 for better check
									 [ decoy ], 
									 TRACE_MASK_SHOT, 
									 TRACE_COLLISION_GROUP_NONE 
									)
	return result.hitEnt != null // decoy will stuck
}

void function HoloRewindForceCrouch( entity player )
{
	// make player crouch
	player.ForceCrouch()
	wait 0.2
	if( IsValid( player ) )
		player.UnforceCrouch()
}
#endif