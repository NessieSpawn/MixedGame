// this file is for weapon's behavior: customized shared energy ammo
// used for better prediction

global function Shared_Energy_Update_Init

// shared utility
global function UpdateSharedEnergyOnWeaponOwnerChanged

const bool SHARED_ENERGY_DEBUG = false

struct PlayerSharedEnergy
{
    float regenRate
    float regenDelay
    int totalCount // less frequency use, listed on bottom

    // modified regen
    float regenRateMod
    float regenDelayMod
    int totalCountMod
}

struct
{
    table<entity, entity> sharedEnergyWeaponLastOwner
    table<entity, PlayerSharedEnergy> weaponOwnerSharedEnergyTable
} file

void function Shared_Energy_Update_Init()
{
    RegisterSignal( "UpdateSharedEnergyTotal" )
    AddCallback_OnPilotBecomesTitan( OnClassChangeBecomeTitan )
    // npc titans don't have shared energy that can be modified through script... ignoring
    //AddCallback_OnTitanBecomesPilot( OnClassChangeBecomePilot )
}

void function UpdateSharedEnergyOnWeaponOwnerChanged( entity weapon, WeaponOwnerChangedParams changeParams, float energyRegenRate, float energyRegenDelay, int energyTotalCount = ION_ENERGY_MAX )
{
    if ( !( weapon in file.sharedEnergyWeaponLastOwner ) )
        file.sharedEnergyWeaponLastOwner[ weapon ] <- null // init

    entity lastOwner = file.sharedEnergyWeaponLastOwner[ weapon ]
    entity oldOwner = changeParams.oldOwner
    entity newOwner = changeParams.newOwner
    
    #if SHARED_ENERGY_DEBUG
        print( "lastOwner is: " + string( lastOwner ) )
        print( "oldOwner is: " + string( oldOwner ) )
        print( "newOwner is: " + string( newOwner ) )
    #endif

    if ( IsValid( oldOwner ) )
    {
        if ( oldOwner == lastOwner ) // was the weapon's last owner!
        {
            if ( oldOwner in file.weaponOwnerSharedEnergyTable ) // in sharedEnergyTable!
            {
                #if SHARED_ENERGY_DEBUG
                    print( "try to restore saved energy settings" )
                #endif

                // reset the regen
                float regenRate = file.weaponOwnerSharedEnergyTable[ oldOwner ].regenRate
                float regenDelay = file.weaponOwnerSharedEnergyTable[ oldOwner ].regenDelay
                int totalCount = file.weaponOwnerSharedEnergyTable[ oldOwner ].totalCount

                #if SHARED_ENERGY_DEBUG
                    print( "regenDelay is: " + string( regenDelay ) )
                    print( "regenRate is: " + string( regenRate ) )
                    print( "totalCount is: " + string( totalCount ) )
                #endif

                oldOwner.SetSharedEnergyRegenRate( regenRate )
                oldOwner.SetSharedEnergyRegenDelay( regenDelay )
                oldOwner.SetSharedEnergyTotal( totalCount )
            }
        }
    }
    if ( IsValid( newOwner ) ) // don't change sharedEnergyTotal, since client can't predict it
    {
        if ( !( newOwner in file.weaponOwnerSharedEnergyTable ) )
        {
            PlayerSharedEnergy emptyStruct
            file.weaponOwnerSharedEnergyTable[ newOwner ] <- emptyStruct
        }
        file.sharedEnergyWeaponLastOwner[ weapon ] = newOwner // update ownership

        #if SHARED_ENERGY_DEBUG
            print( "try to store energy settings" )
        #endif

        // save current energy stats
        float regenRate = newOwner.GetSharedEnergyRegenRate()
        float regenDelay = newOwner.GetSharedEnergyRegenDelay()
        int totalCount = newOwner.GetSharedEnergyTotal()

        #if SHARED_ENERGY_DEBUG
            print( "regenRate is: " + string( regenRate ) )
            print( "regenDelay is: " + string( regenDelay ) )
            print( "totalCount is: " + string( totalCount ) )
        #endif

        file.weaponOwnerSharedEnergyTable[ newOwner ].regenRate = regenRate
        file.weaponOwnerSharedEnergyTable[ newOwner ].regenDelay = regenDelay
        file.weaponOwnerSharedEnergyTable[ newOwner ].totalCount = totalCount

        #if SHARED_ENERGY_DEBUG
            print( "try to update energy" )
        #endif
        // complicated checks... no where can use, just leaving here
        //int totalEnergy = newOwner.GetSharedEnergyTotal()
        //int currentEnergy = newOwner.GetSharedEnergyCount()
        //float energyLeft = float ( currentEnergy ) / float ( totalEnergy ) // get current energy left
        
        // get new regen rate and regen delay
        #if SHARED_ENERGY_DEBUG
            print( "newRegenRate is: " + string( energyRegenRate ) )
            print( "newRegenDelay is: " + string( energyRegenDelay ) )
            print( "newTotalCount is: " + string( energyTotalCount ) )
        #endif

        // update to owner
        newOwner.SetSharedEnergyRegenRate( energyRegenRate )
        newOwner.SetSharedEnergyRegenDelay( energyRegenDelay )
        if ( energyTotalCount >= 0 ) // only do total energy update if we have changed value
            UpdateSharedEnergyTotal( newOwner, energyTotalCount )
        // store to struct
        file.weaponOwnerSharedEnergyTable[ newOwner ].regenRateMod = energyRegenRate
        file.weaponOwnerSharedEnergyTable[ newOwner ].regenDelayMod = energyRegenDelay
        file.weaponOwnerSharedEnergyTable[ newOwner ].totalCountMod = energyTotalCount
    }
}

// sharedEnergyTotal is...weird, it doesn't remove player's existing energy
// we need to remove player's overloaded energy
void function UpdateSharedEnergyTotal( entity player, int totalCount )
{
    int currentEnergy = player.GetSharedEnergyCount()
    int overloadedEnergy = currentEnergy - totalCount
    #if SHARED_ENERGY_DEBUG
        print( string( player ) + " currentEnergy: " + string( currentEnergy ) )
        print( string( player ) + " overloadedEnergy: " + string( overloadedEnergy ) )
    #endif
    player.SetSharedEnergyTotal( totalCount )
    if ( overloadedEnergy > 0 )
        player.TakeSharedEnergy( overloadedEnergy )
}

// weapon owner change is applied earlier than class mod change( which resets player's shared energy )
// need to handle again
void function OnClassChangeBecomeTitan( entity player, entity titan )
{
    if ( !( player in file.weaponOwnerSharedEnergyTable ) )
    {
        #if SHARED_ENERGY_DEBUG
            print( "player: " + string( player ) + " don't have saved shared energy!" )
        #endif
        return
    }
    
    array<entity> weapons
    // in this case the weapons has been transfered to plyaer
    weapons.extend( player.GetMainWeapons() )
    weapons.extend( player.GetOffhandWeapons() )
    foreach ( entity weapon in weapons )
    {
        #if SHARED_ENERGY_DEBUG
            print( "weapon: " + string( weapon ) )
        #endif
        if ( !( weapon in file.sharedEnergyWeaponLastOwner ) )
        {
            #if SHARED_ENERGY_DEBUG
                print( "weapon: " + string( weapon ) + " isn't initialized by mod shared energy!" )
            #endif
            continue
        }

        // do this check again!
        entity lastOwner = file.sharedEnergyWeaponLastOwner[ weapon ]
        #if SHARED_ENERGY_DEBUG
            print( "lastOwner is: " + string( lastOwner ) )
            print( "embarkedPlayer is: " + string( player ) )
        #endif
        if ( lastOwner == player )
        {
            // update again, for player has been reset playerSettings
            float newRegenRate = file.weaponOwnerSharedEnergyTable[ player ].regenRateMod
            float newRegenDelay = file.weaponOwnerSharedEnergyTable[ player ].regenDelayMod
            int newTotalCount = file.weaponOwnerSharedEnergyTable[ player ].totalCountMod
            
            #if SHARED_ENERGY_DEBUG
                print( "newRegenRate is: " + string( newRegenRate ) )
                print( "newRegenDelay is: " + string( newRegenDelay ) )
                print( "newTotalCount is: " + string( newTotalCount ) )
            #endif

            player.SetSharedEnergyRegenRate( newRegenRate )
            player.SetSharedEnergyRegenDelay( newRegenDelay )
            if ( newTotalCount >= 0 ) // only do total energy update if we have changed value
                UpdateSharedEnergyTotal( player, newTotalCount )
        }
    }
}

// npc titans don't have shared energy that can be modified through script... ignoring
void function OnClassChangeBecomePilot( entity player, entity titan )
{

}