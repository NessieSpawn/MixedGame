untyped
global function FakeWorldModelForWeapon_Init

global function FakeWorldModel_CreateForWeapon
global function FakeWorldModel_DestroyForWeapon

global function FakeWorldModel_AddModToAutoReplaceModel

struct FakeWeaponModelReplace
{
	string modName
	asset model
	string attachment
	float humanScale // modelscale when used by non-titans
	float titanScale // modelscale when used by titans
	bool hideOrgWeapon
}

struct
{
	table<entity, bool> weaponsHiddenByAutoThink
    table<entity, entity> weaponFakeProp

	// settings table
	table< string, array<FakeWeaponModelReplace> > replacementModelSettings
} file

void function FakeWorldModelForWeapon_Init()
{
    // adding fake model for fake weapons
	RegisterSignal( "DestroyFakeModel" )
	RegisterSignal( "FakeModelWeaponShown" )

	// change to handle both npc and player weapons
    //AddCallback_OnClientConnected( OnClientConnected )
    AddCallback_EntitiesDidLoad( EntitiesDidLoad )
	AddCallback_WeaponDropped( WeaponDropped )
}

void function OnClientConnected( entity player )
{
    thread FakeWeaponModelModsThink( player )
}

void function WeaponDropped( entity weapon )
{
	// hidden weapon has dropped!
	//print( string( weapon ) + " has been dropped!" )
	if ( weapon in file.weaponsHiddenByAutoThink )
	{
		//print( "it is hidden by _pilot_using_titanweapon.gnut, restoring visibility" )
		// restore visibility
		// maybe no need to do extra checks
		//if ( !WeaponHasReplacementModel( weapon ) || !ShouldCurrentWeaponHideOrgWeapon( weapon ) )
		//{
			weapon.kv.rendermode = 0
			weapon.kv.renderamt = 255
			delete file.weaponsHiddenByAutoThink[ weapon ]
		//}
	}
}

// for handling both npc and player weapons
void function EntitiesDidLoad()
{
    thread FakeWeaponModelModsThink_Global()
}

void function FakeWeaponModelModsThink( entity player )
{
	player.EndSignal( "OnDestroy" )

    while ( true )
    {
        // try to create ourselves a fake weapon model if we have titan weapon active
        // also hide that weapon
        WaitFrame( true ) // bypass script fps limit for better visual

        if ( !IsAlive( player ) )
            continue

        array<entity> weapons
        weapons.extend( player.GetMainWeapons() )
        weapons.extend( player.GetOffhandWeapons() )
 
		foreach ( entity weapon in weapons )
		{
			if ( !( weapon in file.weaponsHiddenByAutoThink ) )
			{
				if ( WeaponHasReplacementModel( weapon ) && ShouldCurrentWeaponHideOrgWeapon( weapon ) )
				{
					//print( "trying to hide it!" )
					weapon.kv.rendermode = 4
					weapon.kv.renderamt = 0
					file.weaponsHiddenByAutoThink[ weapon ] <- true
					thread TrackWeaponAutoHidden( player, weapon )// restore weapon visibility on owner death
				}
			}
			else
			{
				if ( !WeaponHasReplacementModel( weapon ) || !ShouldCurrentWeaponHideOrgWeapon( weapon ) )
				{
					weapon.kv.rendermode = 0
					weapon.kv.renderamt = 255
					weapon.Signal( "FakeModelWeaponShown" ) // to stop TrackWeaponAutoHidden()
					delete file.weaponsHiddenByAutoThink[ weapon ]
				}
			}
		}

		entity activeWeapon = player.GetActiveWeapon()
		if ( IsValid( activeWeapon ) )
		{
			if ( WeaponHasReplacementModel( activeWeapon ) )
			{
				//print( "we got pilot's active titan weapon: " + string( activeWeapon ) )
				if ( !( activeWeapon in file.weaponFakeProp ) )
					file.weaponFakeProp[ activeWeapon ] <- null

				if ( !IsValid( file.weaponFakeProp[ activeWeapon ] ) )
				{
					entity fakeWeapon = FakeWorldModel_CreateForWeapon( activeWeapon, GetCurrentWeaponReplacementModel( activeWeapon ), GetCurrentWeaponReplacementModelAttachment( activeWeapon ), false )
					fakeWeapon.kv.modelscale = GetCurrentWeaponReplacementModelScale( activeWeapon )
					file.weaponFakeProp[ activeWeapon ] = fakeWeapon
				}
			}
		}
	}
}

// restore weapon visibility on owner death
// or maybe not. best method is we attach a model to dropped weapons
// nah, attaching model to it isn't reliable because their model won't have suitable attachments...
void function TrackWeaponAutoHidden( entity owner, entity weapon )
{
	weapon.EndSignal( "OnDestroy" )
	weapon.EndSignal( "FakeModelWeaponShown" )

	OnThreadEnd
	(
		function(): ( owner, weapon )
		{
			if ( IsValid( weapon ) )
			{
				if ( weapon in file.weaponsHiddenByAutoThink )
				{
					weapon.kv.rendermode = 0
					weapon.kv.renderamt = 255
					delete file.weaponsHiddenByAutoThink[ weapon ]
				}
			}
		}
	)

	WaitSignal( owner, "OnDeath", "OnDestroy" )
}

void function FakeWeaponModelModsThink_Global()
{
	while ( true )
    {
        // try to create ourselves a fake weapon model if we have titan weapon active
        // also hide that weapon
        WaitFrame( true ) // bypass script fps limit for better visual

		array<entity> guysCanUseWeapon
        guysCanUseWeapon.extend( GetPlayerArray() )
        guysCanUseWeapon.extend( GetNPCArray() )

        foreach ( entity guy in guysCanUseWeapon )
        {
			if ( !IsAlive( guy ) )
				continue

			array<entity> weapons
			weapons.extend( guy.GetMainWeapons() )
			weapons.extend( guy.GetOffhandWeapons() )
	
			foreach ( entity weapon in weapons )
			{
				if ( !( weapon in file.weaponsHiddenByAutoThink ) )
				{
					if ( WeaponHasReplacementModel( weapon ) && ShouldCurrentWeaponHideOrgWeapon( weapon ) )
					{
						//print( "trying to hide it!" )
						weapon.kv.rendermode = 4
						weapon.kv.renderamt = 0
						file.weaponsHiddenByAutoThink[ weapon ] <- true
						thread TrackWeaponAutoHidden( guy, weapon )// restore weapon visibility on owner death
					}
				}
				else
				{
					if ( !WeaponHasReplacementModel( weapon ) || !ShouldCurrentWeaponHideOrgWeapon( weapon ) )
					{
						weapon.kv.rendermode = 0
						weapon.kv.renderamt = 255
						weapon.Signal( "FakeModelWeaponShown" ) // to stop TrackWeaponAutoHidden()
						delete file.weaponsHiddenByAutoThink[ weapon ]
					}
				}
			}

			entity activeWeapon = guy.GetActiveWeapon()
			if ( IsValid( activeWeapon ) )
			{
				if ( WeaponHasReplacementModel( activeWeapon ) )
				{
					//print( "we got pilot's active titan weapon: " + string( activeWeapon ) )
					if ( !( activeWeapon in file.weaponFakeProp ) )
						file.weaponFakeProp[ activeWeapon ] <- null

					if ( !IsValid( file.weaponFakeProp[ activeWeapon ] ) )
					{
						entity fakeWeapon = FakeWorldModel_CreateForWeapon( activeWeapon, GetCurrentWeaponReplacementModel( activeWeapon ), GetCurrentWeaponReplacementModelAttachment( activeWeapon ), false )
						fakeWeapon.kv.modelscale = GetCurrentWeaponReplacementModelScale( activeWeapon )
						file.weaponFakeProp[ activeWeapon ] = fakeWeapon
					}
				}
			}
		}
	}
}

entity function FakeWorldModel_CreateForWeapon( entity weapon, asset model, string attachment = "PROPGUN", bool hideOrgWeapon = true, bool ignoreKeepPrimaryInHand = false )
{
    //print( "RUNNING FakeWorldModel_CreateForWeapon()" )
	entity owner = weapon.GetWeaponOwner()
	//print( "weapon owner: " + string( owner ) )
	if ( !IsValid( owner ) )
		return
	if ( owner.LookupAttachment( attachment ) == -1 )
		return
    
	entity prop = CreatePropDynamic( model, owner.GetOrigin(), owner.GetAngles() )
	// for players, their weapon only has first person model status and we can't bind it for third person model
	// but for NPCs, I think better method is we bind this weapon to org weapon, not their hand
	// NONONO this won't work!!! most weapon model don't have proper attachment for each other!
	// guess currently we just leave model life time think for player only, do need another think for npcs
	/*
	if ( owner.IsPlayer() )
	{
		prop.SetParent( owner, attachment )
		thread TrackFakeModelLifeTime( weapon, owner, prop, hideOrgWeapon, ignoreKeepPrimaryInHand )
	}
	else
		prop.SetParent( weapon, "REF" )
	*/
	prop.SetParent( owner, attachment )
	prop.Highlight_SetInheritHighlight( true ) // setup highlight
	//print( "Creating fake model!" )

	// start lifetime think. this should be compatible with npc usage
	thread TrackFakeModelLifeTime( weapon, owner, prop, hideOrgWeapon, ignoreKeepPrimaryInHand )

    return prop
}

void function TrackFakeModelLifeTime( entity weapon, entity owner, entity prop, bool hideOrgWeapon, bool ignoreKeepPrimaryInHand )
{
	// this hides original weapon
	if ( hideOrgWeapon )
	{
		weapon.kv.rendermode = 4
		weapon.kv.renderamt = 0
	}

	prop.EndSignal( "OnDestroy" )

	owner.EndSignal( "OnDeath" )
	owner.EndSignal( "OnDestroy" )
	weapon.Signal( "DestroyFakeModel" )
	weapon.EndSignal( "OnDestroy" )
	weapon.EndSignal( "DestroyFakeModel" )

	OnThreadEnd
	(
		function(): ( weapon, prop, hideOrgWeapon )
		{
			// restore weapon visibility
			if ( IsValid( weapon ) && hideOrgWeapon )
			{
				weapon.kv.rendermode = 0
                weapon.kv.renderamt = 255
			}

			if ( IsValid( prop ) )
			{
				//print( "Destroying fake model!" )
				prop.Destroy()
			}
		}
	)

	while ( true )
	{
		entity activeWeapon = owner.GetActiveWeapon()
		if ( weapon.IsWeaponOffhand() ) // our fake model's owner is offhand weapon
		{
			if ( !IsValid( activeWeapon ) )
				return
			if ( activeWeapon != weapon ) // weapon changed!
				return
		}
		else // our fake model's owner is main weapon
		{
			if ( !IsValid( activeWeapon ) )
				return
			if ( activeWeapon.IsWeaponOffhand() ) // active weapon is offhand!
			{
				// check main weapon visiblility
				var keepMainWeaponModel = activeWeapon.GetWeaponInfoFileKeyField( "offhand_keep_primary_in_hand" )
				if ( !ignoreKeepPrimaryInHand ) // we could always allow keeping main weapon!
				{
					if ( keepMainWeaponModel == null || !keepMainWeaponModel )
						return
				}
			}
			else if ( activeWeapon != weapon )  // weapon changed!
				return
		}

		//WaitFrame()
		WaitFrame( true ) // bypass script fps limit for better visual
	}
}

void function FakeWorldModel_DestroyForWeapon( entity weapon )
{
    weapon.Signal( "DestroyFakeModel" ) // stop TrackFakeModelLifeTime() thread
}

void function FakeWorldModel_AddModToAutoReplaceModel( string weaponName, string modName, asset model, string attachment, float humanScale, float titanScale, bool hideOrgWeapon )
{
	if ( !( weaponName in file.replacementModelSettings ) )
		file.replacementModelSettings[ weaponName ] <- []
	
	FakeWeaponModelReplace settings
	settings.modName = modName
	settings.model = model
	settings.attachment = attachment
	settings.humanScale = humanScale
	settings.titanScale = titanScale
	settings.hideOrgWeapon = hideOrgWeapon
	file.replacementModelSettings[ weaponName ].append( settings )
}

bool function WeaponHasReplacementModel( entity weapon )
{
	string weaponName = weapon.GetWeaponClassName()
	if ( !( weaponName in file.replacementModelSettings ) )
		return false
	
	array<string> mods = weapon.GetMods()
	foreach ( settings in file.replacementModelSettings[ weaponName ] )
	{
		if ( mods.contains( settings.modName ) )
			return true
	}

	// found nothing
	return false
}

asset function GetCurrentWeaponReplacementModel( entity weapon )
{
	if ( !WeaponHasReplacementModel( weapon ) )
		return $""
	
	asset model
	string weaponName = weapon.GetWeaponClassName()
	array<string> mods = weapon.GetMods()
	foreach ( settings in file.replacementModelSettings[ weaponName ] )
	{
		if ( mods.contains( settings.modName ) )
		{
			model = settings.model
			break
		}
	}

	return model
}

string function GetCurrentWeaponReplacementModelAttachment( entity weapon )
{
	if ( !WeaponHasReplacementModel( weapon ) )
		return ""
	
	string attachment
	string weaponName = weapon.GetWeaponClassName()
	array<string> mods = weapon.GetMods()
	foreach ( settings in file.replacementModelSettings[ weaponName ] )
	{
		if ( mods.contains( settings.modName ) )
		{
			attachment = settings.attachment
			break
		}
	}

	return attachment
}

float function GetCurrentWeaponReplacementModelScale( entity weapon )
{
	if ( !WeaponHasReplacementModel( weapon ) )
		return 1.0
	
	float scale
	entity owner = weapon.GetWeaponOwner()
	bool ownerIsTitan = IsValid( owner ) && owner.IsTitan()
	string weaponName = weapon.GetWeaponClassName()
	array<string> mods = weapon.GetMods()
	foreach ( settings in file.replacementModelSettings[ weaponName ] )
	{
		if ( mods.contains( settings.modName ) )
		{
			if ( ownerIsTitan )
				scale = settings.titanScale
			else
				scale = settings.humanScale
			break
		}
	}

	return scale
}

bool function ShouldCurrentWeaponHideOrgWeapon( entity weapon )
{
	if ( !WeaponHasReplacementModel( weapon ) )
		return true
	
	bool hideOrgWeapon
	string weaponName = weapon.GetWeaponClassName()
	array<string> mods = weapon.GetMods()
	foreach ( settings in file.replacementModelSettings[ weaponName ] )
	{
		if ( mods.contains( settings.modName ) )
		{
			hideOrgWeapon = settings.hideOrgWeapon
			break
		}
	}

	return hideOrgWeapon
}