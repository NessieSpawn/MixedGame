global function ThermiteDotUtility_Init

global function ThermiteDot_AddWeaponMod
global function ThermiteDot_AddProjectileMod
global function ThermiteDot_AddInflictorScriptName

// default values, 31 damage
const float THERMITE_DOT_DURATION = 3.0 // better be a multipiler of THERMITE_DOT_TICK
const int THERMITE_DOT_DAMAGE = 5
const int THERMITE_DOT_DAMAGE_HEAVY_ARMOR = 60
const int THERMITE_DOT_DAMAGE_FINAL = 1
const float THERMITE_DOT_TICK = 0.5
const float THERMITE_DOT_STACK_INTERVAL = 0.3
const int THERMITE_DOT_STACK_MAX = 3
const int THERMITE_DOT_DAMAGESOURCE = eDamageSourceId.burn

struct ThermiteDamageDOT
{
	float dotDuration = THERMITE_DOT_DURATION
	int dotDamage = THERMITE_DOT_DAMAGE
	int dotDamageHeavyArmor = THERMITE_DOT_DAMAGE_HEAVY_ARMOR
	int dotDamageFinal = THERMITE_DOT_DAMAGE_FINAL
	float dotDamageTick = THERMITE_DOT_TICK
	float dotStackInterval = THERMITE_DOT_STACK_INTERVAL
	int dotStackMax = THERMITE_DOT_STACK_MAX
	int dotDamageSourceId = THERMITE_DOT_DAMAGESOURCE
}

struct
{
	table<entity, int> entThermiteStack
	table<entity, float> entLastThermiteStackTime

	array<int> registeredDamageSourceIds
	table<string, ThermiteDamageDOT> thermiteWeaponMods
	table<string, ThermiteDamageDOT> thermiteProjectileMods
	table<string, ThermiteDamageDOT> thermiteScriptNames
} file

void function ThermiteDotUtility_Init()
{
	AddDeathCallback( "player", OnPlayerKilledClearThermiteTable )
}

// main utility func
void function ThermiteDot_AddWeaponMod( string weaponMod, int damageSourceId, float dotDuration = THERMITE_DOT_DURATION, int dotDamage = THERMITE_DOT_DAMAGE, int dotDamageHeavyArmor = THERMITE_DOT_DAMAGE_HEAVY_ARMOR, int dotDamageFinal = THERMITE_DOT_DAMAGE_FINAL, float dotDamageTick = THERMITE_DOT_TICK, float dotStackInterval = THERMITE_DOT_STACK_INTERVAL, int dotStackMax = THERMITE_DOT_STACK_MAX, int dotDamageSourceIdOverride = -1 )
{
	ThermiteDamageDOT dotDamageStruct
	dotDamageStruct.dotDuration = dotDuration
	dotDamageStruct.dotDamage = dotDamage
	dotDamageStruct.dotDamageHeavyArmor = dotDamageHeavyArmor
	dotDamageStruct.dotDamageFinal = dotDamageFinal
	dotDamageStruct.dotDamageTick = dotDamageTick
	dotDamageStruct.dotStackInterval = dotStackInterval
	dotDamageStruct.dotStackMax = dotStackMax

	int dotDamageSourceId = damageSourceId // default is we use same damageSourceId for dot
	if ( dotDamageSourceIdOverride != -1 )
		dotDamageSourceId = dotDamageSourceIdOverride
	dotDamageStruct.dotDamageSourceId = dotDamageSourceId

	if ( !file.registeredDamageSourceIds.contains( damageSourceId ) )
	{
		AddDamageCallbackSourceID( damageSourceId, DotThermite_DamagedTarget )
		file.registeredDamageSourceIds.append( damageSourceId )
	}

	if ( !( weaponMod in file.thermiteWeaponMods ) )
		file.thermiteWeaponMods[ weaponMod ] <- dotDamageStruct
	else
		file.thermiteWeaponMods[ weaponMod ] = dotDamageStruct
}

void function ThermiteDot_AddProjectileMod( string projectileMod, int damageSourceId, float dotDuration = THERMITE_DOT_DURATION, int dotDamage = THERMITE_DOT_DAMAGE, int dotDamageHeavyArmor = THERMITE_DOT_DAMAGE_HEAVY_ARMOR, int dotDamageFinal = THERMITE_DOT_DAMAGE_FINAL, float dotDamageTick = THERMITE_DOT_TICK, float dotStackInterval = THERMITE_DOT_STACK_INTERVAL, int dotStackMax = THERMITE_DOT_STACK_MAX, int dotDamageSourceIdOverride = -1 )
{
	ThermiteDamageDOT dotDamageStruct
	dotDamageStruct.dotDuration = dotDuration
	dotDamageStruct.dotDamage = dotDamage
	dotDamageStruct.dotDamageHeavyArmor = dotDamageHeavyArmor
	dotDamageStruct.dotDamageFinal = dotDamageFinal
	dotDamageStruct.dotDamageTick = dotDamageTick
	dotDamageStruct.dotStackInterval = dotStackInterval
	dotDamageStruct.dotStackMax = dotStackMax

	int dotDamageSourceId = damageSourceId // default is we use same damageSourceId for dot
	if ( dotDamageSourceIdOverride != -1 )
		dotDamageSourceId = dotDamageSourceIdOverride
	dotDamageStruct.dotDamageSourceId = dotDamageSourceId

	if ( !file.registeredDamageSourceIds.contains( damageSourceId ) )
	{
		AddDamageCallbackSourceID( damageSourceId, DotThermite_DamagedTarget )
		file.registeredDamageSourceIds.append( damageSourceId )
	}

	if ( !( projectileMod in file.thermiteProjectileMods ) )
		file.thermiteProjectileMods[ projectileMod ] <- dotDamageStruct
	else
		file.thermiteProjectileMods[ projectileMod ] = dotDamageStruct
}

void function ThermiteDot_AddInflictorScriptName( string scriptName, int damageSourceId, float dotDuration = THERMITE_DOT_DURATION, int dotDamage = THERMITE_DOT_DAMAGE, int dotDamageHeavyArmor = THERMITE_DOT_DAMAGE_HEAVY_ARMOR, int dotDamageFinal = THERMITE_DOT_DAMAGE_FINAL, float dotDamageTick = THERMITE_DOT_TICK, float dotStackInterval = THERMITE_DOT_STACK_INTERVAL, int dotStackMax = THERMITE_DOT_STACK_MAX, int dotDamageSourceIdOverride = -1 )
{
	ThermiteDamageDOT dotDamageStruct
	dotDamageStruct.dotDuration = dotDuration
	dotDamageStruct.dotDamage = dotDamage
	dotDamageStruct.dotDamageHeavyArmor = dotDamageHeavyArmor
	dotDamageStruct.dotDamageFinal = dotDamageFinal
	dotDamageStruct.dotDamageTick = dotDamageTick
	dotDamageStruct.dotStackInterval = dotStackInterval
	dotDamageStruct.dotStackMax = dotStackMax
	
	int dotDamageSourceId = damageSourceId // default is we use same damageSourceId for dot
	if ( dotDamageSourceIdOverride != -1 )
		dotDamageSourceId = dotDamageSourceIdOverride
	dotDamageStruct.dotDamageSourceId = dotDamageSourceId

	if ( !file.registeredDamageSourceIds.contains( damageSourceId ) )
	{
		AddDamageCallbackSourceID( damageSourceId, DotThermite_DamagedTarget )
		file.registeredDamageSourceIds.append( damageSourceId )
	}

	if ( !( scriptName in file.thermiteScriptNames ) )
		file.thermiteScriptNames[ scriptName ] <- dotDamageStruct
	else
		file.thermiteScriptNames[ scriptName ] = dotDamageStruct
}
//

void function OnPlayerKilledClearThermiteTable( entity victim, var damageInfo )
{
	if ( victim in file.entThermiteStack )
		file.entThermiteStack[ victim ] = 0
	if ( victim in file.entLastThermiteStackTime )
		file.entLastThermiteStackTime[ victim ] <- 0.0
}

void function InitThermiteDotTableForEntity( entity ent )
{
	if ( !( ent in file.entThermiteStack ) )
		file.entThermiteStack[ ent ] <- 0
	if ( !( ent in file.entLastThermiteStackTime ) )
		file.entLastThermiteStackTime[ ent ] <- 0.0
}

void function DotThermite_DamagedTarget( entity ent, var damageInfo )
{
	if ( !IsValid( ent ) )
		return

	bool hasThermiteDamageMod
	ThermiteDamageDOT dotDamageStruct

	// weapon condition, added by ThermiteDot_AddWeaponMod
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( IsValid( attacker ) && ( attacker.IsPlayer() || attacker.IsNPC() ) )
	{
		string weaponMod = ""
		foreach ( entity weapon in attacker.GetMainWeapons() )
		{
			array<string> mods = weapon.GetMods()
			foreach ( string mod in mods )
			{
				if ( mod in file.thermiteWeaponMods )
					weaponMod = mod
			}
		}
		if ( weaponMod == "" ) // cannot find! go to offhand weapons
		{
			foreach ( entity weapon in attacker.GetOffhandWeapons() )
			{
				array<string> mods = weapon.GetMods()
				foreach ( string mod in mods )
				{
					if ( mod in file.thermiteWeaponMods )
						weaponMod = mod
				}
			}
		}
		// found mod
		if ( weaponMod != "" )
		{
			hasThermiteDamageMod = true
			dotDamageStruct = file.thermiteWeaponMods[ weaponMod ]
		}
	}

	// inflictor condition
	if ( !hasThermiteDamageMod )
	{
		entity inflictor = DamageInfo_GetInflictor( damageInfo )
		if ( IsValid( inflictor ) )
		{
			if ( inflictor.IsProjectile() ) // added by ThermiteDot_AddProjectileMod()
			{
				string projectileMod = ""
				array<string> mods = Vortex_GetRefiredProjectileMods( inflictor ) // modded weapon refire behavior
				foreach ( string mod in mods )
				{
					if ( mod in file.thermiteProjectileMods )
						projectileMod = mod
				}
				// found mod
				if ( projectileMod != "" )
				{
					hasThermiteDamageMod = true
					dotDamageStruct = file.thermiteProjectileMods[ projectileMod ]
				}
			}
			else // added by ThermiteDot_AddInflictorScriptName()
			{
				string scriptName = inflictor.GetScriptName()
				if ( scriptName in file.thermiteScriptNames )
				{
					hasThermiteDamageMod = true
					dotDamageStruct = file.thermiteScriptNames[ scriptName ]
				}
			}
		}
	}

	// has thermite dot!
	if ( hasThermiteDamageMod )
	{
		entity attacker = DamageInfo_GetAttacker( damageInfo )
		DamageInfo_SetDamage( damageInfo, 1 )
		if( !IsValid( attacker ) )
			return
		thread ThermiteStatusEffect_DoT( ent, attacker, dotDamageStruct )
	}
}

void function ThermiteStatusEffect_DoT( entity victim, entity attacker, ThermiteDamageDOT dotStruct )
{
	if( !IsValid( victim ) || !IsValid( attacker ) )
		return

	InitThermiteDotTableForEntity( victim )

	if( Time() - file.entLastThermiteStackTime[ victim ] < dotStruct.dotStackInterval )
	{
		//print( "In Dot Interval!" )
		return
	}
	if( file.entThermiteStack[ victim ] >= dotStruct.dotStackMax )
	{
		//print( "Dot Stack Max!" )
		return
	}
	file.entThermiteStack[ victim ] += 1
	file.entLastThermiteStackTime[ victim ] = Time()
	//print( "Successfully Added Dot! Now having " + string( file.entThermiteStack[ victim ] ) )

	StatusEffect_AddTimed( victim, eStatusEffect.thermite, 1.0, dotStruct.dotDuration, 0.5 )

	bool startAsTitan = victim.IsTitan()
	int damageAmount = startAsTitan ? dotStruct.dotDamageHeavyArmor : dotStruct.dotDamage

	OnThreadEnd
	(
		function(): ( victim, attacker, dotStruct )
		{
			if( IsValid( victim ) )
			{
				if ( IsAlive( victim ) && IsValid( attacker ) )
					victim.TakeDamage( dotStruct.dotDamageFinal, attacker, attacker, { scriptType = DF_INSTANT, damageSourceId = dotStruct.dotDamageSourceId } )
				if( file.entThermiteStack[ victim ] > 0 )
					file.entThermiteStack[ victim ] -= 1
			}
		}
	)

	float endTime = Time() + dotStruct.dotDuration
	while( IsAlive( victim ) && IsValid( attacker ) && Time() <= endTime )
	{
		if( victim.IsInvulnerable() || victim.IsPhaseShifted() )
		{
			WaitFrame() // wait a frame for each continue, so the loop won't go into stuck
			continue
		}
		if ( victim.IsPlayer() ) // titan transfer check
		{
			if ( ( !startAsTitan && victim.IsTitan() ) || ( startAsTitan && !victim.IsTitan() ) )
				return // if player did titan transfer, we end thermite dot damage
		}
		victim.TakeDamage( damageAmount, attacker, attacker, { scriptType = DF_EXPLOSION, damageSourceId = dotStruct.dotDamageSourceId } )
		Thermite_DamagePlayerOrNPCSounds( victim )

		wait dotStruct.dotDamageTick
	}
}