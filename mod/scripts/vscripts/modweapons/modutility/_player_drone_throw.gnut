global function PlayerDroneThrow_Init
global function SpawnDroneFromPlayer

// if using light pilot or heavy pilot model, it's gonna crash
const array<asset> DRONE_SPAWNER_ALLOWED_MODEL = 
[
	// models that using medium pilot core animations
	$"models/humans/grunts/mlt_grunt_lmg.mdl", 
	$"models/humans/grunts/imc_grunt_lmg.mdl", 
	$"models/humans/grunts/mlt_grunt_smg.mdl", 
	$"models/humans/grunts/imc_grunt_smg.mdl", 
	$"models/humans/grunts/mlt_grunt_shotgun.mdl", 
	$"models/humans/grunts/imc_grunt_shotgun.mdl", 
	$"models/humans/grunts/mlt_grunt_rifle.mdl", 
	$"models/humans/grunts/imc_grunt_rifle.mdl", 

	$"models/Humans/heroes/imc_hero_ash.mdl", 
	$"models/humans/heroes/mlt_hero_jack.mdl", 
	$"models/humans/heroes/mlt_hero_sarah.mdl", 
	$"models/Humans/heroes/imc_hero_blisk.mdl", 

	$"models/humans/pilots/sp_medium_geist_f.mdl", 
	$"models/humans/pilots/sp_medium_reaper_m.mdl", 
	$"models/humans/pilots/sp_medium_stalker_m.mdl",

	$"models/humans/pilots/pilot_medium_stalker_m.mdl",
	$"models/humans/pilots/pilot_medium_stalker_f.mdl",
	$"models/humans/pilots/pilot_medium_reaper_m.mdl",
	$"models/humans/pilots/pilot_medium_reaper_f.mdl",
	$"models/humans/pilots/pilot_medium_geist_m.mdl",
	$"models/humans/pilots/pilot_medium_geist_f.mdl",

	$"models/robots/spectre/imc_spectre.mdl",

	$"models/humans/grunts/imc_grunt_shield_captain.mdl",
]

// change model for those incompatible to kinda fitable ones
const array<asset> LIGHT_PILOT_MODELS =
[
	$"models/humans/pilots/pilot_light_ged_m.mdl", 
	$"models/humans/pilots/pilot_light_ged_f.mdl", 
	$"models/humans/pilots/pilot_light_jester_m.mdl", 
	$"models/humans/pilots/pilot_light_jester_f.mdl", 
]
const asset LIGHT_PILOT_REPLACEMENT_MODEL = $"models/robots/spectre/imc_spectre.mdl"

const array<asset> HEAVY_PILOT_MODELS =
[
	$"models/humans/pilots/pilot_heavy_drex_m.mdl", 
	$"models/humans/pilots/pilot_heavy_drex_f.mdl", 
	$"models/humans/pilots/pilot_heavy_roog_m.mdl", 
	$"models/humans/pilots/pilot_heavy_roog_f.mdl", 
]
const asset HEAVY_PILOT_REPLACEMENT_MODEL = $"models/humans/grunts/imc_grunt_shield_captain.mdl"

void function PlayerDroneThrow_Init()
{

}

entity function SpawnDroneFromPlayer( entity player, string aiSettings )
{
	if ( !IsAlive( player ) )
   		return null
	if( !player.IsPlayer() )
		return null
	if( player.IsTitan() )
		return null

	// generic check
	if ( player.Anim_IsActive() || IsValid( player.GetParent() ) )
		return null
	if ( !player.IsOnGround() || player.IsWallRunning() || player.IsTraversing() )
	{
		SendHudMessage( player, "接觸地面以釋放無人機", -1, -0.35, 255, 255, 100, 255, 0, 3, 0 )
		return null
	}
	if ( player.IsCrouched() )
	{
		SendHudMessage( player, "Stand Up to Release Your Drones", -1, -0.35, 255, 255, 100, 255, 0, 3, 0 )
		return null
	}

	vector origin = player.GetOrigin()
	vector angles = player.GetAngles()
	int team = player.GetTeam()
	entity owner = player
	// PositionOffsetFromEnt() is fucked on players because player actual angle is their eyeangles
	// let's just use their origin
	//vector deployOrigin = PositionOffsetFromEnt( player, 64, 0, 0 )
	vector deployOrigin = origin
	float verticalClearance = GetVerticalClearance( deployOrigin )
	string spawnAnimDrone
	string spawnAnimSoldier

	//-------------------------------------------------------------------
	// Make sure enough clearance to spawn drone, and get correct anim
	//-------------------------------------------------------------------
	if ( verticalClearance >= 256 )
	{
		spawnAnimDrone = "dr_activate_drone_spin"
		spawnAnimSoldier = "pt_activate_drone_spin"
	}
	else if ( ( verticalClearance < 256 ) )
	{
		spawnAnimDrone = "dr_activate_drone_indoor"
		spawnAnimSoldier = "pt_activate_drone_indoor"
	}

	// drone throwing start
	player.SetPredictionEnabled( false )
	//------------------------------------------
	// Player throws drone into air
	//------------------------------------------
	entity drone = CreateNPC( "npc_drone", team, origin, angles )
	SetSpawnOption_AISettings( drone, aiSettings )

	// update owner right before spawn
	drone.SetOwner( player )
	drone.SetBossPlayer( player )

	DispatchSpawn( drone )

	if ( !IsAlive( drone ) )
		return null
	
	asset playerModel = player.GetModelName()
	if( !DRONE_SPAWNER_ALLOWED_MODEL.contains( playerModel ) )
		thread PickRandomModelForSpawning( player )

	drone.NotSolid()
	thread PlayAnim( player, spawnAnimSoldier, origin, angles )
	thread AnimProgessCheck( player )
	thread DroneSolidDelayed( drone )
	thread DroneThrow( player, drone, spawnAnimDrone )
	thread RestoreToSafeSpot( player, origin )
	thread HolsterWeaponForDroneSpawning( player )
	thread ThirdPersonCameraThink( player )

	//thread HACK_FirstPersonVisualFix( player, spawnAnimSoldier )

	thread DroneCleanupOnOwnerDeath_Thread( player, drone )

	return drone
}

void function AnimProgessCheck( entity player )
{
	player.EndSignal( "OnAnimationDone" )
	player.EndSignal( "OnDestroy" )

	OnThreadEnd
	(
		function(): ( player )
		{
			if ( IsAlive( player ) )
				player.SetPredictionEnabled( true )
		}
	)
	
	player.WaitSignal( "OnDeath" )
	player.Anim_Stop()
}

void function PickRandomModelForSpawning( entity player )
{
	table savedStuff
	savedStuff.startModel <- player.GetModelName()
	savedStuff.fullBodyGroup <- player.GetFullBodygroup()

	// this one don't wait a frame so model can be set before anim starts
	asset targetModel = DRONE_SPAWNER_ALLOWED_MODEL[ RandomInt( DRONE_SPAWNER_ALLOWED_MODEL.len() ) ]
	// allow better model to be picked if we're using specific model
	asset playerModel = player.GetModelName()
	if ( LIGHT_PILOT_MODELS.contains( playerModel ) )
		targetModel = LIGHT_PILOT_REPLACEMENT_MODEL
	else if ( HEAVY_PILOT_MODELS.contains( playerModel ) )
		targetModel = HEAVY_PILOT_REPLACEMENT_MODEL
	
	player.SetModel( targetModel )
	player.SetValueForModelKey( targetModel )

	OnThreadEnd(
		function(): ( player, savedStuff )
		{
			if( IsValid( player ) )
			{
				asset modelToRecover = expect asset( savedStuff.startModel )
				int bodygroupToRecover = expect int( savedStuff.fullBodyGroup )

				player.SetModel( modelToRecover )
				player.SetValueForModelKey( modelToRecover )
				player.SetFullBodygroup( bodygroupToRecover )
			}
		}
	)

	WaittillAnimDone( player )
}

void function HolsterWeaponForDroneSpawning( entity owner )
{
	OnThreadEnd(
		function(): ( owner )
		{
			if( IsValid( owner ) )
			{
				//DeployAndEnableWeapons( owner )
				DeployViewModelAndEnableWeapons( owner )
				// maybe still adding weapon deploy penalty
				owner.HolsterWeapon()
				owner.DeployWeapon()
			}
		}
	)
	WaitFrame()
	if( !IsAlive( owner ) )
		return
	// holstering weapon hides weapon model during animation
	// also makes player pull out weapon much slower... weapon deploy is included in animation I think
	//HolsterAndDisableWeapons( owner )
	HolsterViewModelAndDisableWeapons( owner )
	WaittillAnimDone( owner )
}

void function ThirdPersonCameraThink( entity player )
{
	entity camera = CreateEntity( "point_viewcontrol" )
	OnThreadEnd(
		function(): ( player, camera )
		{
			if( IsValid( camera ) )
				camera.Destroy()
			if( IsValid( player ) )
				player.ClearViewEntity()
		}
	)
	camera.EndSignal( "OnDestroy" )
	camera.SetParent( player, "ORIGIN" )
	camera.SetOrigin( < -100,0,80 > )
	camera.kv.spawnflags = 56
	DispatchSpawn( camera )
	player.SetViewEntity( camera, true )
	WaittillAnimDone( player )
}

/* // copied from fp_to_tp_hack, no need to use it
void function HACK_FirstPersonVisualFix( entity player, string spawnAnimSoldier, vector startOrigin )
{
	// eyeangles are fine though
	vector angles = player.GetAngles()
	angles.y = player.EyeAngles().y
	
	HolsterAndDisableWeapons( player )
	// create the first proxy entity, this should visually be identical to the player, but only visible to them, and with head/torso hidden
	// this is an npc because some firstpersonsequences use animation features that only work on npcs and pilots, not props, so need to do this
	entity ownerProxy = CreateEntity( "npc_pilot_elite" ) //CreatePropDynamic( player.GetModelName(), player.GetOrigin(), player.GetAngles() )
	ownerProxy.SetModel( player.GetModelName() )
	ownerProxy.SetValueForModelKey( player.GetModelName() )
	ownerProxy.SetOrigin( player.GetOrigin() )
	ownerProxy.SetAngles( angles )
	ownerProxy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_OWNER
	ownerProxy.kv.solid = 0 // nonsolid
	SetTeam( ownerProxy, player.GetTeam() )
	ownerProxy.SetOwner( player )
	ownerProxy.SetSkin( player.GetSkin() )
	ownerProxy.SetCamo( player.GetCamo() ) // note: this seems weird, doesn't set right
	DispatchSpawn( ownerProxy )
	ownerProxy.SetModel( player.GetModelName() )
	ownerProxy.SetValueForModelKey( player.GetModelName() )
	ownerProxy.SetInvulnerable()
	HideName( ownerProxy )
	
	// hide annoying bodygroup
	ownerProxy.SetBodygroup( ownerProxy.FindBodyGroup( "head" ), 1 )
	// don't play anim until later so we can do cleanup stuff
		
	// create the second proxy entity, this visible to everyone else
	entity thirdPersonProxy = CreateEntity( "npc_pilot_elite" ) //CreatePropDynamic( player.GetModelName(), player.GetOrigin(), player.GetAngles() )
	thirdPersonProxy.SetModel( player.GetModelName() )
	thirdPersonProxy.SetValueForModelKey( player.GetModelName() )
	thirdPersonProxy.SetOrigin( player.GetOrigin() )
	thirdPersonProxy.SetAngles( angles )
	thirdPersonProxy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE & ~ENTITY_VISIBLE_TO_OWNER
	thirdPersonProxy.kv.solid = 0 // nonsolid
	SetTeam( thirdPersonProxy, player.GetTeam() )
	thirdPersonProxy.SetOwner( player )
	thirdPersonProxy.SetSkin( player.GetSkin() )
	thirdPersonProxy.SetCamo( player.GetCamo() ) // note: this seems weird, doesn't set right
	DispatchSpawn( thirdPersonProxy	)
	thirdPersonProxy.SetModel( player.GetModelName() )
	thirdPersonProxy.SetValueForModelKey( player.GetModelName() )
	thirdPersonProxy.SetInvulnerable()
	HideName( thirdPersonProxy )
	
	if ( player.IsTitan() )
		Highlight_SetEnemyHighlight( thirdPersonProxy, "enemy_titan" )
	else
		Highlight_SetEnemyHighlight( thirdPersonProxy, "enemy_player" )
	
	thread PlayAnim( ownerProxy, spawnAnimSoldier, player.GetOrigin(), angles )
	thread PlayAnim( thirdPersonProxy, spawnAnimSoldier, player.GetOrigin(), angles )
	
	// create the viewpoint entity
	entity camera = CreateEntity( "point_viewcontrol" )
	camera.SetParent( ownerProxy, "HEADFOCUS" )
	camera.kv.spawnflags = 56
	DispatchSpawn( camera )
	player.SetViewEntity( camera, true )

	WaittillAnimDone( thirdPersonProxy )

	if( IsValid( player ) )
	{
		player.Show()
		player.ClearViewEntity()
		DeployAndEnableWeapons( player )
		player.SetOrigin( startOrigin )
	}
	if( IsValid( camera ) )
		camera.Destroy()
	if( IsValid( ownerProxy ) )
		ownerProxy.Destroy()
	if( IsValid( thirdPersonProxy ) )
		thirdPersonProxy.Destroy()
}
*/

void function RestoreToSafeSpot( entity player, vector startOrigin )
{
	OnThreadEnd(
		function(): ( player, startOrigin )
		{
			if( IsAlive( player ) )
				player.SetOrigin( startOrigin )
		}
	)
	WaitFrame()
	WaittillAnimDone( player )
}

void function DroneSolidDelayed( entity drone )
{
	drone.EndSignal( "OnDestroy" )
	wait 3.0 // wait for custom scale to finish in the animation
	drone.Solid()
}

void function DroneThrow( entity player, entity drone, string spawnAnimDrone )
{
	drone.EndSignal( "OnDeath" )

	drone.EnableNPCFlag( NPC_DISABLE_SENSING )

//	EmitSoundOnEntity( drone, "Drone_Power_On" )

	//#if GRUNTCHATTER_ENABLED
	//	if ( NPC_GruntChatterSPEnabled( npc ) )
	//		GruntChatter_TryFriendlyEquipmentDeployed( npc, "npc_drone" )
	//#endif

	vector origin = player.GetOrigin()
	vector angles = player.GetAngles()

	//animate the drone properly from the player's hand
	PlayAnimTeleport( drone, spawnAnimDrone, origin, angles )

	if ( IsValid( player ) )
		NPCFollowsPlayer( drone, player )

	drone.DisableNPCFlag( NPC_DISABLE_SENSING )
}

void function DroneCleanupOnOwnerDeath_Thread( entity owner, entity drone )
{
	drone.EndSignal( "OnDestroy" )
	drone.EndSignal( "OnDeath" )

	for ( ; ; )
	{
		if ( !IsAlive( owner ) )
			break

		WaitFrame()
	}

	wait RandomFloatRange( 2.0, 10.0 )
	drone.Die()
}