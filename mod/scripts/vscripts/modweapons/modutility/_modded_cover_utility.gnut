// this is a shared file for multiple deployable cover mods to use!
global function Modded_Deployable_Cover_Utility

global function DeployModdedCover

const float DEPLOYABLE_SHIELD_DURATION = 15.0

const asset DEPLOYABLE_SHIELD_FX = $"P_pilot_cover_shield"
const int DEPLOYABLE_SHIELD_HEALTH = 850

// for bleedout_balance
const int DEPLOYABLE_SHIELD_HEALTH_NERFED = 330

const int DEPLOYABLE_SHIELD_RADIUS = 84
const int DEPLOYABLE_SHIELD_HEIGHT = 89
const int DEPLOYABLE_SHIELD_FOV = 150

const float DEPLOYABLE_SHIELD_ANGLE_LIMIT = 0.55

void function Modded_Deployable_Cover_Utility()
{
}

// feel free to hardcode?
void function DeployModdedCover( entity projectile, vector origin, vector angles, float duration = DEPLOYABLE_SHIELD_DURATION, int health = DEPLOYABLE_SHIELD_HEALTH )
{
	Assert( IsValid( projectile ) )
	if ( !IsValid( projectile ) )
		return
	array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior
	if( mods.contains( "bleedout_balance" ) )
		health = DEPLOYABLE_SHIELD_HEALTH_NERFED

	EmitSoundOnEntity( projectile, "Hardcover_Shield_Start_3P" )

	vector fwd = AnglesToForward( angles )
	vector up = AnglesToUp( angles )
	origin = origin - (fwd * (DEPLOYABLE_SHIELD_RADIUS - 1.0))
	origin = origin - (up * 1.0)

	entity vortexSphere = CreateShieldWithSettings( origin, angles, DEPLOYABLE_SHIELD_RADIUS, DEPLOYABLE_SHIELD_HEIGHT, DEPLOYABLE_SHIELD_FOV, duration, health, DEPLOYABLE_SHIELD_FX )

	Assert( vortexSphere )
	if ( !vortexSphere )
		return

	vortexSphere.SetParent( projectile )
	vortexSphere.EndSignal( "OnDestroy" )
	vortexSphere.SetBlocksRadiusDamage( true )
	vortexSphere.DisableVortexBlockLOS()

	UpdateShieldWallColorForFrac( vortexSphere.e.shieldWallFX, GetHealthFrac( vortexSphere ) )

	OnThreadEnd(
		function() : ( vortexSphere, projectile, mods )
		{
			StopSoundOnEntity( projectile, "Hardcover_Shield_Start_3P" )
			EmitSoundOnEntity( projectile, "Hardcover_Shield_End_3P" )
			
			// modified
			if ( IsValid( projectile ) && projectile.IsProjectile() )
			{
				// fix for kraber throwing
				if( mods.contains( "tediore_deployable_cover" ) )
				{
					PlayImpactFXTable( projectile.GetOrigin(), projectile, "exp_deployable_cover", SF_ENVEXPLOSION_INCLUDE_ENTITIES )
					projectile.Destroy()
				}
				else
					projectile.GrenadeExplode( Vector(0,0,0) )
			}

			if ( IsValid( vortexSphere ) )
				vortexSphere.Destroy()
		}
	)

	wait duration
}