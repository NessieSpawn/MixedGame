global function ModdedWeaponsForcedCooldown_Init

global function HolsterWeaponForPilotInstants
global function ForceCleanWeaponAmmo
global function StartForcedCooldownThinkForWeapon
global function DelayedStartForcedCooldownThink

void function ModdedWeaponsForcedCooldown_Init()
{
    RegisterSignal( "ForcedCooldownThink" )
    RegisterSignal( "HolsterForInstant" )
}

// for balance, holster pilot's weapons when using tripwire or gas trap things
// this may called by titans, so make sure did checks properly
void function HolsterWeaponForPilotInstants( entity weapon )
{
    entity owner = weapon.GetWeaponOwner()
    if( !IsValid( owner ) )
        return
    if( !owner.IsPlayer() || owner.IsTitan() )
        return

    var fireMode = weapon.GetWeaponInfoFileKeyField( "fire_mode" )
    if ( fireMode != "offhand_instant" )
        return

    float hosterDuration = weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration )
    if( hosterDuration <= 0 )
        return

    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.Signal( "HolsterForInstant" )
    owner.EndSignal( "HolsterForInstant" )
    weapon.EndSignal( "OnDestroy" )

    // we're using Server_TurnOffhandWeaponsDisabledOn(), which will make offhandWeapons unable to consume ammo themselves, try force Remove their ammo!
    bool isGrappleWeapon = weapon.GetWeaponInfoFileKeyField( "cooldown_type" ) == "grapple"

    int maxAmmo = weapon.GetWeaponPrimaryClipCountMax()
    int ammoPerShot = weapon.GetAmmoPerShot()
    int currentAmmo = weapon.GetWeaponPrimaryClipCount() // for saving both float and int
    if( isGrappleWeapon ) // grapple specific
    {
        maxAmmo = 100
        ammoPerShot = int( weapon.GetWeaponSettingFloat( eWeaponVar.grapple_power_required ) )
        currentAmmo = int( owner.GetSuitGrapplePower() )
    }
    // only remove for one charge weapons, mutiple charge weapons can consume it's ammo correctly, 1 is a debounce for grapple
    if( maxAmmo <= ammoPerShot + 1 )
    {
        if( isGrappleWeapon )
            owner.SetSuitGrapplePower( 0 )
        else
            weapon.SetWeaponPrimaryClipCountAbsolute( 0 )
    }

    /* // can't use this thing! mutiple charge weapons can consume it's ammo correctly
    int ammoPerShot = weapon.GetAmmoPerShot()
    int currentAmmo = weapon.GetWeaponPrimaryClipCount() // for saving both float and int
    if( isGrappleWeapon ) // grapple specific
    {
        ammoPerShot = int( weapon.GetWeaponSettingFloat( eWeaponVar.grapple_power_required ) )
        currentAmmo = int( owner.GetSuitGrapplePower() )
    }
    int ammoLeft = currentAmmo - ammoPerShot
    if( removeAllAmmo )
        ammoLeft = 0

    print( "Ammo left: " + string( ammoLeft ) )

    if( isGrappleWeapon )
        owner.SetSuitGrapplePower( ammoLeft )
    else
        weapon.SetWeaponPrimaryClipCountAbsolute( ammoLeft )
    */

    // disable weapon
    HolsterAndDisableWeapons( owner )

    OnThreadEnd( 
        function():( owner )
        {
            if( IsValid( owner ) )
            {
                //owner.DeployWeapon()
                //owner.Server_TurnOffhandWeaponsDisabledOff()
                DeployAndEnableWeapons( owner )
            }
        }
    )

    // function HolsterAndDisableWeapons() now has stack system for HolsterWeapon() method... no need to loop anymore I think
    /*
    float startTime = Time()
    while( startTime + hosterDuration >= Time() )
    {
        owner.HolsterWeapon()
        owner.Server_TurnOffhandWeaponsDisabledOn()
        WaitFrame()
    }
    */
    wait hosterDuration
}

// for we can't change ammo_per_shot things, use this to remove ammo
void function ForceCleanWeaponAmmo( entity weapon )
{
    entity owner = weapon.GetWeaponOwner()
    if( !IsValid( owner ) )
        return
    if( !owner.IsPlayer() || owner.IsTitan() )
        return

    bool isGrappleWeapon = weapon.GetWeaponInfoFileKeyField( "cooldown_type" ) == "grapple"
    if( isGrappleWeapon )
        owner.SetSuitGrapplePower( 0 )
    else
        weapon.SetWeaponPrimaryClipCountAbsolute( 0 )
}

// for sometimes .SetMods() right after give weapons
void function DelayedStartForcedCooldownThink( entity weapon, array<string> desiredMods ) // maybe no need to check multiple mods
{
    weapon.EndSignal( "OnDestroy" )
    //print( "running DelayedStartForcedCooldownThink()" )
    WaitFrame()
    foreach( string mod in desiredMods )
    {
        if( weapon.HasMod( mod ) )
        {
            thread StartForcedCooldownThinkForWeapon( weapon )
            return // found one, end thread
        }
    }
}

// basically making some 2 charge weapons only need to charge once( and use once ) for better client visual
// to keep balance, remember to make their "regen_ammo_refill_rate" half
void function StartForcedCooldownThinkForWeapon( entity weapon )
{
    //print( "running StartForcedCooldownThinkForWeapon()" )
    entity owner = weapon.GetWeaponOwner()
    if( !IsValid( owner ) )
        return
    if( !owner.IsPlayer() || owner.IsTitan() )
        return

    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.Signal( "ForcedCooldownThink" )
    owner.EndSignal( "ForcedCooldownThink" )
    weapon.EndSignal( "OnDestroy" )

    bool isGrappleWeapon = weapon.GetWeaponInfoFileKeyField( "cooldown_type" ) == "grapple"

    // don't change these
    int ammoPerShot = weapon.GetAmmoPerShot()
    int maxAmmo = weapon.GetWeaponPrimaryClipCountMax()
    if( isGrappleWeapon ) // grapple specific
    {
        ammoPerShot = int( weapon.GetWeaponSettingFloat( eWeaponVar.grapple_power_required ) )
        maxAmmo = 100 // this can't be changed
    }

    while( true )
    {
        var currentAmmo = weapon.GetWeaponPrimaryClipCount()
        if( isGrappleWeapon )
            currentAmmo = owner.GetSuitGrapplePower()

        if( currentAmmo > ammoPerShot )
        {
            if( isGrappleWeapon )
                owner.SetSuitGrapplePower( 100 )
            else
                weapon.SetWeaponPrimaryClipCountAbsolute( maxAmmo )
        }
        WaitFrame()
    }
}