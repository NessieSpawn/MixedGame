// THIS FILE ISN'T WORKING WELL
global function Rechamber_Weapons_Animation_Overhaul_Init

global function RechamberWeaponsAnimationOveraul_SetEnabled

struct
{
    bool animationOverhaulEnabled
    table<entity, bool> weaponIsReloading
} file

void function Rechamber_Weapons_Animation_Overhaul_Init()
{
    AddCallback_OnPlayerReload( OnWeaponReload )
}

void function OnWeaponReload( entity weapon )
{
    if ( !file.animationOverhaulEnabled )
        return

    if ( !IsValid( weapon ) )
        return
    
    if ( weapon in file.weaponIsReloading )
    {
        print( "current weapon is reloading by this file!" )
        return
    }

    entity owner = weapon.GetWeaponOwner()
    if ( !IsValid( owner ) || !owner.IsPlayer() )
        return

    bool canRechamber = weapon.GetWeaponSettingFloat( eWeaponVar.rechamber_time ) > 0
    if ( !canRechamber )
        return

    // empty ammo and do full reload on this weapon
    if ( !weapon.IsReadyToFire() ) // this will return false if weapon isn't rechambered yet
    {
        // welp it seems that we need to give player a new weapon that has already been rechambered...
        int slot
        foreach ( i, otherWeapon in owner.GetMainWeapons() )
        {
            if ( otherWeapon == weapon )
                slot = i
        }
        
        StorePilotWeapons( owner )
		RetrievePilotWeapons( owner )

        owner.SetActiveWeaponBySlot( slot )
        entity newWeapon = owner.GetMainWeapons()[ slot ]
        print( "newWeapon: " + string( newWeapon ) )

        // anti-crash: not all weapons uses clip, avoid issue with modded weapons
        try
        {
            newWeapon.SetWeaponPrimaryClipCount( 0 )
        }
        catch( ex ){}

        // re-deploy weapon to trigger full reload
        // should we add a mod for these weapons to do instant deploy?
        HolsterViewModel( owner )
        DeployViewModel( owner )

        file.weaponIsReloading[ newWeapon ] <- true
        thread TrackNewWeaponReloadProgess( newWeapon, owner )
    }
}

void function TrackNewWeaponReloadProgess( entity weapon, entity owner )
{
    weapon.EndSignal( "OnDestroy" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "OnDeath" )

    OnThreadEnd
    (
        function(): ( weapon, owner )
        {
            if ( IsValid( weapon ) )
                delete file.weaponIsReloading[ weapon ]
        }
    )

    // We want the reload speed buff to stay until the reload is finished.
	// The weapon will not be reloading if something lowers it, so this more reliably waits until the weapon is reloaded than checking the IsReloading function.
	while ( weapon.GetWeaponPrimaryClipCount() == 0 )
		WaitFrame()

    // Check reload index to avoid stopping thread on canceled reloads, but catch non-empty reloads
    while ( weapon.GetReloadMilestoneIndex() == 0 && weapon.GetWeaponPrimaryClipCount() > 0 )
        WaitFrame()
}

void function RechamberWeaponsAnimationOveraul_SetEnabled( bool enable )
{
    file.animationOverhaulEnabled = enable
}