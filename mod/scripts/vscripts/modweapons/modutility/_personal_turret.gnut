untyped

global function PersonalTurret_Init

global function SpawnPersonalTurretTimed
global function SpawnTurretForPlayer

void function PersonalTurret_Init()
{

}

void function SpawnPersonalTurretTimed( entity ent, float duration, float modelscale, int health, string turretType = "npc_turret_sentry", string aiSettings = "npc_turret_sentry_burn_card_ap", string replacementWeapon = "" )
{
	if( !IsValid( ent ) )
		return

	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "OnDestroy" )

	entity turret = null
	if( ent.IsTitan() )
	{
		turret = SpawnTurretForPlayer( ent, < 0,0,50 >, modelscale, health, turretType, aiSettings, "HIJACK", replacementWeapon )
	}
	else if( IsPilot( ent ) )
	{
		turret = SpawnTurretForPlayer( ent, < 0,0,0 >, modelscale, health, turretType, aiSettings, "HEADSHOT", replacementWeapon )
	}
	else
		return

	OnThreadEnd(
		function(): ( turret )
		{
			if( IsValid( turret ) )
				turret.Destroy()
		}
	)

	wait duration
}

entity function SpawnTurretForPlayer( entity player, vector origin, float modelscale, int health, string turretType = "npc_turret_sentry", string aiSettings = "npc_turret_sentry_burn_card_ap", string attachment = "ORIGIN", string replacementWeapon = "" )
{
	if( !IsValid( player ) )
		return

	if( !player.IsPlayer() )
		return

	entity turret = CreateEntity( turretType )
	turret.kv.TurretRange = 1500
	turret.kv.AccuracyMultiplier = 1.0
	turret.kv.FieldOfView = 0.4
	turret.kv.FieldOfViewAlert = 0.4
	turret.s.skipTurretFX <- true
	turret.kv.modelscale = modelscale

	SetSpawnOption_AISettings( turret, aiSettings )
	DispatchSpawn( turret )
	turret.SetMaxHealth( health )	
	turret.SetHealth( health )
	turret.Show()
	entity weapon = turret.GetActiveWeapon()
	if( IsValid( weapon ) )
	{
		if( replacementWeapon != "" )
			turret.TakeWeaponNow( weapon.GetWeaponClassName() )
		weapon.Hide()
	}
	if( replacementWeapon != "" )
	{
		turret.GiveWeapon( replacementWeapon )
		turret.SetActiveWeaponByName( replacementWeapon )
	}
	SetTeam( turret, player.GetTeam() )
	turret.SetParent( player, attachment, false )
	turret.EnableTurret()
	turret.SetOrigin( origin )
	turret.SetOwner( player )
	turret.SetBossPlayer( player )
	turret.SetAimAssistAllowed( false )
	turret.NotSolid() // so turret won't have collisions especially for mega turrets

	HideName( turret )
	return turret
}

entity function SpawnTurretForTitan( entity titan, vector origin = < 0,0,50 >, float modelscale = 1.0, int health = 700, string turretType = "npc_turret_sentry", string aiSettings = "npc_turret_sentry_burn_card_ap", string attachment = "HIJACK" )
{
	if( !IsValid( titan ) )
		return

	if( !titan.IsTitan() )
		return

	entity turret = CreateEntity( turretType )
	turret.kv.TurretRange = 1500
	turret.kv.AccuracyMultiplier = 1.0
	turret.kv.FieldOfView = 0.4
	turret.kv.FieldOfViewAlert = 0.4
	turret.s.skipTurretFX <- true
	turret.kv.modelscale = modelscale

	SetSpawnOption_AISettings( turret, aiSettings )
	DispatchSpawn( turret )
	turret.SetHealth( health)
	turret.SetMaxHealth( health )
	turret.Show()
	entity weapon = turret.GetActiveWeapon()
	weapon.Show()
	SetTeam( turret, titan.GetTeam() )
	turret.SetParent( titan, attachment, false )
	turret.EnableTurret()
	turret.SetOrigin( origin )
	turret.SetOwner( titan.GetOwner() )
	turret.SetAimAssistAllowed( false )
	entity bossPlayer = titan.GetBossPlayer()
	if ( IsValidPlayer( bossPlayer ) )
		turret.SetBossPlayer( titan.GetBossPlayer() )

	HideName( turret )
	return turret
}

entity function SpawnTurretForPilot( entity player, vector origin = < 0,0,0 >, float modelscale = 1.0, int health = 700, string turretType = "npc_turret_sentry", string aiSettings = "npc_turret_sentry_burn_card_ap", string attachment = "HEADSHOT" )
{
	if( !IsValid( player ) )
		return

	if( !IsPilot( player ) )
		return

	entity turret = CreateEntity( turretType )
	turret.kv.TurretRange = 1500
	turret.kv.AccuracyMultiplier = 1.0
	turret.kv.FieldOfView = 0.4
	turret.kv.FieldOfViewAlert = 0.4
	turret.s.skipTurretFX <- true
	turret.kv.modelscale = modelscale

	SetSpawnOption_AISettings( turret, aiSettings )
	DispatchSpawn( turret )
	turret.SetHealth( health )
	turret.SetMaxHealth( health )
	turret.Show()
	entity weapon = turret.GetActiveWeapon()
	weapon.Hide()
	SetTeam( turret, player.GetTeam() )
	turret.SetParent( player, attachment, false )
	turret.EnableTurret()
	turret.SetOrigin( origin )
	turret.SetOwner( player )
	turret.SetBossPlayer( player )
	turret.SetAimAssistAllowed( false )

	HideName( turret )
	return turret
}