untyped
global function MpWeaponModdedSoftball_Init

// mainly shared utility with mp_weapon_softball.nut
global function ModdedSoftball_WeaponHasMod
global function ModdedSoftball_ProjectileHasMod
//

global function OnWeaponActivate_weapon_modded_softball
global function OnWeaponOwnerChanged_weapon_modded_softball
global function OnWeaponPrimaryAttack_weapon_modded_softball
global function OnProjectileCollision_weapon_modded_softball
global function OnWeaponReload_weapon_moded_softball

// hardcoded!
const array<string> MODDED_SOFTBALL_MODS = 
[
	"thermite_softball",
	"sonar_softball",
	"northstar_softball",
	"cluster_softball",
	"arcball_softball",
	"smoke_softball",
	"gravity_softball",
	"triplethreat_softball", 
	"emp_softball",
	"error_softball",
	"grenade_launcher",
	"stickybomb_launcher",
	"reload_repeat",
]

// softball mods that use the replacement burnmod
const table<string, string> MODDED_SOFTBALL_BURNMOD_REPLACE = 
{
	["thermite_softball"] 		= "burn_mod_modded_softball",
	["cluster_softball"] 		= "burn_mod_modded_softball",
	["arcball_softball"] 		= "burn_mod_modded_softball",
	["smoke_softball"] 			= "burn_mod_modded_softball",
	["gravity_softball"] 		= "burn_mod_modded_softball",
	["triplethreat_softball"] 	= "burn_mod_modded_softball",
	["emp_softball"] 			= "burn_mod_modded_softball",
	["grenade_launcher"] 		= "burn_mod_modded_softball",
	["stickybomb_launcher"] 	= "burn_mod_modded_softball",
}

// softball mods that disbles burnmods
const array<string> MODDED_SOFTBALL_BURNMOD_DISABLE = 
[
	"sonar_softball",
	"northstar_softball",
	"error_softball"
]

struct
{
	table < entity, array<entity> > playerStickyTable
} file

// normal grenade
const float FUSE_TIME = 0.5 //Applies once the grenade has stuck to a surface.
// sticky grenade
const float STICKY_ARM_DELAY = 0.7
const float STICKY_EXPLOSION_DELAY = 0.13

void function MpWeaponModdedSoftball_Init()
{
#if SERVER
	SoftballPrecache()
	AddCallback_PlayerClassChanged( SignalWhenClassChanged )
	AddCallback_OnClientConnected( OnClientConnected )
	RegisterSignal( "DetonateSticky" )
	RegisterSignal( "PlayerClassChanged" )
	RegisterSignal( "DetonateGrenade" )

	AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_softball, OnDamagedTarget_ModdedSoftball )
	//RegisterBallLightningDamage( eDamageSourceId.mp_weapon_softball ) // this messes up other radius damage softballs(eg. thermite softball)

	// burnmod replace
	foreach ( string mod, string replace in MODDED_SOFTBALL_BURNMOD_REPLACE )
		ModdedBurnMods_AddReplacementBurnMod( mod, replace )
	// burnmod blacklist
	foreach ( string mod in MODDED_SOFTBALL_BURNMOD_DISABLE )
		ModdedBurnMods_AddDisabledMod( mod )

	// vortex refire override
	// vanilla grenades are safe with refiring since they have "grenade_fuse_time" "0", but softball don't!
	// can be fixed through adding "grenade_fuse_time" "0" to modded softball mods, I'll just let them airburst now. too much effect touching ground could be messy
	/*
	Vortex_AddImpactDataOverride_WeaponMod( 
		"mp_weapon_softball", // weapon name
		"thermite_softball", // mod name
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_thermite_grenade", "vortex_absorb_effect" ), // absorb effect
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_thermite_grenade", "vortex_absorb_effect_third_person" ), // absorb effect 3p
		"grenade_long_fuse" // refire behavior. prevent it airburst before touching ground
	)
	Vortex_AddImpactDataOverride_WeaponMod( 
		"mp_weapon_softball", // weapon name
		"smoke_softball", // mod name
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_grenade_electric_smoke", "vortex_absorb_effect" ), // absorb effect
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_grenade_electric_smoke", "vortex_absorb_effect_third_person" ), // absorb effect 3p
		"grenade_long_fuse" // refire behavior. prevent it airburst before touching ground
	)
	Vortex_AddImpactDataOverride_WeaponMod( 
		"mp_weapon_softball", // weapon name
		"smoke_softball", // mod name
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_grenade_electric_smoke", "vortex_absorb_effect" ), // absorb effect
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_grenade_electric_smoke", "vortex_absorb_effect_third_person" ), // absorb effect 3p
		"grenade_long_fuse" // refire behavior. prevent it airburst before touching ground
	)
	Vortex_AddImpactDataOverride_WeaponMod( 
		"mp_weapon_softball", // weapon name
		"emp_softball", // mod name
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_grenade_emp", "vortex_absorb_effect" ), // absorb effect
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_grenade_emp", "vortex_absorb_effect_third_person" ), // absorb effect 3p
		"grenade_long_fuse" // refire behavior. prevent it airburst before touching ground
	)
	Vortex_AddImpactDataOverride_WeaponMod( 
		"mp_weapon_softball", // weapon name
		"error_softball", // mod name
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_softball", "vortex_absorb_effect" ), // absorb effect
		GetWeaponInfoFileKeyFieldAsset_Global( "mp_weapon_softball", "vortex_absorb_effect_third_person" ), // absorb effect 3p
		"grenade_long_fuse" // refire behavior. prevent it airburst before touching ground
	)
	*/
#endif
}

// mainly shared utility with mp_weapon_softball.nut
bool function ModdedSoftball_WeaponHasMod( entity weapon )
{
	foreach ( string mod in MODDED_SOFTBALL_MODS )
	{
		if ( weapon.HasMod( mod ) )
			return true
	}

	return false
}

bool function ModdedSoftball_ProjectileHasMod( entity projectile )
{
	array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior
	foreach ( string mod in MODDED_SOFTBALL_MODS )
	{
		if ( mods.contains( mod ) )
			return true
	}

	return false
}
//

#if SERVER
void function SoftballPrecache()
{
	PrecacheModel( $"models/weapons/kunai/w_kunai_projectile.mdl" )
	PrecacheModel( $"models/weapons/shuriken/w_shuriken.mdl" )
	PrecacheModel( $"models/titans/light/titan_light_raptor.mdl" )
	PrecacheModel( $"models/weapons/bullets/projectile_rocket_largest.mdl" )
	PrecacheModel( $"models/dev/empty_model.mdl" )
	PrecacheModel( $"models/weapons/grenades/smoke_grenade_projectile.mdl" )
	PrecacheModel( $"models/weapons/grenades/arc_grenade_projectile.mdl" )
	PrecacheModel( $"models/error.mdl" )

	PrecacheParticleSystem( $"wpn_grenade_sonar" )
	PrecacheParticleSystem( $"P_grenade_thermite_trail" )
	PrecacheParticleSystem( $"Rocket_Smoke_SMALL_Titan_2" )
	PrecacheParticleSystem( $"P_wpn_arcball_trail" )
	PrecacheParticleSystem( $"P_wpn_grenade_smoke_trail" )
	PrecacheParticleSystem( $"wpn_grenade_frag_blue" )
}

void function SignalWhenClassChanged( entity player )
{
	player.Signal( "PlayerClassChanged" )
}

void function OnClientConnected( entity player )
{
	file.playerStickyTable[ player ] <- []
	//AddStickyDetonateButton( player ) // using OnWeaponOwnerChanged() to add these
}

void function AddStickyDetonateButton( entity player )
{
	AddButtonPressedPlayerInputCallback( player, IN_ZOOM, SignalDetonateSticky )
	AddButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE, SignalDetonateSticky )
}

void function SignalDetonateSticky( entity player )
{
	player.Signal( "DetonateSticky" )
}

void function OnDamagedTarget_ModdedSoftball( entity ent, var damageInfo )
{
	if ( !IsValid( ent ) )
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )

	if ( !IsValid( attacker ) )
		return

	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	if( !IsValid( inflictor ) )
		return
	if( !inflictor.IsProjectile() )
		return

	array<string> mods = Vortex_GetRefiredProjectileMods( inflictor ) // modded weapon refire behavior

	if ( mods.contains( "thermite_softball" ) )
		Thermite_DamagePlayerOrNPCSounds( ent ) // fix sound
	if ( mods.contains( "emp_softball" ) )
		EMP_DamagedPlayerOrNPC( ent, damageInfo ) // stuns target
	if ( mods.contains( "arcball_softball" ) )
		OnBallLightningDamage( ent, damageInfo ) // lightning effect
}
#endif // SERVER

// contents moved to OnWeaponOwnerChanged_weapon_modded_softball() for sometimes we use ".AddMod()" to setup weapon
void function OnWeaponActivate_weapon_modded_softball( entity weapon )
{
	/*
	#if SERVER
		if( !weapon.HasMod( "stickybomb_launcher" ) )
			return
		entity owner = weapon.GetWeaponOwner()
		if( !owner.IsPlayer() )
			return
	#endif
	*/
}

void function OnWeaponOwnerChanged_weapon_modded_softball( entity weapon, WeaponOwnerChangedParams changeParams )
{
	#if SERVER
		if( weapon.HasMod( "stickybomb_launcher" ) )
		{
			if( IsValid( changeParams.oldOwner ) )
			{
				if( changeParams.oldOwner.IsPlayer() )
				{
					RemoveButtonPressedPlayerInputCallback( changeParams.oldOwner, IN_ZOOM, SignalDetonateSticky )
					RemoveButtonPressedPlayerInputCallback( changeParams.oldOwner, IN_ZOOM_TOGGLE, SignalDetonateSticky )
				}
			}
		}
		thread DelayedCheckStickyBombMod( weapon, changeParams ) // in case we're using AddMod()
	#endif
}

#if SERVER
void function DelayedCheckStickyBombMod( entity weapon, WeaponOwnerChangedParams changeParams )
{
	WaitFrame()
	if( !IsValid( weapon ) )
		return
	if( weapon.HasMod( "stickybomb_launcher" ) )
	{
		if ( IsValid( changeParams.newOwner ) )
		{
			entity player
			if( changeParams.newOwner.IsPlayer() )
				player = changeParams.newOwner
			if( !IsValid( player ) )
				return
			AddButtonPressedPlayerInputCallback( player, IN_ZOOM, SignalDetonateSticky )
			AddButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE, SignalDetonateSticky )
		}
	}
}
#endif

var function OnWeaponPrimaryAttack_weapon_modded_softball( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	entity player = weapon.GetWeaponOwner()

	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
	//vector bulletVec = ApplyVectorSpread( attackParams.dir, player.GetAttackSpreadAngle() * 2.0 )
	//attackParams.dir = bulletVec

	if ( IsServer() || weapon.ShouldPredictProjectiles() )
	{
		vector offset = Vector( 30.0, 6.0, -4.0 )
		if ( weapon.IsWeaponInAds() )
			offset = Vector( 30.0, 0.0, -3.0 )
		vector attackPos = player.OffsetPositionFromView( attackParams[ "pos" ], offset )	// forward, right, up

		//Triple Threat ammo
		if( weapon.HasMod( "triplethreat_softball" ) )
		{
			#if SERVER
				return FireTripleThreat_Softball( weapon, attackParams, true )
			#endif
		}
		else
		{
			FireGrenade( weapon, attackParams )
			return 1 // require a return value for "reload_repeat" emitting sound
		}
	}
}

function FireGrenade( entity weapon, WeaponPrimaryAttackParams attackParams, isNPCFiring = false )
{
	vector angularVelocity = Vector( RandomFloatRange( -1200, 1200 ), 100, 0 )

	int damageType = DF_RAGDOLL | DF_EXPLOSION // | DF_GIB

	entity nade = weapon.FireWeaponGrenade( attackParams.pos, attackParams.dir, angularVelocity, 0.0 , damageType, damageType, !isNPCFiring, true, false )
	entity owner = weapon.GetWeaponOwner()

	if ( nade )
	{
		InitSoftballGrenade( nade, weapon, owner )
	}
}

void function InitSoftballGrenade( entity nade, entity weapon, entity owner )
{
	asset fxAsset = weapon.GetWeaponSettingAsset( eWeaponVar.projectile_trail_effect_0 )
	float explosionDelay = weapon.GetWeaponSettingFloat( eWeaponVar.grenade_fuse_time )

	#if SERVER
		Grenade_Init( nade, weapon )
		thread DelayedStartParticleSystem( nade, fxAsset )
	#else
		entity weaponOwner = weapon.GetWeaponOwner()
		SetTeam( nade, weaponOwner.GetTeam() )
	#endif
	if( weapon.HasMod( "sonar_softball" ) )
		nade.SetModel( $"models/weapons/kunai/w_kunai_projectile.mdl" )
	else if( weapon.HasMod( "thermite_softball" ) )
		nade.SetModel( $"models/weapons/shuriken/w_shuriken.mdl" )
	else if( weapon.HasMod( "northstar_softball" ) )
		nade.SetModel( $"models/titans/light/titan_light_raptor.mdl" )
	else if( weapon.HasMod( "cluster_softball" ) )
		nade.SetModel( $"models/weapons/bullets/projectile_rocket_largest.mdl" )
	else if( weapon.HasMod( "arcball_softball" ) )
	{
		nade.SetModel( $"models/dev/empty_model.mdl" )
		#if SERVER
			AttachBallLightning( weapon, nade ) // this will make grenade an arcball
		#endif // SERVER
	}
	else if( weapon.HasMod( "smoke_softball" ) )
		nade.SetModel( $"models/weapons/grenades/smoke_grenade_projectile.mdl" )
	else if( weapon.HasMod( "gravity_softball" ) )
		nade.SetModel( $"models/weapons/shuriken/w_shuriken.mdl" )
	else if( weapon.HasMod( "emp_softball" ) )
		nade.SetModel( $"models/weapons/grenades/arc_grenade_projectile.mdl" )
	else if( weapon.HasMod( "error_softball" ) )
		nade.SetModel( $"models/error.mdl" )
	else if( weapon.HasMod( "grenade_launcher" ) )
	{
		#if SERVER
			thread DetonateGrenadeAfterTime( nade, explosionDelay )
		#endif
	}
	else if( weapon.HasMod( "stickybomb_launcher" ) )
	{
		#if SERVER
			SetVisibleEntitiesInConeQueriableEnabled( nade, true ) // all trap entities should have this, otherwise shotgun blast won't damage them
			nade.proj.onlyAllowSmartPistolDamage = false // so player can disarm grenades
			nade.ProjectileSetDamageSourceID( eDamageSourceId.sticky_explosive ) // better damageSource
			thread DelayedAddStickyForPlayer( owner, nade )
			thread PlayerStickyManagement( owner )
		#endif
	}
	else
	{
		EmitSoundOnEntity( nade, "Weapon_softball_Grenade_Emitter" )
	}
}

void function OnProjectileCollision_weapon_modded_softball( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	array<string> mods = Vortex_GetRefiredProjectileMods( projectile ) // modded weapon refire behavior

	#if SERVER
		//Prevent triplethreat from being sticky and triggers it's unique impact
		if( mods.contains( "triplethreat_softball" ) )
			return OnProjectileCollision_titanweapon_triple_threat( projectile, pos, normal, hitEnt, hitbox, isCritical )
		//Prevent demoman grenade from being sticky
		if( mods.contains( "grenade_launcher" ) )
		{
			projectile.proj.savedOrigin = normal
			// no impact fuse after bounce
			if( projectile.proj.projectileBounceCount++ != 0 )
				return
			if( hitEnt.IsPlayer() || hitEnt.IsNPC() )
				projectile.Signal( "DetonateGrenade" )
			projectile.proj.projectileBounceCount++
			return
		}
		//Prevent stickybomb from sticking on players
		else if( mods.contains( "stickybomb_launcher" ) )
		{
			if( hitEnt.IsPlayer() || hitEnt.IsNPC() )
				return
		} 
	#endif
		
	bool didStick = PlantSuperStickyGrenade( projectile, pos, normal, hitEnt, hitbox )
	if ( !didStick )
		return

	#if SERVER
		entity player = projectile.GetOwner()

		// Normal nade
		if ( IsAlive( hitEnt ) && hitEnt.IsPlayer() )
		{
			EmitSoundOnEntityOnlyToPlayer( projectile, hitEnt, "weapon_softball_grenade_attached_1P" )
			EmitSoundOnEntityExceptToPlayer( projectile, hitEnt, "weapon_softball_grenade_attached_3P" )
		}
		else
		{
			EmitSoundOnEntity( projectile, "weapon_softball_grenade_attached_3P" )
		}

		//Thermite ammo
		if( mods.contains( "thermite_softball" ) )
		{
			thread ThermiteBurn_Softball( 2.0, player, projectile )
		}
		//Sonar ammo
		else if( mods.contains( "sonar_softball" ) )
		{
			thread SonarGrenadeThink_Softball( projectile )
			thread DestroySoftballProjectile( projectile, 1.0 )
		}
		//Northstar ammo
		else if( mods.contains( "northstar_softball" ) )
		{
			thread NuclearCoreExplosionChainReaction_Softball( projectile, 0 )
		}
		//Cluster ammo
		else if( mods.contains( "cluster_softball" ) )
		{
			ClusterRocket_Detonate_Softball( projectile, normal )
			projectile.GrenadeExplode( normal )
		}
		//Arcball ammo
		else if( mods.contains( "arcball_softball" ) )
		{
			thread DetonateStickyAfterTime( projectile, 0.0, normal )
		}
		//Smoke ammo
		else if( mods.contains( "smoke_softball" ) )
		{
			ElectricGrenadeSmokescreen_Softball( projectile, FX_ELECTRIC_SMOKESCREEN_PILOT_AIR )
			thread DestroySoftballProjectile( projectile, 4.0)
		}
		//Gravity ammo
		else if( mods.contains( "gravity_softball" ) )
		{
			thread GravityGrenadeThink_Softball( projectile, hitEnt, normal, pos )
		}
		//Emp Grenade ammo
		else if( mods.contains( "emp_softball" ))
		{
			thread DetonateStickyAfterTime( projectile, 0.75, normal )
		}
		//Random ammo
		else if( mods.contains( "error_softball" ) )
		{
			DetonateRandomGrenade( projectile, pos, normal, hitEnt, hitbox, isCritical )
		}
		// StickyBomb ammo
		else if( mods.contains( "stickybomb_launcher" ) )
		{
			thread TrapDestroyOnDamage( projectile )
			projectile.proj.savedOrigin = normal
		}
		//Default ammo
		else
		{
			thread DetonateStickyAfterTime( projectile, FUSE_TIME, normal )
		}
	#endif
}

void function DetonateRandomGrenade( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	#if SERVER
		entity player = projectile.GetOwner()
		switch( RandomInt(5) )
		{
			case 0:
				thread ThermiteBurn_Softball( 2.0, player, projectile )
				return
			case 1:
				thread SonarGrenadeThink_Softball( projectile )
				thread DestroySoftballProjectile( projectile, 6.0 )
				return
			case 2:
				ElectricGrenadeSmokescreen_Softball( projectile, FX_ELECTRIC_SMOKESCREEN_PILOT_AIR )
				thread DestroySoftballProjectile( projectile, 4.0 )
				return
			case 3:
				ClusterRocket_Detonate_Softball( projectile, normal )
				projectile.GrenadeExplode( normal )
				return
			case 4:
				thread NuclearCoreExplosionChainReaction_Softball( projectile, 3.0, 7, 1.4 )
				return
			//case 5:
			//	thread GravityGrenadeThink_Softball( projectile, hitEnt, normal, pos )
			//	return
			default:
				return
		}
	#endif
}

#if SERVER
// need this so grenade can use the normal to explode
void function DetonateStickyAfterTime( entity projectile, float delay, vector normal )
{
	wait delay
	if ( IsValid( projectile ) )
		projectile.GrenadeExplode( normal )
}

void function DestroySoftballProjectile( entity projectile, float duration )
{
	wait duration
	if ( IsValid( projectile ) )
		projectile.Destroy()
}

void function DetonateGrenadeAfterTime( entity projectile, float delay )
{
	projectile.EndSignal( "OnDestroy" )
	projectile.EndSignal( "DetonateGrenade" )
	// for better client visual
	float startTime = Time()
	OnThreadEnd(
		function() : ( projectile, startTime )
		{
			if( IsValid( projectile ) )
			{
				vector explodePos = projectile.GetOrigin() + projectile.proj.savedOrigin
				projectile.GrenadeExplode( projectile.proj.savedOrigin )
				// visual fix for client hitting near target
				FixImpactEffectForProjectileAtPosition( projectile, explodePos ) // shared from _unpredicted_impact_fix.gnut
			}
		}
	)
	wait delay
}

void function DelayedAddStickyForPlayer( entity player, entity projectile )
{
	wait STICKY_ARM_DELAY
	if( !IsAlive( player ) )
	{
		if( IsValid( projectile ) )
			projectile.Destroy()
		return
	}
	if( IsValid( projectile ) )
		file.playerStickyTable[ player ].append( projectile )
}

void function PlayerStickyManagement( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "PlayerClassChanged" )

	OnThreadEnd(
		function() : ( player )
		{
			array<entity> stickyBombs = file.playerStickyTable[ player ]
			foreach( entity stickyBomb in stickyBombs )
			{
				if( IsValid( stickyBomb ) )
					stickyBomb.Destroy()
			}
			file.playerStickyTable[ player ].clear()
		}
	)
	
	wait STICKY_ARM_DELAY
	player.WaitSignal( "DetonateSticky" )
	waitthread EmitStickyActivateSound( player )
	array<entity> stickyBombs = file.playerStickyTable[ player ]
	foreach( entity stickyBomb in stickyBombs )
	{
		if( IsValid( stickyBomb ) )
			stickyBomb.GrenadeExplode( stickyBomb.proj.savedOrigin )
	}
	file.playerStickyTable[ player ].clear()
}

void function EmitStickyActivateSound( entity player )
{
	array<entity> stickyBombs = file.playerStickyTable[ player ]
	foreach( entity stickyBomb in stickyBombs )
	{
		if( IsValid( stickyBomb ) )
			EmitSoundOnEntity( stickyBomb, "Weapon_R1_Satchel.ArmedBeep" )
	}
	wait STICKY_EXPLOSION_DELAY
}

void function TrapDestroyOnDamage( entity trapEnt )
{
	EndSignal( trapEnt, "OnDestroy" )

	trapEnt.SetDamageNotifications( true )

	var results
	entity attacker
	entity inflictor

	while ( true )
	{
		if ( !IsValid( trapEnt ) )
			return

		results = WaitSignal( trapEnt, "OnDamaged" )
		attacker = expect entity( results.activator )
		inflictor = expect entity( results.inflictor )

		if ( IsValid( inflictor ) && inflictor == trapEnt )
			continue

		bool shouldDamageTrap = false
		if ( IsValid( attacker ) )
		{
			if ( trapEnt.GetTeam() == attacker.GetTeam() )
			{
				shouldDamageTrap = false
			}
			else
			{
				shouldDamageTrap = true
			}
		}

		if ( shouldDamageTrap )
			break
	}

	if ( !IsValid( trapEnt ) )
		return

	trapEnt.Destroy()
}

void function DelayedStartParticleSystem( entity projectile, asset fxAsset )
{
    WaitFrame()
    if( IsValid( projectile ) )
        StartParticleEffectOnEntity( projectile, GetParticleSystemIndex( fxAsset ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
}
#endif // SERVER

void function OnWeaponReload_weapon_moded_softball( entity weapon, int milestoneIndex )
{
	if( !weapon.HasMod( "reload_repeat" ) )
		return

	#if SERVER
		// softball only have one milestone, maybe impossible to fix multiple reload firing
		// do a loop to check whether we've fired grenade in current reload segment?
		//print( "current milestoneIndex is: " + string( milestoneIndex ) )
		entity owner = weapon.GetWeaponOwner()
		if ( !IsValid( owner ) )
			return

		int	attach_id = weapon.LookupAttachment( "muzzle_flash" )
		if ( attach_id < 0 )
			return

		WeaponPrimaryAttackParams attackParams
		attackParams.pos = weapon.GetAttachmentOrigin( attach_id )
		attackParams.dir = GetVectorFromPositionToCrosshair( owner, attackParams.pos )

		var result = OnWeaponPrimaryAttack_weapon_modded_softball( weapon, attackParams )
		if ( result ) // firing succeded
		{
			EmitSoundOnEntityOnlyToPlayer( owner, owner, "Weapon_Softball_Fire_1P" )
			EmitSoundOnEntity( owner, "Weapon_Softball_Fire_3P" )
		}
	#endif
}