
global function HealthRegen_Init

global function PilotHealthRegenThinkSP
global function PilotShieldHealthUpdate

// custom regen settings. can pass a player entity inside to modify per player
global function HealthRegen_SetCustomRegenDelay
global function HealthRegen_ResetCustomRegenDelay
global function HealthRegen_SetCustomRegenRate
global function HealthRegen_ResetCustomRegenRate

global function HealthRegen_SetAlwaysFastRegen
global function HealthRegen_ClearAlwaysFastRegenSettingsOverride // clear settings per player to make them follow global settings
global function HealthRegen_SetDisabled
global function HealthRegen_ClearDisabledSettingsOverride // clear settings per player to make them follow global settings

// shield damaged screen effects
global function HealthRegen_SetPilotShieldDamagedEffectEnabled
global function HealthRegen_SetPilotShieldDamagedEffectType

global enum ePilotShieldDamagedEffectTypes
{
	SEVERITY_DEPEND_ON_SHIELD_LEFT,			// default case: effect hits harder when player reaching low shield. this one is similar to pilot health hud
	SEVERITY_DEPEND_ON_DAMAGE_RECEIVE,		// #PR66 varaint: if we displayed shield value on screen through other scripts, this can be used to change effect severity to depend on current hit's damage
}

struct
{
	float healthRegenRate

	// modified, in-file variables
	float customHealthRegenDelayNormal = -1.0
	float customHealthRegenDelayFast = -1.0
	float customHealthRegenDelayStim = -1.0
	float customHealthRegenRateNormal = -1.0
	float customHealthRegenRateStim = -1.0
	bool alwaysFastRegen = false
	bool disableHealthRegen = false

	// allows change health regen variables per player
	// bit complicated... WIP
	table<entity, float> playerCustomHealthRegenDelayNormal
	table<entity, float> playerCustomHealthRegenDelayFast
	table<entity, float> playerCustomHealthRegenDelayStim
	table<entity, float> playerCustomHealthRegenRateNormal
	table<entity, float> playerCustomHealthRegenRateStim
	table<entity, bool> playerAlwaysFastRegen
	table<entity, bool> playerDisableHealthRegen

	// shield damage screen effect settings
	bool pilotShieldDamagedEffectEnabled = false
	int pilotShieldDamagedEffectType = ePilotShieldDamagedEffectTypes.SEVERITY_DEPEND_ON_SHIELD_LEFT

	// damage feedback variables
	bool isShieldDamage = false
	float shieldActualDamage = 0.0
	bool isShieldBrokeDamage = false
	float shieldBrokeActualDamage = 0.0

	// in-file tables
	table<entity, float> playerNextShieldDamageSoundAllowedTime
} file

void function HealthRegen_Init()
{
	if ( IsSingleplayer() )
	{
		file.healthRegenRate = 1.0
	}
	else
	{
		file.healthRegenRate = 6.0

		AddCallback_PlayerClassChanged( HealthRegen_OnPlayerClassChangedMP )
		RegisterSignal( "PilotHealthRegenThink" )
		RegisterSignal( "StopHealthRegenThink" ) // modify for having different health regen function for each player

		// modified callback in _base_gametype.gnut
		// because PlayerDamageFeedbackStruct definition is in _base_gametype.gnut, which gets compiled later than this file
		// we have to wrap this callback inside
		AddCallback_PlayerDamageFeedback(
			void function( entity victim, var damageInfo, PlayerDamageFeedbackStruct feedbackStruct )
			{
				if ( file.isShieldDamage )
				{
					feedbackStruct.damageToDisplay = file.shieldActualDamage
				}
				if ( file.isShieldBrokeDamage ) // for pilot taking a damage that will break shield, display the correct damage amount
				{
					//print( "pilot taking shield broke damage!" )
					feedbackStruct.damageToDisplay = file.shieldBrokeActualDamage
				}

				// everything should be cleaned up once this function gets called
				file.isShieldDamage = false
				file.shieldActualDamage = 0
				file.isShieldBrokeDamage = false
				file.shieldBrokeActualDamage = 0
			}
		)
		// modified to handle in-file table
		AddCallback_OnClientConnected( HealthRegen_OnClientConnected )
	}
}

void function PilotHealthRegenThinkSP( entity player )
{
	player.EndSignal( "OnDestroy" )

	while ( IsValid( player ) )
	{
		wait( HEALTH_REGEN_TICK_TIME )

		if ( !IsAlive( player ) )
			continue

		if ( !IsPilot( player ) )
			continue

		if ( shGlobal.proto_pilotHealthRegenDisabled )
			continue

		//Assert( IsTestMap() || player.GetPlayerSettings() == DEFAULT_PILOT_SETTINGS, "for now, we should all be pilot_solo at all times, or in a test map." )

		if ( player.GetHealth() == player.GetMaxHealth() )
			continue

		float healthRegenRate = 4.0
		float healthRegenStartDelay = GraphCapped( player.GetHealth(), 0, player.GetMaxHealth(), 3.0, 0.8 )

		//printt( "recentDamage " + recentDamage + " delay " + healthRegenStartDelay + " rate " + healthRegenRate )

		if ( Time() - player.p.lastDamageTime < healthRegenStartDelay )
		{
			continue
		}

		player.SetHealth( min( player.GetMaxHealth(), player.GetHealth() + healthRegenRate ) )
	}
}

bool function IsHealActive( entity player )
{
	return StatusEffect_Get( player, eStatusEffect.stim_visual_effect ) > 0.0
}

void function PilotHealthRegenThinkMP( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.Signal( "PilotHealthRegenThink" )
	player.EndSignal( "PilotHealthRegenThink" )
	player.EndSignal( "StopHealthRegenThink" ) // modify for having different health regen function for each player

	float healthRegenStartDelay = 5.0 //Needs to use GetPlayerSettingsField() instead of hard coding, waiting on Bug 129567
	//float healthRegenStartDelay = player.GetPlayerSettingsField( "powerRegenRateOp" ) // seconds after we take damager to start regen

	// why do we cache these things here? what if we update passives mid-way??
	//if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
	//	healthRegenStartDelay = 2.5

	while ( IsValid( player ) )
	{
		wait( HEALTH_REGEN_TICK_TIME )

		if ( !IsAlive( player ) )
			continue

		if ( !IsPilot( player ) )
			continue

		// change to use wrapped function to get less hardcoded, and supports custom settings
		//if ( shGlobal.proto_pilotHealthRegenDisabled )
		if ( HealthRegenDisabled( player ) )
			continue

		// change to use wrapped function to get less hardcoded, and supports custom settings
		//float healthRegenRate = file.healthRegenRate 	// health regen per tick
		float healthRegenRate = GetPlayerHealthRegenRate( player )

		if ( player.GetHealth() == player.GetMaxHealth() )
			continue

		// No regen during phase shift
		if ( player.IsPhaseShifted() )
			continue

		// modified: update health regen delay each loop
		// now also changes function to be wrapped
		/*
		healthRegenStartDelay = 5.0
		if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
			healthRegenStartDelay = 2.5
		*/
		healthRegenStartDelay = GetPlayerHealthRegenDelay( player )

		// modified settings!!!
		// now change to use wrapped function to get less hardcoded, and supports custom settings
		// this may enable us to have a longer health regen delay for stim than normal regen?
		/*
		if ( IsHealActive( player ) )
		{
			if ( Time() - player.p.lastDamageTime < min( ABILITY_STIM_REGEN_DELAY, healthRegenStartDelay ) )
				continue
			else
				healthRegenRate = healthRegenRate * ABILITY_STIM_REGEN_MOD
		}
		else if ( Time() - player.p.lastDamageTime < healthRegenStartDelay )
		{
			continue
		}
		*/
		// when having wrapped functions working, using this is good enough
		if ( Time() - player.p.lastDamageTime < healthRegenStartDelay )
		{
			continue
		}

		player.SetHealth( min( player.GetMaxHealth(), player.GetHealth() + healthRegenRate ) )
		if ( player.GetHealth() == player.GetMaxHealth() )
		{
			ClearRecentDamageHistory( player )
			ClearLastAttacker( player )
		}
	}
}

void function HealthRegen_OnPlayerClassChangedMP( entity player )
{
	thread PilotHealthRegenThinkMP( player )
}

// APEX version
float function PilotShieldHealthUpdate( entity player, var damageInfo )
{
	//print( "Running PilotShieldHealthUpdate()" )
	if ( DamageInfo_GetForceKill( damageInfo ) )
	{
		//player.SetShieldHealth( 0 )
		SetShieldHealthWithFix( player, 0 )
		return 0.0
	}

	int shieldHealth = GetShieldHealthWithFix( player )

	float shieldDamage = 0

	if ( shieldHealth )
	{
		DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )

		shieldDamage = PilotShieldModifyDamage( player, damageInfo )

		//if ( shieldDamage )
		//	DamageInfo_SetDamage( damageInfo, shieldDamage )
	}

	return shieldDamage
}

// modified to handle in-file table
void function HealthRegen_OnClientConnected( entity player )
{
	// init everything
	file.playerNextShieldDamageSoundAllowedTime[ player ] <- 0.0 // always valid on next hit
}

// from PR#65(https://github.com/DBmaoha/Super.Mixed.Game/pull/65)
// vanilla missing visual effect consts
// sound effects
const string PILOT_SHIELD_DAMAGE_SOUND = "titanshield_light_bulletimpact_3p_vs_1p"
const string PILOT_SHIELD_DAMAGE_SOUND_BULLET = "titanshieldwall_light_bulletimpact_1p_vs_3p" // sound when getting hit by bullets( sadly "titanshield_heavy_bulletimpact_3p_vs_1p" sounds identical to light impact one )
const string PILOT_SHIELD_DAMAGE_SOUND_EXPLOSION = "titanshield_explosive_bulletimpact_3p_vs_1p" // sound when getting hit by explosive damage
const string PILOT_SHIELD_DAMAGE_SOUND_ELECTRICAL = "titanshield_energy_bulletimpact_3p_vs_1p" // sound when getting hit by electrical damage
const string PILOT_SHIELD_DAMAGE_SOUND_MELEE = "titanshield_meleeimpact_3p_vs_1p" // sound when getting hit by melee

const float PILOT_SHIELD_DAMAGE_SOUND_INTERVAL_MIN = 0.25 // prevent sound spaming to player
const float PILOT_SHIELD_DAMAGE_SOUND_INTERVAL_MAX = 0.35

// visual effects
const float PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MIN = 0.1
const float PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MAX = 0.4
const float PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MIN = 0.4
const float PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MAX = 0.8
const float PILOT_SHIELD_DAMAGE_EFFECT_FADEOUT_DURATION = 0.5

const float PILOT_SHIELD_BROKE_EFFECT_SEVERITY = 0.5
const float PILOT_SHIELD_BROKE_EFFECT_DURATION = 1.0
const float PILOT_SHIELD_BROKE_EFFECT_FADEOUT_DURATION = 0.5

// PR#66(https://github.com/DBmaoha/Super.Mixed.Game/pull/66) visual effects variant
// use stronger effects, severity is based on player damage receiving
const float PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MIN_DAMAGE = 0.2
const float PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MAX_DAMAGE = 0.6
const float PILOT_SHIELD_DAMAGE_EFFECT_MAX_DAMAGE_FRAC = 0.5 // if shield taking damage more than this fraction, we do maxnium effects
const float PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MIN_DAMAGE = 1.0
const float PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MAX_DAMAGE = 2.0
const float PILOT_SHIELD_DAMAGE_EFFECT_FADEOUT_DURATION_DAMAGE = 1.0

const float PILOT_SHIELD_BROKE_EFFECT_SEVERITY_DAMAGE = 1.0
const float PILOT_SHIELD_BROKE_EFFECT_DURATION_DAMAGE = 1.5 // shorter hold time, so we can better fadeout it
const float PILOT_SHIELD_BROKE_EFFECT_FADEOUT_DURATION_DAMAGE = 1.5


float function PilotShieldModifyDamage( entity player, var damageInfo )
{
	float shieldHealth = float( GetShieldHealthWithFix( player ) )
	float shieldHealthMax = float( GetShieldHealthMaxWithFix( player ) )
	float damage = DamageInfo_GetDamage( damageInfo )

	float newShieldHealth = shieldHealth - damage
	float permanentDamage = 0.0

	if ( newShieldHealth < 0 )
		permanentDamage = fabs( newShieldHealth )

	//player.SetShieldHealth( maxint( 0, int( newShieldHealth ) ) )
	SetShieldHealthWithFix( player, maxint( 0, int( newShieldHealth ) ) )

	// no where uses this, moved down
	//entity attacker = DamageInfo_GetAttacker( damageInfo )

	// shield on-hit sound, from PR#65
	if ( Time() > file.playerNextShieldDamageSoundAllowedTime[ player ] )
	{
		int damageTypes = DamageInfo_GetCustomDamageType( damageInfo )
		string shieldHitSound = GetPilotShieldDamagedSound( damageTypes )
		EmitSoundOnEntityOnlyToPlayer( player, player, shieldHitSound )

		// add sound cooldown
		float nextSoundInterval = RandomFloatRange( PILOT_SHIELD_DAMAGE_SOUND_INTERVAL_MIN, PILOT_SHIELD_DAMAGE_SOUND_INTERVAL_MAX )
		file.playerNextShieldDamageSoundAllowedTime[ player ] = Time() + nextSoundInterval
	}
	//else
	//	print( "player still in shield damage sound cooldown!" )

	// visual effect handle
	// from PR#65
	if ( shieldHealth > 0 ) // we at least need some shield before triggering following stuffs
	{
		if ( newShieldHealth <= 0 ) // shield cracked!
		{
			//print( "We got shield broke effect!" )

			// vanilla behavior( actually no where used until I modify it )
			//EmitSoundOnEntity( player, "titan_energyshield_down" )

			// from PR#65
			// add better visual and sound effect
			EmitSoundOnEntityOnlyToPlayer( player, player, "titan_energyshield_down_1P" ) // play 1p crack sound!!
			EmitSoundOnEntityExceptToPlayer( player, player, "titan_energyshield_down" ) // 3p crack sound to others

			// shield damaged effect enable with a setting
			if ( file.pilotShieldDamagedEffectEnabled )
			{
				float effectSeverity = PILOT_SHIELD_BROKE_EFFECT_SEVERITY
				float effectDuration = PILOT_SHIELD_BROKE_EFFECT_DURATION
				float fadeoutDuration = PILOT_SHIELD_BROKE_EFFECT_FADEOUT_DURATION
				// #PR66 variant: stronger effects
				if ( file.pilotShieldDamagedEffectType == ePilotShieldDamagedEffectTypes.SEVERITY_DEPEND_ON_DAMAGE_RECEIVE )
				{
					effectSeverity = PILOT_SHIELD_BROKE_EFFECT_SEVERITY_DAMAGE
					effectDuration = PILOT_SHIELD_BROKE_EFFECT_DURATION_DAMAGE
					fadeoutDuration = PILOT_SHIELD_BROKE_EFFECT_FADEOUT_DURATION_DAMAGE
				}
				//print( "effectSeverity: " + string( effectSeverity ) )
				//print( "effectDuration: " + string( effectDuration ) )
				//print( "fadeoutDuration: " + string( fadeoutDuration ) )
				
				StatusEffect_AddTimed( player, eStatusEffect.emp, effectSeverity, effectDuration, fadeoutDuration )
			}
		}
		else // shield taking normal damage
		{
			//print( "We got shield damage effect!" )

			// effect severity and duration is based on player's current shield / max shield health. which means when player having low shield, the effect lasts longer to alert them
			// this one is similar to pilot health hud
			// shield damaged effect enable with a setting
			if ( file.pilotShieldDamagedEffectEnabled )
			{
				float effectSeverity = GraphCapped( newShieldHealth, shieldHealthMax, 0, PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MIN, PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MAX )
				float effectDuration = GraphCapped( newShieldHealth, shieldHealthMax, 0, PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MIN, PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MAX )
				float fadeoutDuration = PILOT_SHIELD_DAMAGE_EFFECT_FADEOUT_DURATION
				// #PR66 variant: effect severity is based on damage receive. which means when player taking massive damage, the effect hits harder to alert them
				// this one can have better visual when we display player's shield value on screen with other scripts
				if ( file.pilotShieldDamagedEffectType == ePilotShieldDamagedEffectTypes.SEVERITY_DEPEND_ON_DAMAGE_RECEIVE )
				{
					effectSeverity = GraphCapped( damage, 0, shieldHealthMax * PILOT_SHIELD_DAMAGE_EFFECT_MAX_DAMAGE_FRAC, PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MIN_DAMAGE, PILOT_SHIELD_DAMAGE_EFFECT_SEVERITY_MAX_DAMAGE )
					effectDuration = GraphCapped( newShieldHealth, shieldHealthMax, 0, PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MIN_DAMAGE, PILOT_SHIELD_DAMAGE_EFFECT_DURATION_MAX_DAMAGE )
					fadeoutDuration = PILOT_SHIELD_DAMAGE_EFFECT_FADEOUT_DURATION_DAMAGE
				}
				//print( "effectSeverity: " + string( effectSeverity ) )
				//print( "effectDuration: " + string( effectDuration ) )
				//print( "fadeoutDuration: " + string( fadeoutDuration ) )

				StatusEffect_AddTimed( player, eStatusEffect.emp, effectSeverity, effectDuration, fadeoutDuration )
			}
		}
	}

	// for changing damage notification
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	bool attackerIsPlayer = IsValid( attacker ) && attacker.IsPlayer()

	// damage handle
	if ( permanentDamage > 0 ) // shield cracked and player taking health damage
	{
		//print( "Shield Modified damage is: " + string( permanentDamage ) )
		// change damage display value if attacker is a player
		if ( attackerIsPlayer )
		{
			file.isShieldBrokeDamage = true
			file.shieldBrokeActualDamage = damage
		}

		DamageInfo_SetDamage( damageInfo, permanentDamage )

		//if ( permanentDamage >= player.GetHealth() ) // defensive fix, now handled in _codecallbacks.gnut
		//	player.SetShieldHealth( 0 )
	}
	else // damage is protected. if this case triggered, it must means damage has been fully protected, no any health damage dealt to player
	{
		//print( "Damage protected by pilot shield!" )
		// change damage display value if attacker is a player
		if ( attackerIsPlayer )
		{
			file.isShieldDamage = true
			file.shieldActualDamage = damage
		}

		DamageInfo_SetDamage( damageInfo, 0 ) // safe to cast damage to 0, because we're now directly modifying damage feedback sending to players
	}

	return min( shieldHealth, damage )
}

// modified function
string function GetPilotShieldDamagedSound( int damageTypes )
{
	string shieldHitSound = PILOT_SHIELD_DAMAGE_SOUND // default sound

	if ( damageTypes & DF_BULLET ) // bullet damage specific sound
		shieldHitSound = PILOT_SHIELD_DAMAGE_SOUND_BULLET
	if ( damageTypes & DF_EXPLOSION ) // explosion damage specific sound, overrides bullets
		shieldHitSound = PILOT_SHIELD_DAMAGE_SOUND_EXPLOSION
	if ( damageTypes & DF_ELECTRICAL ) // electrical damage specific sound, overrides explosion and bullets
		shieldHitSound = PILOT_SHIELD_DAMAGE_SOUND_ELECTRICAL
	if ( damageTypes & DF_MELEE ) // melee damage specific sound, has highest priority
		shieldHitSound = PILOT_SHIELD_DAMAGE_SOUND_MELEE

	//print( "shieldHitSound: " + shieldHitSound )
	return shieldHitSound
}

/*
float function PilotShieldHealthUpdate( entity player, var damageInfo )
{
	if ( DamageInfo_GetForceKill( damageInfo ) )
	{
		//player.SetShieldHealth( 0 )
		SetShieldHealthWithFix( player, 0 )
		return 0.0
	}

	int shieldHealth = GetShieldHealthWithFix( player )

	//float shieldDamage = 0
	float permanentDamage = 0.0

	if ( shieldHealth )
	{
		DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )

		//shieldDamage = PilotShieldModifyDamage( player, damageInfo )
		permanentDamage = PilotShieldModifyDamage( player, damageInfo )

		//if ( shieldDamage )
		//	DamageInfo_SetDamage( damageInfo, 0 )
		if( !permanentDamage )
			DamageInfo_SetDamage( damageInfo, 0 )
	}

	//return shieldDamage
	return permanentDamage
}

float function PilotShieldModifyDamage( entity player, var damageInfo )
{
	float shieldHealth = float( GetShieldHealthWithFix( player ) )
	float damage = DamageInfo_GetDamage( damageInfo )

	float newShieldHealth = shieldHealth - damage
	float permanentDamage = 0.0

	//if ( newShieldHealth < 0 )
		//permanentDamage = fabs( newShieldHealth )
	if ( newShieldHealth < 0 )
		permanentDamage = fabs( newShieldHealth ) - shieldHealth

	//player.SetShieldHealth( maxint( 0, int( newShieldHealth ) ) )
	SetShieldHealthWithFix( player, maxint( 0, int( newShieldHealth ) ) )

	if ( shieldHealth && newShieldHealth <= 0 )
	{
		EmitSoundOnEntity( player, "titan_energyshield_down" )
	}

	DamageInfo_SetDamage( damageInfo, permanentDamage )

	//return min( shieldHealth, damage )
	return permanentDamage
}
*/

// modified
void function HealthRegen_SetCustomRegenDelay( float normalRegenDelay, float fastRegenDelay, float stimRegenDelay, entity player = null )
{
	// if passed an player entity inside, modify their settings per entity
	if ( IsValid( player ) )
	{
		if ( !( player in file.playerCustomHealthRegenDelayNormal ) )
			file.playerCustomHealthRegenDelayNormal[ player ] <- normalRegenDelay
		else
			file.playerCustomHealthRegenDelayNormal[ player ] = normalRegenDelay
		
		if ( !( player in file.playerCustomHealthRegenDelayFast ) )
			file.playerCustomHealthRegenDelayFast[ player ] <- fastRegenDelay
		else
			file.playerCustomHealthRegenDelayFast[ player ] = fastRegenDelay

		if ( !( player in file.playerCustomHealthRegenDelayStim ) )
			file.playerCustomHealthRegenDelayStim[ player ] <- stimRegenDelay
		else
			file.playerCustomHealthRegenDelayStim[ player ] = stimRegenDelay
	}
	else
	{
		file.customHealthRegenDelayNormal = normalRegenDelay
		file.customHealthRegenDelayFast = fastRegenDelay
		file.customHealthRegenDelayStim = stimRegenDelay
	}
}

void function HealthRegen_ResetCustomRegenDelay( entity player = null )
{
	// if passed an player entity inside, reset their entity custom settings instead of global one
	if ( IsValid( player ) )
	{
		if ( player in file.playerCustomHealthRegenDelayNormal )
			delete file.playerCustomHealthRegenDelayNormal[ player ]
		if ( player in file.playerCustomHealthRegenDelayFast )
			delete file.playerCustomHealthRegenDelayFast[ player ]
		if ( player in file.playerCustomHealthRegenDelayStim )
			delete file.playerCustomHealthRegenDelayStim[ player ]
	}
	else
	{
		file.customHealthRegenDelayNormal = -1
		file.customHealthRegenDelayFast = -1
		file.customHealthRegenDelayStim = -1
	}
}

float function GetPlayerHealthRegenDelay( entity player )
{
	// vanilla values & modified checks
	float healthRegenStartDelay = 5.0
	bool shouldDoFastRegen = ShouldUseFastRegen( player ) // modified check!
	bool shouldDoStimRegen = IsHealActive( player )
	if ( shouldDoFastRegen )
		healthRegenStartDelay = 2.5
	// stim modifier
	// in vanilla, when stim is active, game will always pick shortest regen delay between each
	// but we may want to adjust it freely, like adding some penalty to stim, so changing that behavior!
	// it does not break vanilla behavior because vanilla always have stim regen delay shorter than fast regen
	if ( shouldDoStimRegen )
		healthRegenStartDelay = ABILITY_STIM_REGEN_DELAY


	// custom health regen settings!!!
	// first check player's own settings, then check global settings
	if ( player in file.playerCustomHealthRegenDelayNormal )
		healthRegenStartDelay = file.playerCustomHealthRegenDelayNormal[ player ]
	else if ( file.customHealthRegenDelayNormal > 0 )
		healthRegenStartDelay = file.customHealthRegenDelayNormal
	
	if ( shouldDoFastRegen )
	{
		if ( player in file.playerCustomHealthRegenDelayFast )
			healthRegenStartDelay = file.playerCustomHealthRegenDelayFast[ player ]
		else if ( file.customHealthRegenDelayFast > 0 )
			healthRegenStartDelay = file.customHealthRegenDelayFast
	}

	if ( shouldDoStimRegen )
	{
		if ( player in file.playerCustomHealthRegenDelayStim )
			healthRegenStartDelay = file.playerCustomHealthRegenDelayStim[ player ]
		else if ( file.customHealthRegenDelayStim > 0 )
			healthRegenStartDelay = file.customHealthRegenDelayStim
	}
	
	return healthRegenStartDelay
}

void function HealthRegen_SetCustomRegenRate( float normalRegenRate, float stimRegenRate, entity player = null )
{
	// if passed an player entity inside, modify their settings per entity
	if ( IsValid( player ) )
	{
		if ( !( player in file.playerCustomHealthRegenRateNormal ) )
			file.playerCustomHealthRegenRateNormal[ player ] <- normalRegenRate
		else
			file.playerCustomHealthRegenRateNormal[ player ] = normalRegenRate
		
		if ( !( player in file.playerCustomHealthRegenRateStim ) )
			file.playerCustomHealthRegenRateStim[ player ] <- stimRegenRate
		else
			file.playerCustomHealthRegenRateStim[ player ] = stimRegenRate
	}
	else
	{
		file.customHealthRegenRateNormal = normalRegenRate
		file.customHealthRegenRateStim = stimRegenRate
	}
}

void function HealthRegen_ResetCustomRegenRate( entity player = null )
{
	// if passed an player entity inside, reset their entity custom settings instead of global one
	if ( IsValid( player ) )
	{
		if ( player in file.playerCustomHealthRegenRateNormal )
			delete file.playerCustomHealthRegenRateNormal[ player ]
		if ( player in file.playerCustomHealthRegenRateStim )
			delete file.playerCustomHealthRegenRateStim[ player ]
	}
	else
	{
		file.customHealthRegenRateNormal = -1
		file.customHealthRegenRateStim = -1
	}
}

float function GetPlayerHealthRegenRate( entity player )
{
	float healthRegenRate = file.healthRegenRate // default value
	bool shouldDoStimRegen = IsHealActive( player )
	if ( shouldDoStimRegen )
		healthRegenRate = healthRegenRate * ABILITY_STIM_REGEN_MOD

	// custom health regen settings!!!
	// first check player's own settings, then check global settings
	if ( player in file.playerCustomHealthRegenRateNormal )
		healthRegenRate = file.playerCustomHealthRegenRateNormal[ player ]
	else if ( file.customHealthRegenRateNormal > 0 )
		healthRegenRate = file.customHealthRegenRateNormal
	
	if ( shouldDoStimRegen )
	{
		if ( player in file.playerCustomHealthRegenRateStim )
			healthRegenRate = file.playerCustomHealthRegenRateStim[ player ]
		else if ( file.customHealthRegenRateStim > 0 )
			healthRegenRate = file.customHealthRegenRateStim
	}
	
	return healthRegenRate
}

void function HealthRegen_SetAlwaysFastRegen( bool shouldAlways, entity player = null )
{
	// if passed an player entity inside, modify their settings per entity
	if ( IsValid( player ) )
	{
		if ( !( player in file.playerAlwaysFastRegen ) )
			file.playerAlwaysFastRegen[ player ] <- shouldAlways
		else
			file.playerAlwaysFastRegen[ player ] = shouldAlways
	}
	else
		file.alwaysFastRegen = shouldAlways
}

void function HealthRegen_ClearAlwaysFastRegenSettingsOverride( entity player )
{
	// clear settings per player to make them follow global settings
	if ( player in file.playerAlwaysFastRegen )
		delete file.playerAlwaysFastRegen[ player ]
}

bool function ShouldUseFastRegen( entity player = null )
{
	// player related checks
	if ( IsValid( player ) )
	{
		// vanilla checks, overrides custom settings if returns true
		if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
			return true
	
		// custom health regen settings
		if ( player in file.playerAlwaysFastRegen )
			return file.playerAlwaysFastRegen[ player ]
	}

	// default return value: global settings
	return file.alwaysFastRegen
}

void function HealthRegen_SetDisabled( bool disabled, entity player = null )
{
	// if passed an player entity inside, modify their settings per entity
	if ( IsValid( player ) )
	{
		if ( !( player in file.playerDisableHealthRegen ) )
			file.playerDisableHealthRegen[ player ] <- disabled
		else
			file.playerDisableHealthRegen[ player ] = disabled
	}
	else
		file.disableHealthRegen = disabled
}

void function HealthRegen_ClearDisabledSettingsOverride( entity player )
{
	// clear settings per player to make them follow global settings
	if ( player in file.playerDisableHealthRegen )
		delete file.playerDisableHealthRegen[ player ]
}

bool function HealthRegenDisabled( entity player = null )
{
	// vanilla checks, overrides custom settings if returns true
	if ( shGlobal.proto_pilotHealthRegenDisabled )
		return true

	// player related checks( custom health regen settings )
	if ( IsValid( player ) && player in file.playerDisableHealthRegen )
		return file.playerDisableHealthRegen[ player ]

	// default return value: global settings
	return file.disableHealthRegen
}

void function HealthRegen_SetPilotShieldDamagedEffectEnabled( bool enabled )
{
	file.pilotShieldDamagedEffectEnabled = enabled
}

void function HealthRegen_SetPilotShieldDamagedEffectType( int effectType )
{
	file.pilotShieldDamagedEffectType = effectType
}