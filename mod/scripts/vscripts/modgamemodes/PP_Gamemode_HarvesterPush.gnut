global function PP_GameMode_HarvesterPush_init

void function PP_GameMode_HarvesterPush_init()
{
	ScoreEvent_SetupEarnMeterValuesForMixedModes()
	SetTimeoutWinnerDecisionFunc( CheckScoreForDraw )
    AddCallback_GameStateEnter( eGameState.Playing, OnStart )
    // register things for ingame script
    if( GetGameState() >= eGameState.Prematch )
    {
        foreach( entity player in GetPlayerArray() )
            OnClientConnected( player )
    }
    AddCallback_OnClientConnected( OnClientConnected )
    ClassicMP_ForceDisableEpilogue( true )
    RegisterSignal( "OnHarvesterDamaged" )
}

int function HarvesterHealth( int playercount )
{
    return playercount * 30000
}

HarvesterStruct& mlt_harvester
HarvesterStruct& imc_harvester

int function CheckScoreForDraw()
{
	if ( GameRules_GetTeamScore( TEAM_IMC ) > GameRules_GetTeamScore( TEAM_MILITIA ) )
		return TEAM_IMC
	else if ( GameRules_GetTeamScore( TEAM_MILITIA ) > GameRules_GetTeamScore( TEAM_IMC ) )
		return TEAM_MILITIA

	return TEAM_UNASSIGNED
}

void function OnStart()
{
    imc_harvester = CreateHarvester(HarvesterSpawn(TEAM_IMC), TEAM_IMC)
    mlt_harvester = CreateHarvester(HarvesterSpawn(TEAM_MILITIA), TEAM_MILITIA)
    thread HarvesterAlarm( TEAM_IMC )
    thread HarvesterAlarm( TEAM_MILITIA )
    thread HarvesterThink( TEAM_IMC )
    thread HarvesterThink( TEAM_MILITIA )
    thread UpdateHarvesterHealth( TEAM_IMC )
    thread UpdateHarvesterHealth( TEAM_MILITIA )
}

void function OnClientConnected( entity player )
{
    RegisterMusicForPlayer( player )
    //ChangeHarvesterHealth( player.GetTeam() )
}

void function OnClientDisconnected( entity player )
{
    //ChangeHarvesterHealth( player.GetTeam() )
}

void function RegisterMusicForPlayer( entity player )
{
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, \"music_mp_fd_intro_medium\", TEAM_IMC )" )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, \"music_mp_fd_intro_medium\", TEAM_MILITIA ) " )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, \"music_mp_fd_victory\", TEAM_IMC )" )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, \"music_mp_fd_victory\", TEAM_MILITIA ) " )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, \"music_mp_fd_defeat\", TEAM_IMC )" )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, \"music_mp_fd_defeat\", TEAM_MILITIA ) " )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.GAMEMODE_1, \"music_mp_fd_midwave\", TEAM_IMC )" )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.GAMEMODE_1, \"music_mp_fd_midwave\", TEAM_MILITIA ) " )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.GAMEMODE_2, \"music_mp_fd_finalwave\", TEAM_IMC )" )
    ClientCommand( player, "script_client RegisterLevelMusicForTeam( eMusicPieceID.GAMEMODE_2, \"music_mp_fd_finalwave\", TEAM_MILITIA ) " )
}

vector function HarvesterSpawn(int faction)
{
    switch(GetMapName())
    {
        case "mp_grave":
            if(faction == TEAM_MILITIA)
                return < -2095.63, -6398.55, 2007.82>
            if(faction == TEAM_IMC)
                return <10011.9, -2631.74, 1983.93>
        case "mp_forwardbase_kodai":
            if(faction == TEAM_MILITIA)
                return < -2671.81, -3190.73, 808.011>
            if(faction == TEAM_IMC)
                return <2926.22, 4521.36, 951.901>
        case "mp_homestead":
            if(faction == TEAM_MILITIA)
                return < -3659.06, -3302.12, -132.8>
            if(faction == TEAM_IMC)
                return <4888.3, 2406.64, -7.65577>
        case "mp_thaw":
            if(faction == TEAM_MILITIA)
                return < -2253.96, -1792.2, -441.865>
            if(faction == TEAM_IMC)
                return <3585.88, -1165.69, -397.739>
        case "mp_black_water_canal":
            if(faction == TEAM_MILITIA)
                return <4185.43, -4163.5, -384.334>
            if(faction == TEAM_IMC)
                return <184.474, 4710.04, -259.684>
        case "mp_eden":
            if(faction == TEAM_MILITIA)
                return < -2886.93, 3281.42, 183.178>
            if(faction == TEAM_IMC)
                return <5166.67, -556.965, 65.3856>
        case "mp_drydock":
            if(faction == TEAM_IMC)
                return  < 361.064, 2761.95, 75.6206>
            if(faction == TEAM_MILITIA)
                return <86.0857, -3310.51, 121.475>

        case "mp_crashsite3":
            if(faction == TEAM_MILITIA)
                return < -8654.2, -2276.57, 688.617>
            if(faction == TEAM_IMC)
                return < -2982.09, 758.406, 538.314>
        case "mp_complex3":
            if(faction == TEAM_IMC)
                return < -1250.14, 274.873, 520.031>
            if(faction == TEAM_MILITIA)
                return < -7807.6, -742.319, 576.031>
        case "mp_angel_city":
            if(faction == TEAM_IMC)
                return <3713.02, -2010.57, 200.031>
            if(faction == TEAM_MILITIA)
                return < -3959.31, 5090.34, 53.0326>
        case "mp_thaw":
            if(faction == TEAM_IMC)
                return < -2253.96, -1792.2, -441.865>
            if(faction == TEAM_MILITIA)
                return <3585.88, -1165.69, -397.739>
        case "mp_colony02":
            if(faction == TEAM_MILITIA)
                return < -3690.07, -2561.87, 130.734>
            if(faction == TEAM_IMC)
                return <2520.25, 4328.48, 45.9353>
        case "mp_glitch":
            if(faction == TEAM_IMC)
                return < -3938.93, 388.643, 16.3832>
            if(faction == TEAM_MILITIA)
                return <3452.95, -73.5616, 17.1179>
        case "mp_rise":
            if(faction == TEAM_IMC)
                return  <3113.88, 3252.98, 26.0435>
            if(faction == TEAM_MILITIA)
                return < -4600.35, -370.299, 384.031>
        case "mp_wargames":
            if(faction == TEAM_IMC)
                return <733.18, -3161.25, -127.969>
            if(faction == TEAM_MILITIA)
                return < -4465.59, 2250.65, -91.7064>
        case "mp_relic02":
            if(faction == TEAM_IMC)
                return  < -5330.51, -2909.03, 296.389>
            if(faction == TEAM_MILITIA)
                return <5461.16, -4804.2, 98.1662>
    }
    unreachable
}

HarvesterStruct function CreateHarvester( vector pos, int team )
{
    int playercount = GetPlayerArray().len()
    if( playercount == 0 )
        playercount = 1
    HarvesterStruct harvesterstruct = SpawnHarvester(pos,< 0,0,0 >, HarvesterHealth(playercount),10000,TEAM_MILITIA)
    SetTeam(harvesterstruct.harvester, team)
    harvesterstruct.harvester.Minimap_SetAlignUpright( true )
    harvesterstruct.harvester.Minimap_AlwaysShow( TEAM_IMC, null )
    harvesterstruct.harvester.Minimap_AlwaysShow( TEAM_MILITIA, null )
    harvesterstruct.harvester.Minimap_SetHeightTracking( true )
    harvesterstruct.harvester.Minimap_SetZOrder( MINIMAP_Z_OBJECT )
    harvesterstruct.harvester.Minimap_SetCustomState( eMinimapObject_prop_script.FD_HARVESTER )
    //DispatchSpawn(fd_harvester)
    Highlight_SetEnemyHighlight( harvesterstruct.harvester, "hunted_enemy" )
    Highlight_SetFriendlyHighlight( harvesterstruct.harvester, "hunted_friendly" )
    AddEntityCallback_OnDamaged(harvesterstruct.harvester, OnHarvesterDamaged)

    return harvesterstruct
}

void function HarvesterThink( int team )
{
    entity harvester
    if( team == TEAM_MILITIA )
        harvester = mlt_harvester.harvester
    if( team == TEAM_IMC )
        harvester = imc_harvester.harvester

    HarvesterStruct harvesterstruct
    if( team == TEAM_MILITIA )
        harvesterstruct = mlt_harvester
    if( team == TEAM_IMC )
        harvesterstruct = imc_harvester

    if( IsValid(harvester) )
    {
        EmitSoundOnEntity( harvester,"coop_generator_startup" )

        float lastTime = Time()
        wait 4
        int lastShieldHealth = harvester.GetShieldHealth()
        generateBeamFX( harvesterstruct )
        generateShieldFX( harvesterstruct )

        EmitSoundOnEntity( harvester, "coop_generator_ambient_healthy" )

        bool isRegening = false // stops the regenning sound to keep stacking on top of each other

        while ( IsAlive( harvester ) )
        {
            float currentTime = Time()
            float deltaTime = currentTime -lastTime

            if ( IsValid( harvesterstruct.particleShield ) )
            {
                vector shieldColor = GetShieldTriLerpColor(1.0-(harvester.GetShieldHealth().tofloat()/harvester.GetShieldHealthMax().tofloat()))
                EffectSetControlPointVector( harvesterstruct.particleShield, 1, shieldColor )
            }

            if( IsValid( harvesterstruct.particleBeam ) )
            {
                vector beamColor = GetShieldTriLerpColor( 1.0 - (harvester.GetHealth().tofloat() / harvester.GetMaxHealth().tofloat() ) )
                EffectSetControlPointVector( harvesterstruct.particleBeam, 1, beamColor )
            }

            if ( harvesterstruct.harvester.GetShieldHealth() == 0 )
                if( IsValid( harvesterstruct.particleShield ) )
                    harvesterstruct.particleShield.Destroy()

            if ( ( ( currentTime-harvesterstruct.lastDamage) >= GENERATOR_SHIELD_REGEN_DELAY ) && ( harvester.GetShieldHealth() < harvester.GetShieldHealthMax() ) )
            {
                if( !IsValid(harvesterstruct.particleShield) )
                    generateShieldFX(harvesterstruct)

                //printt((currentTime-fd_harvester.lastDamage))

                if(harvester.GetShieldHealth()==0)
                    EmitSoundOnEntity(harvester,"coop_generator_shieldrecharge_start")

                if (!isRegening)
                {
                    EmitSoundOnEntity( harvester,"coop_generator_shieldrecharge_resume" )
                    harvesterstruct.harvesterShieldDown = false
                    isRegening = true
                }

                //float newShieldHealth = ( harvester.GetShieldHealthMax() / GENERATOR_SHIELD_REGEN_TIME * deltaTime ) + harvester.GetShieldHealth()
                //Reduced shield regen rate
                float newShieldHealth = ( harvester.GetShieldHealthMax()*0.1 / GENERATOR_SHIELD_REGEN_TIME * deltaTime ) + harvester.GetShieldHealth()
                
                if ( newShieldHealth >= harvester.GetShieldHealthMax() )
                {
                    StopSoundOnEntity(harvester,"coop_generator_shieldrecharge_resume")
                    harvester.SetShieldHealth(harvester.GetShieldHealthMax())
                    EmitSoundOnEntity(harvester,"coop_generator_shieldrecharge_end")
                    
                    PlayFactionDialogueToTeam( "fortwar_baseShieldUpFriendly", TEAM_IMC )
                    isRegening = false
                }
                else
                {
                    harvester.SetShieldHealth(newShieldHealth)
                }
            } else if ( ( ( currentTime-harvesterstruct.lastDamage) < GENERATOR_SHIELD_REGEN_DELAY ) && ( harvester.GetShieldHealth() < harvester.GetShieldHealthMax() ) )
                isRegening = false

            if ( ( lastShieldHealth > 0 ) && ( harvester.GetShieldHealth() == 0 ) )
                EmitSoundOnEntity(harvester,"coop_generator_shielddown")

            lastShieldHealth = harvester.GetShieldHealth()
            lastTime = currentTime
            WaitFrame()
        }
    }

}

void function OnHarvesterDamaged(entity harvester, var damageInfo)
{
    if ( !IsValid( harvester ) )
        return

    HarvesterStruct harvesterstruct
    if( harvester.GetTeam() == TEAM_MILITIA )
        harvesterstruct = mlt_harvester
    if( harvester.GetTeam() == TEAM_IMC )
        harvesterstruct = imc_harvester

    if( harvesterstruct.harvester != harvester )
        return

    /*
    if ( GetGlobalNetTime( "FD_harvesterInvulTime" ) > Time() )
    {
        harvester.SetShieldHealth( harvester.GetShieldHealthMax() )
        return
    }
    */

    int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
    entity attacker = DamageInfo_GetAttacker( damageInfo )
    float damageAmount = DamageInfo_GetDamage( damageInfo )

    if ( !damageSourceID && !damageAmount && !attacker )
        return

    harvesterstruct.lastDamage = Time()

    float shieldPercent = ( (harvester.GetShieldHealth().tofloat() / harvester.GetShieldHealthMax()) * 100 )

    if ( shieldPercent < 100 && !harvesterstruct.harvesterShieldDown)
        PlayFactionDialogueToTeam( "fortwar_baseEnemyAllyAttacking", GetOtherTeam(harvester.GetTeam()) )

    if ( harvester.GetShieldHealth() == 0 )
    {
        if( !harvesterstruct.harvesterShieldDown )
        {
            PlayFactionDialogueToTeam( "fortwar_baseShieldDownFriendly", harvester.GetTeam() )
            PlayFactionDialogueToTeam( "fortwar_baseShieldDownEnemy", GetOtherTeam(harvester.GetTeam()) )
            harvesterstruct.harvesterShieldDown = true // prevent shield dialogues from repeating
        }
        harvesterstruct.harvesterDamageTaken = harvesterstruct.harvesterDamageTaken + damageAmount // track damage for wave recaps
        float newHealth = harvester.GetHealth() - damageAmount
        float oldhealthpercent = ( ( harvester.GetHealth().tofloat() / harvester.GetMaxHealth() ) * 100 )
        float healthpercent = ( ( newHealth / harvester.GetMaxHealth() ) * 100 )

        if (healthpercent <= 75 && oldhealthpercent > 75) // we don't want the dialogue to keep saying "Harvester is below 75% health" everytime they take additional damage
        {
            PlayFactionDialogueToTeam( "fortwar_baseDmgFriendly75", harvester.GetTeam() )
            PlayFactionDialogueToTeam( "fortwar_baseDmgEnemy75", GetOtherTeam(harvester.GetTeam()) )
        }

        if (healthpercent <= 50 && oldhealthpercent > 50)
        {
            PlayFactionDialogueToTeam( "fortwar_baseDmgFriendly50", harvester.GetTeam() )
            PlayFactionDialogueToTeam( "fortwar_baseDmgEnemy50", GetOtherTeam(harvester.GetTeam()) )
        }

        if (healthpercent <= 25 && oldhealthpercent > 25)
        {
            PlayFactionDialogueToTeam( "fortwar_baseDmgFriendly25", harvester.GetTeam() )
            PlayFactionDialogueToTeam( "fortwar_baseDmgEnemy25", GetOtherTeam(harvester.GetTeam()) )
        }

        if (healthpercent <= 10)
        {
            //PlayFactionDialogueToTeam( "fd_baseLowHealth", TEAM_MILITIA )
        }

        if( newHealth <= 0 )
        {
            EmitSoundAtPosition(TEAM_UNASSIGNED,harvesterstruct.harvester.GetOrigin(),"coop_generator_destroyed")
            newHealth = 0
            //PlayFactionDialogueToTeam( "fd_baseDeath", TEAM_MILITIA )
            harvesterstruct.rings.Destroy()
            harvesterstruct.harvester.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
        }
        harvester.SetHealth( newHealth )
        harvesterstruct.havesterWasDamaged = true
    }

    if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_titancore_laser_cannon )
        DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo )/100 ) // laser core shreds super well for some reason

    if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_titanweapon_meteor ||
         DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_titanweapon_flame_wall ||
         DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_titanability_slow_trap
    )
        DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo )/2 )

    if ( attacker.IsPlayer() )
    {
        attacker.NotifyDidDamage( harvester, DamageInfo_GetHitBox( damageInfo ), DamageInfo_GetDamagePosition( damageInfo ), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamage( damageInfo ), DamageInfo_GetDamageFlags( damageInfo ), DamageInfo_GetHitGroup( damageInfo ), DamageInfo_GetWeapon( damageInfo ), DamageInfo_GetDistFromAttackOrigin( damageInfo ) )
        //attacker.AddToPlayerGameStat( PGS_PILOT_KILLS, DamageInfo_GetDamage( damageInfo ) * 0.01 )
    }
    
}

void function HarvesterAlarm( int team )
{
    entity harvester
    if( team == TEAM_MILITIA )
        harvester = mlt_harvester.harvester
    if( team == TEAM_IMC )
        harvester = imc_harvester.harvester

    while(IsAlive(harvester))
    {
        if(harvester.GetShieldHealth()==0)
        {
            wait EmitSoundOnEntity(harvester,"coop_generator_underattack_alarm")
        }
        else
        {
            WaitFrame()
        }
    }
}

void function ChangeHarvesterHealth( int team )
{
    entity harvester
    if( team == TEAM_MILITIA )
        harvester = mlt_harvester.harvester
    if( team == TEAM_IMC )
        harvester = imc_harvester.harvester

    int enemycount = GetPlayerArrayOfTeam(GetOtherTeam(team)).len()
    if( enemycount == 0 )
        enemycount = 1
    if( IsValid(harvester) )
    {
        harvester.SetMaxHealth( HarvesterHealth(enemycount) )
        harvester.SetHealth( HarvesterHealth(enemycount) * GetHealthFrac( harvester ) )
        harvester.SetShieldHealthMax( int(HarvesterHealth(enemycount)*0.05) )
        return
    }
}

void function UpdateHarvesterHealth( int team )
{
    entity harvester
    if( team == TEAM_MILITIA )
        harvester = mlt_harvester.harvester
    if( team == TEAM_IMC )
        harvester = imc_harvester.harvester
    
    while( true )
    {
        if( IsValid(harvester) )
        {
            GameRules_SetTeamScore(team, harvester.GetHealth() )
            WaitFrame()
        }
        else
        {
            SetWinner( GetOtherTeam(team) )
            break
        }
    }
}