untyped

global function Merry_Christmas_Gamemode_Init

struct
{
    array<string> chatterDisabledPlayers = [] // chatter cooldown
} file

const array<string> XMAS_MELEE_WEAPONS =
[
    "melee_pilot_kunai",
    "melee_pilot_sword"
]

void function Merry_Christmas_Gamemode_Init()
{
    // main mechanic
    AddDamageCallback( "player", ReduceAllDamage ) // AddPostDamageCallback() can't handle this
    IgnoreEquipmentsFilter( "All" ) // never uses equipments filter

    // little adjustments
    AddCallback_GameStateEnter( eGameState.Playing, OnGameStart )
    AddCallback_OnPlayerRespawned( OnPlayerRespawned )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerGetsLoadout )

    ClassicMP_ForceDisableEpilogue( true ) // annoying evac
    Riff_ForceBoostAvailability( eBoostAvailability.Disabled )

    SetPlayerDeathsHidden( true ) // let's not count player's deaths!

    Melee_SetSyncedMeleeNoLimit( true )
    MeleeSyncedNoLimit_EnableMeleeWeaponExecution( true )
    MeleeSyncedNoLimit_EnableFriendlyExecution( true ) // player can only execute friendly players, not enemies!
    AddDeathCallback( "player", AddScoreForFriendlyKilled ) // forced scoreEvent lol
    
    SetShouldFUCKOFFCLOAK( true ) // fuck off

    SetShouldPlayFactionDialogue( false ) // don't announce player!

    AddCallback_OnClientConnected( OnClientConnected )

    SetWaitingForPlayersMaxDuration( 3.0 ) // so you don't have to wait so freaking long

    // enable together with BaseForcedPlaylist_Init()
    ForcedPlaylist_SetShouldInstantlyChangeMap( true ) // change maps instantly
    //ForcedPlaylist_SetPlaylistTypeOverrides( "Modded" ) // only change to mod maps

    // enable together with Nessy_EnableAllFunny_Init()
    Nessie_SetBatterySpawnEnabled( true )
    Nessie_SetFunnyFlagEnabled( true ) // good to have this
    Nessie_AlwaysSpawnRGBStuff( true ) // all spawnings will become rgb
    Nessie_SetWorldMaxNessieCount( 80 ) // more fun? was 128 guess it's a bit too much

    FriendlyFire_SetEnabled( true ) // bull shit
}

void function OnGameStart()
{
    foreach( entity player in GetPlayerArray() )
        thread DisableBoostBar( player ) // starting will re-enable player's boost, lets set it to disable again
    
    // disable all oob timers, will crash after postmatch's OutOfBoundsDisable()
    /*
    if ( MERRY_CHRISTMAS )
    {
        foreach( entity trigger in GetEntArrayByClass_Expensive( "trigger_out_of_bounds" ) )
        {
            #if MP
                trigger.DisconnectOutput( "OnStartTouch", EntityEnterOutOfBoundsTrig )
                trigger.DisconnectOutput( "OnEndTouch", EntityLeaveOutOfBoundsTrig )
            #else
                trigger.DisconnectOutput( "OnStartTouch", EntityOutOfBounds )
                trigger.DisconnectOutput( "OnEndTouch", EntityBackInBounds )
            #endif
        }
    }
    */
}

void function ReduceAllDamage( entity player, var damageInfo )
{
    if( DamageInfo_GetForceKill( damageInfo ) )
        return // force kill still take effect

    DamageInfo_SetDamage( damageInfo, 1 ) // at least make epgs able to rocket jump
}

void function OnClientConnected( entity player )
{
    AddPlayerHeldButtonEventCallback( player, IN_USE, SayCornerUs, 0.3 )
	AddButtonPressedPlayerInputCallback( player, IN_USE, LungeToAnotherPlayer )
	AddPlayerHeldButtonEventCallback( player, IN_USE_AND_RELOAD, SayCornerUs, 0.7 )
	AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, LungeToAnotherPlayer )
}

void function SayCornerUs( entity player )
{
	if( file.chatterDisabledPlayers.contains( player.GetUID() ) )
		return
	EmitSoundOnEntity( player, "diag_sp_intro_WD104_24_01_mcor_grunt1" )
	thread ChatterCooldownManagement( player )
}

void function ChatterCooldownManagement( entity player )
{
	string uid = player.GetUID()
	file.chatterDisabledPlayers.append( uid )
	wait 2
	file.chatterDisabledPlayers.removebyvalue( uid )
}

void function LungeToAnotherPlayer( entity player )
{
	if( player.Lunge_IsActive() ) // clear last lunge
	{
		player.Lunge_SetTargetEntity( null, false )
		return
	}
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 65535, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
		return
	if( !traceResult.hitEnt.IsPlayer() && !traceResult.hitEnt.IsNPC() )
		return
	entity lungeTarget = traceResult.hitEnt
	player.Lunge_SetTargetEntity( lungeTarget, false )
	player.Lunge_EnableFlying()
	player.Lunge_SetSmoothTime( 3.0 )
}

void function OnPlayerRespawned( entity player )
{
    SyncedMelee_Disable( player ) // can't execute enemies!
    thread DisableBoostBar( player ) // no boosts allowed!

    // funny things really showing up!
    thread DelayedTryRGBHighlight( player )
    thread TitleFlash( player, ["聖誕快樂", "剩蛋快樂"] )
    thread RainbowWeaponSkin( player )
    thread RainbowPlayerSkin( player )
    //thread HoloFlash_Loop( player, 0.3 ) // was 0.000001, almost WaitFrame()
}

void function DelayedTryRGBHighlight( entity player )
{
    wait 1
    if ( IsValid( player ) )
        thread RGB_Highlight( player, true, true )
}

void function DisableBoostBar( entity player )
{
    WaitFrame()
    if( IsValid( player ) )
        PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

// little balance change
void function OnPlayerGetsLoadout( entity player, PilotLoadoutDef p )
{
    // instantly take all weapons
    foreach ( entity weapon in player.GetMainWeapons() )
        player.TakeWeaponNow( weapon.GetWeaponClassName() )
    foreach ( entity weapon in player.GetOffhandWeapons() )
        player.TakeWeaponNow( weapon.GetWeaponClassName() )

    // funny weapons and skills!!!
    player.GiveWeapon( "mp_weapon_epg", ["rocket_jumper", "grenadier_low_damage", "infinite_clip", "pas_fast_swap"] )
    //player.GiveWeapon( "mp_weapon_semipistol", ["gibber_pistol", "silencer", "extended_ammo"] )
    player.GiveWeapon( "mp_weapon_lstar", ["lagging_lstar", "extended_ammo", "pas_fast_swap", "burn_mod_lstar"] )
    player.GiveWeapon( "mp_weapon_softball", ["northstar_softball", "no_damage", "pas_fast_reload", "pas_fast_swap"] )
    player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_SPECIAL, ["jump_pad", "infinite_jump_pad"] )
    player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_ORDNANCE, ["zipline_gun", "infinite_duration_zipline"] )
    player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_INVENTORY, ["anti_gravity_star", "gravity_mine"] )
    //player.GiveOffhandWeapon( "mp_titanability_hover", OFFHAND_ANTIRODEO, ["jet_pack"] ) // controller don't have this, use a passive skill

    // let players knockback enemies!
    entity meleeWeapon = player.GetOffhandWeapon( OFFHAND_MELEE )
    if ( IsValid( meleeWeapon ) )
        player.TakeWeaponNow( meleeWeapon.GetWeaponClassName() )

    string newMeleeName = XMAS_MELEE_WEAPONS[ RandomInt( XMAS_MELEE_WEAPONS.len() ) ]
    player.GiveOffhandWeapon( newMeleeName, OFFHAND_MELEE, ["dash_melee", "pushback_melee"] )
}

void function AddScoreForFriendlyKilled( entity victim, var damageInfo )
{
    entity attacker = DamageInfo_GetAttacker( damageInfo )
    if( IsValid( attacker ) )
    {
        if( attacker.IsPlayer() )
        {
            attacker.AddToPlayerGameStat( PGS_KILLS, 1 )
            attacker.AddToPlayerGameStat( PGS_PILOT_KILLS, 1 )
        }
    }
}