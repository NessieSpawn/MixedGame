untyped // entity.s requires this
global function GameModifier_Dash_Titan_Init

struct
{
    float gravityScale = 0.8
    float playerGroundFriction = 0.8
} file

void function GameModifier_Dash_Titan_Init()
{
    AddCallback_OnPlayerRespawned( OnPlayerRespawned )
    AddCallback_OnPilotBecomesTitan( OnPilotBecomesTitan )
    AddSpawnCallback( "npc_titan", OnTitanSpawned )

    // find from playlistvar
    file.gravityScale = GetCurrentPlaylistVarFloat( "dashtitan_gravity_scale", 0.8 )
    file.playerGroundFriction = GetCurrentPlaylistVarFloat( "dashtitan_friction_scale", 0.8 )
}

void function OnPlayerRespawned( entity player )
{
    // custom utility: permanent movement settings
    SetPlayerGravityPermanent( player, file.gravityScale )
    SetPlayerGroundFrictionPermanent( player, file.playerGroundFriction )
}

void function OnPilotBecomesTitan( entity player, entity titan )
{
    // custom utility: permanent movement settings, set for player's titan state
    SetPlayerGravityPermanent( player, file.gravityScale )
    SetPlayerGroundFrictionPermanent( player, file.playerGroundFriction )
}

void function OnTitanSpawned( entity titan )
{
    titan.kv.gravity = file.gravityScale

    // following are player titans( pet titans )
	entity player = GetPetTitanOwner( titan )
	if( !IsValid( player ) )
		return
	if ( "spawnWithoutSoul" in titan.s )
	{
		// this is defined in CreateAutoTitanForPlayer_ForTitanTitanReplace_BecomesPilot(), mark the titan as "disembarked" not "hotdropping"
		if ( expect bool ( titan.s.spawnWithoutSoul ) )
			return
	}

    string meleeName = "melee_titan_punch_ion"
    entity meleeWeapon = titan.GetMeleeWeapon()
    if ( IsValid( meleeWeapon ) )
    {
        meleeName = meleeWeapon.GetWeaponClassName()
        if ( meleeName == "melee_titan_sword" ) // ronin sword
        {
            meleeName = "melee_titan_punch_northstar"
            MeleeSyncedTitan_SetSoulShouldReplaceLoadoutOnExecution( titan.GetTitanSoul(), true ) // make them use execution callbacks
        }
    }
    titan.TakeOffhandWeapon( OFFHAND_MELEE )
    titan.GiveOffhandWeapon( meleeName, OFFHAND_MELEE, ["dash_punch", "big_punch"] )

    // plasma railgun pushback only!
    foreach ( entity mainWeapon in titan.GetMainWeapons() )
    {
        if ( mainWeapon.GetWeaponClassName() == "mp_titanweapon_sniper" )
            mainWeapon.AddMod( "knockback_sniper" )
    }
}