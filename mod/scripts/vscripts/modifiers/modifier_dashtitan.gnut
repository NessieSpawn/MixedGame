untyped // entity.s requires this
global function GameModifier_Dash_Titan_Init

const float INTRO_LENGTH = 8.0

struct
{
    float gravityScale = 0.8
    float playerGroundFriction = 0.8
} file

void function GameModifier_Dash_Titan_Init()
{
    Riff_ForceSetSpawnAsTitan( eSpawnAsTitan.Always )
    Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )
    ClassicMP_SetCustomIntro( TTDMIntroSetup, INTRO_LENGTH ) // shared from _gamemode_ttdm.nut

    AddCallback_OnPlayerRespawned( OnPlayerRespawned )
    AddCallback_OnPilotBecomesTitan( OnPilotBecomesTitan )
    AddSpawnCallback( "npc_titan", OnTitanSpawned )

    // find from playlistvar
    file.gravityScale = GetCurrentPlaylistVarFloat( "dashtitan_gravity_scale", 0.8 )
    file.playerGroundFriction = GetCurrentPlaylistVarFloat( "dashtitan_friction_scale", 0.8 )
}

void function OnPlayerRespawned( entity player )
{
    // custom utility: permanent movement settings
    SetPlayerGravityPermanent( player, file.gravityScale )
    SetPlayerGroundFrictionPermanent( player, file.playerGroundFriction )
}

void function OnPilotBecomesTitan( entity player, entity titan )
{
    // custom utility: permanent movement settings, set for player's titan state
    SetPlayerGravityPermanent( player, file.gravityScale )
    SetPlayerGroundFrictionPermanent( player, file.playerGroundFriction )
}

void function OnTitanSpawned( entity titan )
{
    titan.kv.gravity = file.gravityScale

    // following are player titans( pet titans )
	entity player = GetPetTitanOwner( titan )
	if( !IsValid( player ) )
		return
	if ( "spawnWithoutSoul" in titan.s )
	{
		// this is defined in CreateAutoTitanForPlayer_ForTitanTitanReplace_BecomesPilot(), mark the titan as "disembarked" not "hotdropping"
		if ( expect bool ( titan.s.spawnWithoutSoul ) )
			return
	}

    string meleeName = "melee_titan_punch_ion"
    entity meleeWeapon = titan.GetMeleeWeapon()
    if ( IsValid( meleeWeapon ) )
    {
        meleeName = meleeWeapon.GetWeaponClassName()
        if ( meleeName == "melee_titan_sword" ) // ronin sword
        {
            meleeName = "melee_titan_punch_northstar"
            //MeleeSyncedTitan_SetSoulShouldReplaceLoadoutOnExecution( titan.GetTitanSoul(), true ) // make them use execution callbacks
        }
    }

    // plasma railgun pushback only!
    if ( GetCurrentPlaylistVarInt( "dashtitan_pushback_railgun", 1 ) == 1 )
    {
        foreach ( entity mainWeapon in titan.GetMainWeapons() )
        {
            if ( mainWeapon.GetWeaponClassName() == "mp_titanweapon_sniper" )
                mainWeapon.AddMod( "knockback_sniper" )
        }
    }

    // below are soul settings
    entity soul = titan.GetTitanSoul()

    // class mods
    // add turbo titan, replace turbo engine with hyper core
    if ( IsValid( soul ) )
    {
        if ( GetCurrentPlaylistVarInt( "dashtitan_enable_turbo", 1 ) == 1 )
        {
            TitanLoadoutDef loadout = soul.soul.titanLoadout
            if ( loadout.setFileMods.contains( "pas_mobility_dash_capacity" ) ) // has turbo engine
            {
                // change to PAS_HYPER_CORE
                GivePassive( soul, ePassives.PAS_HYPER_CORE )
                if ( TitanDamageRewardsTitanCoreTime() )
                {
                    SoulTitanCore_SetNextAvailableTime( soul, 0.20 )
                    GiveOffhandElectricSmoke( titan )
                }
            }
            // these mods gets applied on player embark!
            loadout.setFileMods.removebyvalue( "pas_mobility_dash_capacity" )
            loadout.setFileMods.append( "turbo_titan" )
        }
    
        titan.TakeOffhandWeapon( OFFHAND_MELEE )
        array<string> mods = ["dash_punch", "big_punch"]
        // "big_punch_anim_berserker" is for atlas chassis animation
        if ( GetSoulTitanSubClass( soul ) == "atlas" )
            mods.append( "big_punch_anim_berserker" )
        else
            mods.append( "big_punch_anim_punch" )
        titan.GiveOffhandWeapon( meleeName, OFFHAND_MELEE, mods )
    }
}