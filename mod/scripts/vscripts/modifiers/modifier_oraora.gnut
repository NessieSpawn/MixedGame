untyped // ent.s requires this
global function GameModifier_OraOra_Init

const array<string> ORAORA_PLAYLIST = 
[
    "mp_glitch",
    "mp_colony02",
    "mp_wargames",
    "mp_eden",
    "mp_drydock",
    "mp_black_water_canal",
    "mp_thaw",
    "mp_grave",
    "mp_homestead",
    "mp_forwardbase_kodai",
    "mp_angel_city",
]

void function GameModifier_OraOra_Init()
{
    Riff_ForceTitanAvailability( eTitanAvailability.Never )
	Riff_ForceBoostAvailability( eBoostAvailability.Disabled )

    SetWeaponDropsEnabled( false )
	SetLoadoutGracePeriodEnabled( false )
    HealthRegen_Disabled( true )
    // register things for ingame script
    if( GetGameState() >= eGameState.Prematch )
    {
        foreach( entity player in GetPlayerArray() )
            InitPlayerStat( player )
    }
    AddCallback_OnClientConnected( InitPlayerStat )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPilotGetLoadout )
    AddCallback_OnTouchHealthKit( "item_titan_battery", OnBatteryCollected )
    AddCallback_GameStateEnter( eGameState.Postmatch, OnGamePostmatch )
    AddDeathCallback( "player", OnPlayerDead )

    // buff pilots
	AddDamageByCallback( "npc_pilot_elite", NerfPilotMelee )

    // skip intro and make things faster!
	ClassicMP_SetCustomIntro( ClassicMP_DefaultNoIntro_Setup, 3.0 )
    SetWaitingForPlayersMaxDuration( 0.0 ) // so you don't have to wait so freaking long
}

void function InitPlayerStat( entity player )
{
    player.s.fighterStrike <- 0
}

bool function OnBatteryCollected( entity player, entity battery )
{
    if( !IsAlive( player ) )
        return false
    if( player.GetHealth() == player.GetMaxHealth() )
        return false
    entity shieldFXHandle = StartParticleEffectOnEntity_ReturnEntity( player, GetParticleSystemIndex( $"P_xo_armor_body_CP" ), FX_PATTACH_POINT_FOLLOW, player.LookupAttachment( "CHESTFOCUS" ) )
    //EmitSoundOnEntityOnlyToPlayer( player, player, "UI_TitanBattery_Pilot_Give_TitanBattery" )
    bool amped = false
    if( "isAmped" in battery.s )
    {
        if( battery.s.isAmped )
        {
            EffectSetControlPointVector( shieldFXHandle, 1, < 255, 165, 0 > )
            player.SetHealth( player.GetMaxHealth() )
            amped = true
        }
        else
        {
            EffectSetControlPointVector( shieldFXHandle, 1, < 115, 247, 255 > )
            player.SetHealth( min( player.GetMaxHealth(), player.GetHealth() + player.GetMaxHealth() * 0.5 ) )
        }
        MessageToPlayer( player, eEventNotifications.Rodeo_PilotAppliedBatteryToYou, player, amped )
        return true
    }
    EffectSetControlPointVector( shieldFXHandle, 1, < 115, 247, 255 > )
    player.SetHealth( min( player.GetMaxHealth(), player.GetHealth() + player.GetMaxHealth() * 0.5 ) )
    MessageToPlayer( player, eEventNotifications.Rodeo_PilotAppliedBatteryToYou, player, amped )
    return true
}

void function OnPlayerDead( entity victim, var damageInfo )
{
    entity battery = Rodeo_CreateBatteryPack()
    battery.s.touchEnabledTime <- 999999 // don't allow players to pick up batteries
    Highlight_SetNeutralHighlight( battery, "sp_friendly_hero" )
    
    if( victim.s.fighterStrike >= 3 )
    {
        battery.s.isAmped <- true
        battery.SetSkin( 2 )
        battery.Highlight_SetParam( 0, 0, < 100,100,0 > )
    }
    else
    {
        battery.s.isAmped <- false
        battery.Highlight_SetParam( 0, 0, < 0,100,0 > )
    }
    battery.SetOrigin( victim.GetOrigin() + < 0,0,10 > )
    battery.SetVelocity( < 0,0,5 > )

    victim.s.fighterStrike = 0
    entity attacker = DamageInfo_GetAttacker( damageInfo )
    if( IsValid( attacker ) )
    {
        if( attacker.IsPlayer() && attacker != victim )
            attacker.s.fighterStrike += 1
    }

    entity pilot = CreateNPC( "npc_pilot_elite", TEAM_BOTH, victim.GetOrigin(), victim.GetAngles() )//CreateNPC( "npc_soldier", team, pos, rot )
    pilot.SetMaxHealth( 10000 )
    pilot.SetHealth( 10000 )
    Highlight_SetEnemyHighlight( pilot, "enemy_player" )
    DispatchSpawn( pilot ) // don't delayed dispatchSpawn()
    array<entity> npcPilots = GetNPCArrayByClass( "npc_pilot_elite" )
    if ( npcPilots.len() > 32 )
    {
        int index = npcPilots.len() - 1
        if ( IsValid( npcPilots[index] ) )
            npcPilots[index].Destroy()
    }
}

void function NerfPilotMelee( entity victim, var damageInfo )
{
	// make npc pilots powerful?
	DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * 0.1 )
}

void function OnPilotGetLoadout( entity player, PilotLoadoutDef p )
{
    player.SetMaxHealth( 500 )
    player.SetHealth( 500 )
    TakeAllWeapons( player )
    thread DisableBoostBar( player )
    SyncedMelee_Disable( player )
    //player.GiveWeapon( "mp_weapon_gunship_missile", ["pilot_emptyhanded"] )
    player.GiveWeapon( "mp_weapon_arc_launcher", ["smoke_launcher" ,"at_unlimited_ammo", ] )
    player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL, ["zipline_gun", "infinite_duration_zipline"] )
    player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_ORDNANCE, ["jump_pad", "infinite_jump_pad"] )
    player.GiveOffhandWeapon( "mp_weapon_deployable_cover", OFFHAND_ANTIRODEO, ["deployable_dome_shield"] )
    player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_INVENTORY, ["wraith_portal", "amped_tacticals"] )
    //player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_ORDNANCE, ["ninja_projectile"] )
    //player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", OFFHAND_SPECIAL, ["ninja_projectile"] )
    player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, ["fighter_melee", "fake_human_melee", "jetpack_fx_melee"] )
}

void function DisableBoostBar( entity player )
{
    WaitFrame()
    if( IsValid( player ) )
        PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function OnGamePostmatch()
{
    array<string> curPlayList = ORAORA_PLAYLIST
    int mapIndex = curPlayList.find( GetMapName() )
    mapIndex += 1 // next map index
	if( mapIndex == curPlayList.len() ) // reached last map?
		mapIndex = 0
	string nextMap = curPlayList[mapIndex]

    ServerCommand( "map " + nextMap )
}