untyped // GiveExtraWeaponMod() requires untyped

global function GameModifier_Fake_Titanfall1_Init

// titan health system
const int TITAN_SHIELD_BASE = 1000 // every chassis will have 1000 shield by default
const int TITAN_SHIELD_PER_SEGMENT = 500 // shield value scale with health segments
const int TITAN_HEALTH_PER_SEGMENT = 1500
const float TITAN_DOOMED_HEALTH_FRAC = 1.0 // fake ttf1 behavior: doomed health is almost same as undoomed health

const bool ENABLE_TITAN_SHIELD_REGEN = true
const float FAKETF1_TITAN_SHIELD_REGEN_DELAY = TITAN_SHIELD_REGEN_DELAY
const float FAKETF1_TITAN_SHIELD_REGEN_TIME = TITAN_SHIELD_REGEN_TIME * 0.6667 // ~4.0. maybe try TITAN_SHIELD_REGEN_TIME * 0.5? ( 3.0 )
const float TITAN_SHIELD_DAMAGE_REDUCTION = 0.7 // titan shield no longer protects full damage
// doomed state
const bool DOOMED_HEALTH_MATCH_MAX_HEALTH = true // if enabled, titan's doomed health will be the same as their base health
const bool ENABLE_INFINITE_DOOMED_STATE = false // titan will start lose health on doom
const float DOOMED_HEALTH_LOSS_DAMAGE_SCALE = 0.8

// core ability
const bool DISABLE_TITAN_CORE_ON_DOOM = false // UNFINISHED. needs to rework most of the titancore ability before we can use this... should keep off for now
const float TITAN_CORE_BUILD_MULTIPLIER = 1.5 // due titans have lowered health, should give them higher core build? or make a core-recharge-overtime system?

// pilot health settings
const bool ENABLE_ALWAYS_FAST_REGEN = false
const float PILOT_HEALTH_MULTIPLAYER = 1.25

// rodeo settings
const float BATTERY_REMOVAL_DAMAGE_SCALE = 0.6667 // take less damage from battery removal( current: 1500 -> 1000 ); without classic rodeo: 0.8(1200)
const float RODEO_GRENADE_DAMAGE_SCALE = 0.5 // without classic rodeo: value 0.6667, take higher damage from rodeo grenades( current: 750 -> ~1000 ); with classic rodeo: grenades are used to finish-off a titan, no need to increase damage
const float BATTERY_REGEN_SCALE = 1.3333 // regen more health from batteries( current: 750 -> ~1000 )
const float BATTERY_SHIELD_REGEN_SCALE = 0.0 // battery never regen shields. instead, start recharging shields like campaign( done in OnTitanGetsBatteryHeal() )
const float UPGRADE_CORE_SHIELD_REGEN_SCALE = 0.0 // for handling upgrade core, make it start regen shields instead of instant restore( handled in OnTitanCoreUsed() )
// classic rodeo
const bool FAKETF1_CLASSIC_RODEO = true
const float CLASSIC_RODEO_DAMAGE_SCALE = 1.0

// announcement
const string ANSI_COLOR_END = "\x1b[0m"
const string ANSI_COLOR_BLUE = "\x1b[38;5;81m"
const string ANSI_COLOR_RED = "\x1b[38;5;196m"
const string ANSI_COLOR_ORANGE = "\x1b[38;5;208m"
const string ANSI_COLOR_YELLOW = "\x1b[38;5;11m"

const array<string> CONNECTING_NOTIFICATIONS = 
[
	ANSI_COLOR_YELLOW + "启用了仿照泰坦陨落1的泰坦血量机制" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "泰坦在被拔去电池后可以被直接攻击电池舱，造成破盾伤害" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "泰坦护盾自动恢复，但护盾仅提供减伤，无法完全免除伤害" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "泰坦蓝血上限下降，黄血上限增加但会自动流失" + ANSI_COLOR_END,
    ANSI_COLOR_ORANGE + "泰坦自带冲刺+1，快速冲刺恢复，核心获取加快（若装备涡轮引擎将替换为超级核心）" + ANSI_COLOR_END,
    ANSI_COLOR_ORANGE + "泰坦获取电池或升级后不会立刻补满护盾，而是开始恢复护盾" + ANSI_COLOR_END,
    //ANSI_COLOR_BLUE + "铁驭生命值为1.25倍，自带快速恢复血量（若已装备快速恢复将获得强力电池）" + ANSI_COLOR_END,
    ANSI_COLOR_BLUE + "铁驭生命值为1.25倍，不可用快速恢复（若装备快速恢复将替换为强力电池）" + ANSI_COLOR_END,
    ANSI_COLOR_BLUE + "铁驭反泰坦武器弹药无限" + ANSI_COLOR_END,
]

// hard to control.. respawn almost didn't add any support for ttf1-like core meter
// needs to rework most of the titancore ability before we can use this...

struct CoreWeapon
{
    string weapon
    array<string> mods
}

struct
{
    table<entity, CoreWeapon> soulStoredCoreWeapon
} file

void function GameModifier_Fake_Titanfall1_Init()
{
    // notifications
    AddCallback_OnClientConnected( OnClientConnected )

    // score
    // use prematch for game modifiers to setup score
    AddCallback_GameStateEnter( eGameState.Prematch, SetUpFakeTTF1ScoreEvent )

    // rodeo modifier settings!
    // classic rodeo now handled separently by ClassicRodeo_SetBatteryRemovalDamageFlags(), this is added for normal rodeoing!
    //Rodeo_SetBatteryRemovalDamageFlags( damageTypes.rodeoBatteryRemoval | DF_BYPASS_SHIELD ) // rodeo will deal bvpass_shield damage to titans
    Rodeo_SetBatteryRemovalDamageScale( BATTERY_REMOVAL_DAMAGE_SCALE )
    Rodeo_SetRodeoGrenadeDamageScale( RODEO_GRENADE_DAMAGE_SCALE ) 
    //Rodeo_BatteryRemovalKillsDoomedTitan( false ) // rodeo battery removal and grenade won't instant kill doomed titan
    Rodeo_SetBatteryRegenScale( BATTERY_REGEN_SCALE ) 
    Rodeo_SetBatteryShieldRegenScale( BATTERY_SHIELD_REGEN_SCALE ) 

    // modified settings
    UpgradeCore_SetShieldRegenScale( UPGRADE_CORE_SHIELD_REGEN_SCALE ) // modified settings in mp_titancore_upgrade.nut

    // classic rodeo modifier settings!
    ClassicRodeo_SetEnabled( FAKETF1_CLASSIC_RODEO ) // enable fake-ttf1 rodeo style
	ClassicRodeo_SetRodeoAttackDamageScale( CLASSIC_RODEO_DAMAGE_SCALE ) // damage taken from classic rodeo
    // this has default to be true
	//ClassicRodeo_BatteryContainerOnlyProtectsOnce( true ) // battery container can only protect once

    // death package
    DeathPackage_TitanAlwaysGibOnDeath( false ) // titan won't alwasy be gibbed on death

    // damage effect
    TitanHealth_EnableHealthChickletFX( true ) // modified function in _titan_triple_health.gnut, enable segment lose effect
    Titan_EnableStaggerOnRepeatDamage( true ) // modified in sh_titan.gnut, enable stagger on repeat damage

    // titan settings
    AddSpawnCallback( "npc_titan", OnTitanSpawned )
    AddCallback_OnTitanGetsNewTitanLoadout( OnTitanGetsLoadout )
    AddCallback_OnTitanDoomed( OnTitanDoomed ) // doomed settings
    AddBatteryHealCallback( OnTitanGetsBatteryHeal ) // battery never regen shields. instead, start recharging shields like campaign
    AddCallback_OnTitanCoreUsed( OnTitanCoreUsed ) // for handling upgrade core, make it start regen shields instead of instant restore

    // pilot settings
    AddCallback_PlayerClassChanged( OnPlayerChangeClass )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPilotGetsLoadout )

    // hard to control.. respawn almost didn't add any support for ttf1-like core meter
    #if DISABLE_TITAN_CORE_ON_DOOM
        RegisterSignal( "PendingEarnModeChange" )
    #endif
    AddCallback_OnTitanUndoomed( OnTitanUndoomed ) // modified callback in _titan_health.gnut. undoomed settings
    AddCallback_OnPilotBecomesTitan( OnPlayerBecomesTitan )
}

void function OnClientConnected( entity player )
{
	foreach ( string message in CONNECTING_NOTIFICATIONS )
		Chat_ServerPrivateMessage( player, message, false, false )
}

void function SetUpFakeTTF1ScoreEvent()
{
    // score event setup:
    // remove all earn values, use bit higher own value
    
    // pilot kill
	ScoreEvent_SetEarnMeterValues( "KillPilot", 0.0, 0.12, 0.5 )
	ScoreEvent_SetEarnMeterValues( "EliminatePilot", 0.0, 0.12, 0.5 )
	ScoreEvent_SetEarnMeterValues( "PilotAssist", 0.0, 0.05, 0.0 )
	// titan kill
	ScoreEvent_SetEarnMeterValues( "DoomTitan", 0.0, 0.0 )
    // don't know why auto titan kills appear to be no value in vanilla
	// even when the titan have an owner player
	ScoreEvent_SetEarnMeterValues( "KillTitan", 0.0, 0.15, 0.0 )
	ScoreEvent_SetEarnMeterValues( "KillAutoTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "EliminateTitan", 0.0, 0.15, 0.0 )
	ScoreEvent_SetEarnMeterValues( "EliminateAutoTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "TitanKillTitan", 0.0, 0.0 )
	// but titan assist do have earn values...
	ScoreEvent_SetEarnMeterValues( "TitanAssist", 0.0, 0.15 )
	// rodeo
	ScoreEvent_SetEarnMeterValues( "PilotBatteryStolen", 0.0, 0.20, 0.0 )
	ScoreEvent_SetEarnMeterValues( "PilotBatteryApplied", 0.0, 0.20, 0.0 )
	// special method of killing
	ScoreEvent_SetEarnMeterValues( "Headshot", 0.0, 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "FirstStrike", 0.0, 0.03, 0.0 )
	
	// ai
	ScoreEvent_SetEarnMeterValues( "KillGrunt", 0.0, 0.03, 0.34 )
	ScoreEvent_SetEarnMeterValues( "KillSpectre", 0.0, 0.03, 0.34 )
	ScoreEvent_SetEarnMeterValues( "LeechSpectre", 0.0, 0.03 )
	ScoreEvent_SetEarnMeterValues( "KillHackedSpectre", 0.0, 0.03, 0.34 )
	ScoreEvent_SetEarnMeterValues( "KillStalker", 0.0, 0.03, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillSuperSpectre", 0.0, 0.15, 0.34 )
    ScoreEvent_SetEarnMeterValues( "KillLightTurret", 0.0, 0.08 )
	// ai(extended)
	ScoreEvent_SetEarnMeterValues( "KillProwler", 0.0, 0.03, 0.34 )
	ScoreEvent_SetEarnMeterValues( "KillDrone", 0.00, 0.01, 0.5 )
}

void function OnTitanSpawned( entity titan )
{
    // health
    thread TitanHealthWatcher( titan ) // prevent changing health midway
}

void function OnTitanGetsLoadout( entity titan, TitanLoadoutDef titanLoadout )
{
    //print( "Titan got loadout!" )
    SetupTTF1StyleTitan( titan, titanLoadout )
}

void function SetupTTF1StyleTitan( entity titan, TitanLoadoutDef titanLoadout )
{
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return

    // shield regen
    TitanHealth_SetSoulEnableShieldRegen( soul, ENABLE_TITAN_SHIELD_REGEN )
	TitanHealth_SetSoulShieldRegenDelay( soul, FAKETF1_TITAN_SHIELD_REGEN_DELAY )
	TitanHealth_SetSoulShieldRegenTime( soul, FAKETF1_TITAN_SHIELD_REGEN_TIME )
	TitanHealth_SetSoulShieldDamageReductionScale( soul, TITAN_SHIELD_DAMAGE_REDUCTION )
    // doomed state
    TitanHealth_SetSoulInfiniteDoomedState( soul, ENABLE_INFINITE_DOOMED_STATE )
    TitanHealth_SetSoulDoomedHealthLossDamage( soul, DOOMED_HEALTH_LOSS_DAMAGE_SCALE )
    // core ability
    TitanHealth_SetTitanCoreBuilderMultiplier( titan, TITAN_CORE_BUILD_MULTIPLIER )

    // class mods
    // add turbo titan, replace turbo engine with hyper core
    if ( titanLoadout.setFileMods.contains( "pas_mobility_dash_capacity" ) ) // has turbo engine
    {
        // change to PAS_HYPER_CORE
        GivePassive( soul, ePassives.PAS_HYPER_CORE )
        if ( TitanDamageRewardsTitanCoreTime() )
        {
            SoulTitanCore_SetNextAvailableTime( soul, 0.20 )
            GiveOffhandElectricSmoke( titan )
        }
    }
    // these mods gets applied on player embark!
    titanLoadout.setFileMods.removebyvalue( "pas_mobility_dash_capacity" )
    titanLoadout.setFileMods.append( "turbo_titan" )
}

void function TitanHealthWatcher( entity titan )
{
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return
    soul.EndSignal( "OnDestroy" )

    // wait for next frame before we start checking health
    WaitEndFrame()
    titan = soul.GetTitan() // update titan after delay
    if ( !IsAlive( titan ) )
        return

    // initial setup
    int baseSegmentHealth = GetSegmentHealthForTitan( titan ) // never change this! this is un-modified default value
    int segments = titan.GetMaxHealth() / baseSegmentHealth
    soul.SetShieldHealthMax( TITAN_SHIELD_BASE + segments * TITAN_SHIELD_PER_SEGMENT ) // 1000(was 1250) shield per segment
    soul.SetShieldHealth( soul.GetShieldHealthMax() )
    titan.SetMaxHealth( segments * TITAN_HEALTH_PER_SEGMENT ) // 1500 health per segment
    titan.SetHealth( titan.GetMaxHealth() )

    int startingMaxHealth = titan.GetMaxHealth()
    // modified function in sh_titan_triple_health.gnut
    TitanHealth_SetSoulSegmentHealthOverride( soul, TITAN_HEALTH_PER_SEGMENT )
    #if DOOMED_HEALTH_MATCH_MAX_HEALTH
        // fake ttf1 behavior: doomed health is almost same as undoomed health
        // modified function in sh_titan_soul.gnut
        TitanSoul_SetSoulDoomedHealthOverride( soul, int( titan.GetMaxHealth() * TITAN_DOOMED_HEALTH_FRAC ) )
    #endif
    // start watching
    while ( true )
    {
        WaitFrame() // always wait before each loop

        titan = soul.GetTitan() // update titan each loop
        if ( !IsAlive( titan ) )
            continue
        //print( "startingMaxHealth: " + string( startingMaxHealth ) )
        //print( "current max health: " + string( titan.GetMaxHealth() ) )
        segments = titan.GetMaxHealth() / baseSegmentHealth // keep updating
        if ( startingMaxHealth != titan.GetMaxHealth() ) // max health updated!
        {
            //print( "Health Updated!" )
            float healthFrac = GetHealthFrac( titan )
            titan.SetMaxHealth( segments * TITAN_HEALTH_PER_SEGMENT ) // 1500 health per segment
            titan.SetHealth( int( titan.GetMaxHealth() * healthFrac ) )
            // update starting max health
            startingMaxHealth = titan.GetMaxHealth()
            // update segment health
            TitanHealth_SetSoulSegmentHealthOverride( soul, TITAN_HEALTH_PER_SEGMENT )
            #if DOOMED_HEALTH_MATCH_MAX_HEALTH
                // update doomed health
                TitanSoul_SetSoulDoomedHealthOverride( soul, int( titan.GetMaxHealth() * TITAN_DOOMED_HEALTH_FRAC ) )
            #endif
        }
    }
}

void function OnTitanDoomed( entity titan, var damageInfo )
{
    if ( !IsAlive( titan ) ) // titan may get killed
        return
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return
    // fake ttf1 behavior: titan loses shields on doomed
    soul.SetShieldHealth( 0 )

    #if DISABLE_TITAN_CORE_ON_DOOM
        // hard to control.. respawn almost didn't add any support for ttf1-like core meter
        // fake ttf1 behavior: titan loses core ability on doomed
        entity coreWeapon = titan.GetOffhandWeapon( OFFHAND_EQUIPMENT )
        if ( IsValid( coreWeapon ) )
        {
            bool ignoreModeChange = false
            if ( TitanCoreInUse( titan ) ) // start when core still using!
            {
                //print( "Titan core still using!" )
                SoulTitanCore_SetExpireTime( soul, Time() ) // stop core immediately
                ignoreModeChange = true // core disabling will change earn mode, ignore it
            }
            OnAbilityEnd_TitanCore( coreWeapon ) // clean up core effect

            if ( titan.IsPlayer() )
                thread UpdateEarnMeterMode( titan, eEarnMeterMode.DISABLED, ignoreModeChange ) // try to update icon

            CoreWeapon weaponStruct
            weaponStruct.weapon = coreWeapon.GetWeaponClassName()
            weaponStruct.mods = coreWeapon.GetMods()
            file.soulStoredCoreWeapon[ soul ] <- weaponStruct

            titan.TakeOffhandWeapon( OFFHAND_EQUIPMENT )
        }
    #endif // DISABLE_TITAN_CORE_ON_DOOM
}

void function OnTitanGetsBatteryHeal( entity battery, entity titan, int shieldDifference, int addHealth )
{
    entity soul = titan.GetTitanSoul()
    if ( IsValid( soul ) )
        soul.nextRegenTime = Time() // SP behavior
}

void function OnTitanCoreUsed( entity titan, entity coreWeapon )
{
    // hardcoded for handling upgrade core
    if ( IsValid( coreWeapon ) && coreWeapon.GetWeaponClassName() == "mp_titancore_upgrade" )
    {
        // start regen shield instead of fully restore instantly
        entity soul = titan.GetTitanSoul()
        if ( IsValid( soul ) )
            soul.nextRegenTime = Time()
    }
}

void function OnPlayerChangeClass( entity player )
{
    if ( IsAlive( player ) )
    {
        if ( !player.IsTitan() && player.GetPlayerSettings() != "spectator" )
        {
            player.SetMaxHealth( player.GetMaxHealth() * PILOT_HEALTH_MULTIPLAYER )
            player.SetHealth( player.GetMaxHealth() )
        }
    }
}

void function OnPilotGetsLoadout( entity player, PilotLoadoutDef loadout )
{
    // following codesneeds reworked _health_regen.gnut
    // otherwise it won't work due to respawn's hardcode

    #if ENABLE_ALWAYS_FAST_REGEN // all players have PAS_FAST_HEALTH_REGEN, replace exisiting ones with PAS_POWER_CELL
        if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
            GivePassive( player, ePassives.PAS_POWER_CELL )
        else
            GivePassive( player, ePassives.PAS_FAST_HEALTH_REGEN )
    #else // remove PAS_FAST_HEALTH_REGEN for all players, existing ones replaced with PAS_POWER_CELL
        if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
        {
            TakePassive( player, ePassives.PAS_FAST_HEALTH_REGEN )
            GivePassive( player, ePassives.PAS_POWER_CELL )
        }
    #endif // ENABLE_ALWAYS_FAST_REGEN

    // unlimited AT ammo for player
    player.GiveExtraWeaponMod( "at_unlimited_ammo" )
}

#if DISABLE_TITAN_CORE_ON_DOOM
void function UpdateEarnMeterMode( entity player, int mode, bool ignoreEarnModeChange )
{
    player.Signal( "PendingEarnModeChange" )
    player.EndSignal( "PendingEarnModeChange" )
    player.EndSignal( "OnDestroy" )
    int startingEarnMode = PlayerEarnMeter_GetMode( player )
    WaitFrame()

    if ( !ignoreEarnModeChange && startingEarnMode != PlayerEarnMeter_GetMode( player ) ) // earn mode updated midway!
        return
    PlayerEarnMeter_SetMode( player, mode )
}
#endif // DISABLE_TITAN_CORE_ON_DOOM

// hard to control.. respawn almost didn't add any support for ttf1-like core meter
void function OnTitanUndoomed( entity titan, int numSegments )
{
    if ( !IsAlive( titan ) )
        return
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return

    #if DISABLE_TITAN_CORE_ON_DOOM
        // try to retrieve core ability
        if ( soul in file.soulStoredCoreWeapon )
        {
            if ( titan.IsPlayer() )
            {
                titan.Signal( "PendingEarnModeChange" ) // stop other earnmeter update function
                PlayerEarnMeter_SetMode( titan, eEarnMeterMode.CORE )
            }

            CoreWeapon weaponStruct = clone file.soulStoredCoreWeapon[ soul ]
            if ( !IsValid( titan.GetOffhandWeapon( OFFHAND_EQUIPMENT ) ) )
                titan.GiveOffhandWeapon( weaponStruct.weapon, OFFHAND_EQUIPMENT, weaponStruct.mods )

            delete file.soulStoredCoreWeapon[ soul ]
        }
    #endif // DISABLE_TITAN_CORE_ON_DOOM
}

void function OnPlayerBecomesTitan( entity player, entity titan )
{
    #if DISABLE_TITAN_CORE_ON_DOOM
        thread DisableCoreEarnMode( player )
    #endif // DISABLE_TITAN_CORE_ON_DOOM
}

#if DISABLE_TITAN_CORE_ON_DOOM
void function DisableCoreEarnMode( entity player )
{
    player.EndSignal( "PendingEarnModeChange" )
    player.EndSignal( "OnDestroy" )
    WaitFrame()

    entity soul = player.GetTitanSoul()
    if ( !IsValid( soul ) )
        return

    if ( soul.IsDoomed() )
    {
        OnThreadEnd
        (
            function(): ( player )
            {
                PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
            }    
        )
        //print( "soul doomed! disabling core ability" )
        // fake ttf1 behavior: titan loses core ability on doomed
        player.Signal( "PendingEarnModeChange" ) // stop other earnmeter update function and run into OnThreadEnd()
    }
}
#endif // DISABLE_TITAN_CORE_ON_DOOM