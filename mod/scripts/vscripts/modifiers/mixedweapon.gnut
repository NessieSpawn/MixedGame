untyped

global function MixedLoadout_Init

//NOTE:	rearm causes client crash
//		rearm cannot complex with vortex shield
//		laser trip does no damage
//		gun shield causes client crash
//		vortex shield cannot complex with gibber pistol or flak rifle


struct MainWeapon
{
	string weaponName
	array<string> modsName
}

struct Tactical
{
	string weaponName
	array<string> modsName
}

const array<string> vanilla_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap"]
const array<string> sonar_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "sonar_softball"]
const array<string> thermite_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "thermite_softball"]
const array<string> northstar_mods = ["pas_fast_swap", "northstar_softball"]
const array<string> cluster_mods = ["pas_fast_swap", "cluster_softball"]
const array<string> arcball_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "arcball_softball"]
const array<string> smoke_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "smoke_softball"]
const array<string> gravity_mods = ["pas_fast_swap", "gravity_softball"]
const array<string> triplethreat_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "triplethreat_softball"]
const array<string> emp_mods = ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "emp_softball"]
const array<string> error_mods = ["pas_fast_reload", "extended_ammo" "error_softball"]

array<string> weapons = ["mp_weapon_alternator_smg", "mp_weapon_autopistol", "mp_weapon_car", "mp_weapon_doubletake", "mp_weapon_epg", "mp_weapon_esaw", "mp_weapon_hemlok", "mp_weapon_hemlok_smg", "mp_weapon_lmg", "mp_weapon_lstar", "mp_weapon_mastiff", "mp_weapon_pulse_lmg", "mp_weapon_r97", "mp_weapon_rspn101", "mp_weapon_rspn101_og", "mp_weapon_shotgun", "mp_weapon_shotgun_pistol", "mp_weapon_smr", "mp_weapon_sniper", "mp_weapon_softball", "mp_weapon_vinson", "mp_weapon_wingman", "mp_weapon_wingman_n", "mp_weapon_semipistol"]

void function MixedLoadout_Init()
{
	SetWeaponDropsEnabled( false )
	SetLoadoutGracePeriodEnabled( false )
	//AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
}

void function OnPlayerRespawned( entity player )
{
	GiftSoftball( player )
	DisableBoostBar( player )
}

void function OnPlayerChangeLoadout( entity player, PilotLoadoutDef p )
{
	GiftSoftball( player )
	DisableBoostBar( player )
}

void function GiftSoftball( entity player )
{
	thread GiftSoftball_Threaded( player )
}

void function GiftSoftball_Threaded( entity player )
{
	if( IsValid( player ) )
	{
		array<string> randommods = RandomSelectSoftball()
		string softballname = ""
		string weaponname = ""
		string moddedweaponname = ""
		string burncardname = ""
		array<string> tacticalname = [""]

		foreach( entity weapon in player.GetMainWeapons() )
		{
			if( IsValid(weapon) )
				player.TakeWeaponNow( weapon.GetWeaponClassName() )
		}

		if( IsValid( player.GetOffhandWeapon(OFFHAND_MELEE) ) )
			player.TakeWeaponNow( player.GetOffhandWeapon(OFFHAND_MELEE).GetWeaponClassName() )
		if( IsValid( player.GetOffhandWeapon(OFFHAND_SPECIAL) ) )
			player.TakeWeaponNow( player.GetOffhandWeapon(OFFHAND_SPECIAL).GetWeaponClassName() )
		if( IsValid( player.GetOffhandWeapon(OFFHAND_ORDNANCE) ) )
			player.TakeWeaponNow( player.GetOffhandWeapon(OFFHAND_ORDNANCE).GetWeaponClassName() )
		if( IsValid( player.GetOffhandWeapon(OFFHAND_INVENTORY) ) )
			player.TakeWeaponNow( player.GetOffhandWeapon(OFFHAND_INVENTORY).GetWeaponClassName() )
		WaitFrame()

		if( IsValid(player) )
		{
			if( player.GetMainWeapons().len() < 1 )
			{
				player.SetSuitGrapplePower( 100.0 )
				weaponname = GiveRandomWeapon_ReturnString( player )
				player.GiveWeapon( "mp_weapon_softball", randommods )
				softballname = GetSoftballName( randommods )
				moddedweaponname = GiveRandomModdedWeapon_ReturnString( player )
				tacticalname = RandomGiveTactical_ReturnArray( player )
				string message = weaponname + "\n" + softballname + "\n" + moddedweaponname + "\n" + tacticalname[0] + "\n" + tacticalname[2] + "\n" + tacticalname[1] + "\n" + tacticalname[3]
				SendHudMessage(player, "当前装备：\n" + message, -1, 0.1, 255, 255, 0, 255, 0.15, 5, 1)
			}
		}
	}
}

string function GiveRandomWeapon_ReturnString( entity player )
{
	string weaponname = weapons[RandomInt(weapons.len())]
	switch( weaponname )
	{
		case "mp_weapon_lmg":
			player.GiveWeapon( weaponname, ["apex_rampage", "pas_fast_reload", "pas_fast_swap"] )
			return "暴走轻机枪"
		case "mp_weapon_semipistol":
			player.GiveWeapon( weaponname, ["pas_fast_reload", "extended_ammo", "burn_mod_semipistol"] )
			return "强化P2016"
		case "mp_weapon_wingman":
			player.GiveWeapon( weaponname, ["pas_fast_reload", "extended_ammo", "burn_mod_wingman"] )
			return "强化小帮手"
		case "mp_weapon_autopistol":
			player.GiveWeapon( weaponname, ["pas_fast_reload", "extended_ammo", "burn_mod_autopistol"] )
			return "强化RE-45"
		case "mp_weapon_sniper":
			player.GiveWeapon( weaponname, ["pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_fast_swap"] )
			return ""
		case "mp_weapon_wingman_n":
			player.GiveWeapon( weaponname, ["pas_fast_reload", "extended_ammo", "silencer"] )
			return "消音小帮手精英"
		case "mp_weapon_smart_pistol":
			player.GiveWeapon( weaponname, ["extended_ammo", "randomizer_balance"] )
			return "智慧手枪"
		case "mp_weapon_peacekraber":
			player.GiveWeapon( weaponname )
			return "和平克莱博"
		case "mp_weapon_shotgun_doublebarrel":
			player.GiveWeapon( weaponname )
			return "双管霰弹枪"
		default:
			player.GiveWeapon( weaponname, ["pas_fast_reload", "extended_ammo", "pas_fast_swap"] )
			return ""
	}
	return ""

}

array<string> function RandomSelectSoftball()
{
	array<string> softball_mods
	switch( RandomInt(8) )
	{
		case 0:
			softball_mods = sonar_mods
			break
		case 1:
			softball_mods = thermite_mods
			break
		case 2:
			softball_mods = cluster_mods
			break
		case 3:
			softball_mods = arcball_mods
			break
		case 4:
			softball_mods = smoke_mods
			break
		case 5:
			softball_mods = gravity_mods
			break
		case 6:
			softball_mods = triplethreat_mods
			break
		case 7:
			softball_mods = emp_mods
			break
		//case 8:
			//softball_mods = vanilla_mods
			//break
		//case 9:
			//softball_mods = northstar_mods
			//break
		//case 10:
			//softball_mods = error_mods
			//break
		default:
			softball_mods = thermite_mods
			break
	}
	return softball_mods
}

array<string> function RandomGiveTactical_ReturnArray( entity player )
{
	Tactical special
	Tactical ordnance
	Tactical antirodeo
	//Tactical inventory
	string specialname = ""
	string ordnancename = ""
	string antirodeoname = ""
	//string inventoryname = ""
	array<string> result = ["", "", "", ""]

	while( true )
	{
		special = RandomSelectTactical()
		ordnance = RandomSelectTactical()
		antirodeo = RandomSelectTactical()
		//inventory = RandomSelectTactical()
		if( special.weaponName != ordnance.weaponName && special.weaponName != antirodeo.weaponName && ordnance.weaponName != antirodeo.weaponName /*&& special.weaponName != inventory.weaponName && ordnance.weaponName != inventory.weaponName && antirodeo.weaponName != inventory.weaponName*/ || !IsValid(player) )
			break
		if( !GamePlaying() && GetGameState() != eGameState.Prematch )
			return result
	}

	player.GiveOffhandWeapon( special.weaponName, OFFHAND_SPECIAL, special.modsName )
	specialname = GetModdedTacticalName( special.weaponName, special.modsName )
	player.GiveOffhandWeapon( ordnance.weaponName, OFFHAND_ORDNANCE, ordnance.modsName )
	ordnancename = GetModdedTacticalName( ordnance.weaponName, ordnance.modsName )
	player.GiveOffhandWeapon( antirodeo.weaponName, OFFHAND_ANTIRODEO, antirodeo.modsName )
	antirodeoname = GetModdedTacticalName( antirodeo.weaponName, antirodeo.modsName )
	//player.GiveOffhandWeapon( inventory.weaponName, OFFHAND_INVENTORY, inventory.modsName )
	//inventoryname = GetModdedTacticalName( inventory.weaponName, inventory.modsName )

	if( specialname == "" )
		specialname = GetTacticalName(special.weaponName)
	if( ordnancename == "" )
		ordnancename = GetTacticalName(ordnance.weaponName)
	if( antirodeoname == "" )
		antirodeoname = GetTacticalName(antirodeo.weaponName)
	//if( inventoryname == "" )
		//inventoryname = GetTacticalName(inventory.weaponName)

	result = [specialname, ordnancename, antirodeoname, ""/*inventoryname*/]
	return result
}

Tactical function RandomSelectTactical()
{
	Tactical result
	string tacticalname = ""
	array<string> modsname = []
	switch( RandomInt(32) )
	{
		case 0:
			tacticalname = "mp_ability_heal"
			modsname =["amped_tacticals", "pas_power_cell"]
			break
		case 1:
			tacticalname = "mp_ability_holopilot"
			modsname = ["holoshift"]
			break
		case 2:
			tacticalname = "mp_ability_grapple"
			modsname = ["all_grapple"]
			break
		case 3:
			tacticalname = "mp_ability_shifter"
			modsname = ["phase_rework", "boost_strength_lv1", "amped_tacticals"]
			break
		case 4:
			tacticalname = "mp_weapon_grenade_sonar"
			modsname = ["amped_tacticals", "pas_power_cell"]
			break
		case 5:
			tacticalname = "mp_titanability_phase_dash"
			modsname = ["fd_phase_charges", "pas_ronin_phase"]
			break
		case 6:
			tacticalname = "mp_titanability_hover"
			modsname = ["pas_defensive_core"]
			break
		case 7:
			tacticalname = "mp_titanability_sonar_pulse"
			modsname = ["pas_tone_sonar"]
			break
		case 8:
			tacticalname = "mp_ability_heal"
			modsname =["jump_pad"]
			break
		case 9:
			tacticalname = "mp_ability_shifter"
			modsname =["wraith_phase"]
			break
		case 10:
			tacticalname = "mp_weapon_deployable_cover"
			modsname =["personal_shield"]
			break
		case 11:
			tacticalname = "mp_weapon_grenade_gravity"
			modsname =["anti_gravity_star", "pas_ordnance_pack"]
			break
		case 12:
			tacticalname = "mp_titanweapon_flame_wall"
			modsname =["pas_scorch_firewall", "pilot_usage"]
			break
		case 13:
			tacticalname = "mp_titanweapon_laser_lite"
			modsname =[]
			break
		case 14:
			tacticalname = "mp_titanweapon_arc_wave"
			modsname =["pas_ronin_arcwave", "modelset_prime", "pilot_usage"]
			break
		case 15:
			tacticalname = "mp_titanweapon_salvo_rockets"
			modsname =["missile_racks", "pilot_usage"]
			break
		case 16:
			tacticalname = "mp_titanability_slow_trap"
			modsname =["gas_trap"]
			break
		case 17:
			tacticalname = "mp_titanweapon_stun_laser"
			modsname =["energy_field"]
			break
		case 18:
			tacticalname = "mp_titanability_rearm"
			modsname =["pas_vanguard_rearm"]
			break
		case 19:
			tacticalname = "mp_weapon_deployable_cover"
			modsname = ["deployable_dome_shield"]
			break
		case 20:
			tacticalname = "mp_ability_cloak"
			modsname = ["cloak_drone"]
			break
		case 21:
			tacticalname = "mp_weapon_arc_trap"
			modsname = ["one_time_arc_trap"]
			break
		case 22:
			tacticalname = "mp_weapon_frag_drone"
			modsname = ["all_ticks"]
			break
		case 23:
			tacticalname = "mp_titanability_tether_trap"
			modsname = ["fd_trap_charges", "pilot_tether"]
			break
		case 24:
			tacticalname = "mp_ability_grapple"
			modsname = ["zipline_gun"]
			break
		case 25:
			tacticalname = "mp_titanability_sonar_pulse"
			modsname = ["orbitalstrike"]
			break
		case 26:
			tacticalname = "mp_weapon_grenade_gravity"
			modsname =["gravity_lift"]
			break
		case 27:
			tacticalname = "mp_ability_cloak"
			modsname =["cloak_field"]
			break
		case 28:
			tacticalname = "mp_ability_shifter"
			modsname =["wraith_portal", "amped_tacticals"]
			break
		case 29:
			tacticalname = "mp_titanability_gun_shield"
			modsname =[]
			break
		case 30:
			tacticalname = "mp_ability_heal"
			modsname =["octane_stim"]
			break
		case 31:
			tacticalname = "mp_titanability_laser_trip"
			modsname =["archon_tesla_node"]
			break
		case 32:
			tacticalname = "mp_ability_grapple"
			modsname = ["pm2"]
			break
		/*
		case 0:
			tacticalname = "mp_ability_shifter"
			modsname = ["amped_tacticals", "pas_power_cell"]
			break
		case 0:
			tacticalname = "mp_ability_cloak"
			modsname = ["cloak_field"]
			break
		case 0:
			tacticalname = "mp_titanweapon_vortex_shield"
			modsname =["slow_recovery_vortex", "pilot_usage"]
			break
		case 0:
			tacticalname = "mp_titanability_laser_trip"
			modsname =[]
			break
		*/
		default:
			tacticalname = "mp_ability_grapple"
			modsname = ["all_grapple"]
			break
	}
	result.weaponName = tacticalname
	result.modsName = modsname

	return result
}

string function GetTacticalName( string weaponname )
{
	switch( weaponname )
	{
		case "mp_ability_heal":
			return "兴奋剂"
		case "mp_ability_grapple":
			return "钩爪"
		case "mp_ability_holopilot":
			return "幻影铁驭"
		case "mp_ability_shifter":
			return "相位移动"
		case "mp_weapon_grenade_sonar":
			return "脉冲刀"
		case "mp_titanability_hover":
			return "悬浮"
		case "mp_titanability_phase_dash":
			return "相位冲刺"
		case "mp_titanability_sonar_pulse":
			return "声呐突波"
		case "mp_titanability_slow_trap":
			return "燃烧陷阱"
		case "mp_titanweapon_stun_laser":
			return "能量场"
		case "mp_weapon_grenade_gravity":
			return "斥力星"
		case "mp_titanweapon_flame_wall":
			return "火墙"
		case "mp_titanweapon_laser_lite":
			return "镭射炮"
		case "mp_titanweapon_vortex_shield_ion":
			return "涡旋护盾"
		case "mp_titanweapon_vortex_shield":
			return "涡旋护盾"
		case "mp_titanability_laser_trip":
			return "镭射拌线"
		case "mp_titanweapon_arc_wave":
			return "电弧波"
		case "mp_titanweapon_salvo_rockets":
			return "火箭弹群"
		case "mp_titanability_rearm":
			return "武装"
		case "mp_ability_cloak":
			return "隐身"
		case "mp_weapon_arc_trap":
			return "电弧陷阱"
		case "mp_weapon_frag_drone":
			return "炸蛛"
		case "mp_titanability_tether_trap":
			return "拌索陷阱"
		case "mp_titanability_gun_shield":
			return "枪盾"
		default:
			return "未知技能"
	}
	return "未知技能"
}

string function GetModdedTacticalName( string weaponname, array<string> mods )
{
	if( weaponname == "mp_ability_heal" )
	{
		if( mods.contains( "jump_pad" ) )
			return "动力跳板"
		if( mods.contains( "octane_stim" ) )
			return "动力小子兴奋剂"
	}
	if( weaponname == "mp_ability_shifter" )
	{
		if( mods.contains( "wraith_phase" ) )
			return "B印子相位"
		if( mods.contains( "phase_rework" ) )
			return "相位回溯"
		if( mods.contains( "wraith_portal" ) )
			return "传送门"
	}
	if( weaponname == "mp_weapon_deployable_cover" || weaponname == "mp_weapon_hard_cover" )
	{
		if( mods.contains( "deployable_dome_shield" ) )
			return "圆顶护罩"
		if( mods.contains( "personal_shield" ) )
			return "移动护盾"
	}
	if( weaponname == "mp_ability_holopilot" )
	{
		if( mods.contains( "holoshift" ) )
			return "幻影转移"
	}
	if( weaponname == "mp_titanability_slow_trap" )
	{
		if( mods.contains( "gas_trap" ) )
			return "毒气陷阱"
	}
	if( weaponname == "mp_ability_grapple" )
	{
		if( mods.contains( "pm2" ) )
			return "加长爆炸钩爪(按住以蓄力)"
		if( mods.contains( "zipline_gun" ) )
			return "滑索枪"
	}
	if( weaponname == "mp_ability_cloak" )
	{
		if( mods.contains( "cloak_field" ) )
			return "隐身力场"
		if( mods.contains( "cloak_drone" ) )
			return "隐身无人机"
	}
	if( weaponname == "mp_titanability_sonar_pulse" )
	{
		if( mods.contains( "orbitalstrike" ) )
			return "空袭标记"
	}
	if( weaponname == "mp_titanability_laser_trip" )
	{
		if( mods.contains( "archon_tesla_node" ) )
			return "电击奇点"
	}
	if( weaponname == "mp_weapon_grenade_gravity" )
	{
		if( mods.contains( "anti_gravity_star" ) )
			return "斥力星"
		if( mods.contains( "gravity_lift" ) )
			return "重力电梯"
	}
	return ""
}

string function GetSoftballName( array<string> mods )
{
	if( mods.contains( "sonar_softball" ) )
		return "脉冲刀发射器"
	if( mods.contains( "thermite_softball" ) )
		return "飞火星发射器"
	if( mods.contains( "northstar_softball" ) )
		return "核爆北极星发射器"
	if( mods.contains( "cluster_softball" ) )
		return "集束飞弹发射器"
	if( mods.contains( "arcball_softball" ) )
		return "雷电球发射器"
	if( mods.contains( "smoke_softball" ) )
		return "电子烟雾发射器"
	if( mods.contains( "gravity_softball" ) )
		return "重力星发射器"
	if( mods.contains( "triplethreat_softball" ) )
		return "三联装榴弹发射器"
	if( mods.contains( "error_softball" ) )
		return "随机垒球"
	if( mods.contains( "emp_softball" ) )
		return "电弧手榴弹发射器"
	else
		return "原版垒球"

	return "未知垒球"
}

string function GiveRandomModdedWeapon_ReturnString( entity player )
{
	switch( RandomInt(10) )
	{
		case 0:
			player.GiveWeapon( "mp_weapon_arc_launcher", ["smoke_launcher", "at_unlimited_ammo", "unlimited_smoke"] )
			return "烟雾发射器"
		case 1:
			player.GiveWeapon( "mp_weapon_epg", ["grenadier_low_damage", "jump_kit", "pas_fast_swap"] )
			return "火箭跳能源炮"
		case 2:
			player.GiveWeapon( "mp_weapon_softball", ["grenadier_low_damage", "jump_kit", "pas_fast_swap"] )
			return "火箭跳垒球"
		case 3:
			player.GiveWeapon( "mp_weapon_shotgun_pistol", ["apex_nessie", "nessie_drone_spawn", "silencer"] )
			return "大尼斯水怪"
		case 4:
			player.GiveWeapon( "mp_weapon_rocket_launcher", ["no_lock_required", "at_unlimited_ammo"] )
			return "射手飞弹"
		case 5:
			player.GiveWeapon( "mp_weapon_sniper", ["ricochet_infinite_sniper", "pas_fast_ads", "pas_fast_reload", "extended_ammo"] )
			return "无限弹射克莱博"
		case 6:
			player.GiveWeapon( "mp_weapon_peacekraber" )
			return "和平克莱博"
		case 7:
			player.GiveWeapon( "mp_weapon_shotgun_doublebarrel" )
			return "双管霰弹枪"
		case 8:
			player.GiveWeapon( "mp_weapon_semipistol", ["gibber_pistol", "extended_ammo", "pas_fast_reload"] )
			return "爆炸手枪"
		case 9:
			player.GiveWeapon( "mp_weapon_mgl", ["tripwire_launcher", "at_unlimited_ammo", "pas_fast_reload"] )
			return "拌线部署器"
		/*
		case 9:
			player.GiveWeapon( "mp_weapon_defender", ["apex_charge_rifle", "quick_charge", "at_unlimited_ammo"] )
			return "只滋不崩"
		case 10:
			player.GiveWeapon( "mp_weapon_vinson", ["flak_rifle", "extended_ammo", "pas_fast_reload"] )
			return "飞弹步枪"
		*/
		default:
			return "未知武器"
	}
	return "未知武器"
}

void function DisableBoostBar( entity player )
{
	thread DisableBoostBar_Threaded( player )
}

void function DisableBoostBar_Threaded( entity player )
{
	WaitFrame()
	if( IsValid( player ) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}