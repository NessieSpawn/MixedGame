untyped // for bubbleShield.s
global function GameModifier_Fog_Titan_Init

const bool FOG_ENABLED              = false
const bool LOADOUT_REPLACE			= false

const float SPEED_BOOST_SEVERITY    = 0.25
const float INTRO_LENGTH            = 5
const float MAX_SQUADS              = 5

const array<string> NPC_WEAPONS =
[
    "mp_titanweapon_xo16_vanguard",
    "mp_titanweapon_sniper",
    "mp_titanweapon_leadwall",
    "mp_titanweapon_meteor",
    "mp_titanweapon_predator_cannon",
    "mp_titanweapon_rocketeer_rocketstream",
]

const int GRUNT_HEALTH      = 300
const int SPECTRE_HEALTH    = 500
const int STALKER_HEALTH    = 800
const int REAPER_HEALTH     = 7500

void function GameModifier_Fog_Titan_Init()
{
    if ( FOG_ENABLED )
	{
        AddSpawnCallback( "env_fog_controller", InitTitanFog )
		Highlight_HideDefaultEnemyHighlight( true )
	}

    Riff_ForceSetSpawnAsTitan( eSpawnAsTitan.Always )
    Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )
    
    AddSpawnCallback( "npc_titan", OnTitanSpawned )
	AddCallback_OnPilotBecomesTitan( OnClassChangeBecomeTitan )

    AddCallback_OnPlayerKilled( OnPlayerKilled )
    AddCallback_GameStateEnter( eGameState.Prematch, OnGamePrematch )
    AddCallback_GameStateEnter( eGameState.Playing, OnGamePlaying )

    // npc settings
    AiGameModes_SetNPCWeapons( "npc_soldier", NPC_WEAPONS )
    AiGameModes_SetNPCWeapons( "npc_spectre", NPC_WEAPONS )
	AiGameModes_SetNPCWeapons( "npc_stalker", NPC_WEAPONS )
    AddSpawnCallback( "npc_soldier", AddGruntHealth )
    AddSpawnCallback( "npc_spectre", AddSpectreHealth )
    AddSpawnCallback( "npc_super_spectre", AddReaperHealth )
    ClassicMP_SetCustomIntro( TTDMIntroSetup, INTRO_LENGTH )

    // taken from _gamemode_aitdm
    AddCallback_OnNPCKilled( HandleScoreEvent )
	AddCallback_OnPlayerKilled( HandleScoreEvent )

    // modified
    AITdm_SetSquadsPerTeam( 4 )
    AITdm_SetReapersPerTeam( 2 )

    // what
    SetWaitingForPlayersMaxDuration( 0.0 ) // so you don't have to wait so freaking long
    ForcedPlaylist_SetShouldInstantlyChangeMap( true )
    SetShouldPlayFactionDialogue( false )
}

void function InitTitanFog( entity fogController )
{
    fogController.kv.fogztop = "60000"
	fogController.kv.fogzbottom = "60000"
	fogController.kv.foghalfdisttop = "60000"
	fogController.kv.foghalfdistbottom = "200"
	fogController.kv.fogdistoffset = "600"
	fogController.kv.fogdensity = "1.0"

	fogController.kv.forceontosky = true
}

void function OnTitanSpawned( entity titan )
{
    entity owner = GetPetTitanOwner( titan )
	if( !IsValid( owner ) )
		return
    
    bool respawnAsTitan = expect bool( owner.GetPersistentVar( "spawnAsTitan" ) ) || Riff_SpawnAsTitan() == 1
    if ( !respawnAsTitan ) // player is not respawning as a titan! don't protect npcs
        return

	// check if player has a titan dropping, if not it means player disembarked and created their pet titans, don't give protection if so.
	if ( "spawnWithoutSoul" in titan.s )
	{
        // this is defined in CreateAutoTitanForPlayer_ForTitanBecomesPilot(), mark the titan as "disembarked" not "hotdropping"
		if ( expect bool ( titan.s.spawnWithoutSoul ) )
			return
	}

    thread GiveTitanProtection( owner, titan )
	GiveTitanLoadoutReplace( titan )
}

void function GiveTitanProtection( entity player, entity titan )
{
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )

    table bubbleData = {} 
    bubbleData.bubbleShield <- null // we create it later, it has to be a table for we passing the bubble to OnThreadEnd()

    OnThreadEnd
    (
        function(): ( bubbleData )
        {
            //print( "RUNNING OnThreadEnd()" )
            if ( IsValid( bubbleData.bubbleShield ) ) // clean up the bubble
            {
                var bubble = bubbleData.bubbleShield
                expect entity ( bubble )
                DestroyBubbleShield( bubble )
            }
        }
    )

    wait GetHotDropImpactTime( titan, "at_hotdrop_01" ) // this is the animation "RespawnAsTitan()" uses, wait for it
    
    // create a bubble here, for passing it to functions below
    int team = titan.GetTeam()
    TraceResults traceresult = TraceLine( titan.GetOrigin(), titan.GetOrigin() + < 0, 0, -65535 >, titan, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
    vector origin = titan.GetOrigin()
    if ( origin.z > traceresult.endPos.z ) // if the endPos is lower than titan's base origin
        origin = traceresult.endPos // use the trace instead
    vector angles = titan.GetAngles()

    entity bubble = CreateRainbowDomeShield( origin, angles ) // in nessie_funny.gnut
    bubble.EndSignal( "OnDestroy" )
    
    bubbleData.bubbleShield = bubble

    waitthread ProtectHotDropNPCTitan( titan, bubble ) // player will be transfered later, so we should protect npc titan temporarily
    
    if ( !player.IsTitan() ) // player still not respawned as titan, they're just doing titanfall
    {
        //print( "player is not a titan!" ) 
        return
    }

    WaitForever() // protect forever until player dead
}

void function ProtectHotDropNPCTitan( entity titan, entity bubbleShield = null )
{
    titan.EndSignal( "OnDestroy" )

    table bubbleStat = {}
    bubbleStat.validStart <- false
    if ( IsValid( bubbleShield ) )
        bubbleStat.validStart = true // if we pass a bubble shield, dont fade it
    else
    {
        int team = titan.GetTeam()
        vector origin = titan.GetOrigin()
        vector angles = titan.GetAngles()
        bubbleShield = CreateRainbowDomeShield( origin, angles ) // in nessie_funny.gnut
    }

    bubbleShield.EndSignal( "OnDestroy" )

    titan.SetInvulnerable() // protect the titan

    OnThreadEnd
    (
        function(): ( titan, bubbleShield, bubbleStat )
        {
            if ( IsValid( titan ) )
                titan.ClearInvulnerable()
            if ( IsValid( bubbleShield ) && !bubbleStat.validStart ) // if we pass a bubble shield, dont fade it
                DestroyBubbleShield( bubbleShield )
        }
    )

    WaitTillHotDropComplete( titan ) // wait for titan actucally drop to ground
}

void function GiveTitanLoadoutReplace( entity titan )
{
	// loadout only gets applied for player titans
	entity player = GetPetTitanOwner( titan )
	if ( !IsValid( player ) )
		return

    //HideName( titan ) // so they will likely not show in fog
    // remove main weapon and give fighter melee
    entity melee = titan.GetMeleeWeapon()
    if ( IsValid( melee ) )
        melee.AddMod( "fighter_melee" )

	#if LOADOUT_REPLACE
		foreach ( entity weapon in titan.GetMainWeapons() )
		{
			titan.TakeWeaponNow( weapon.GetWeaponClassName() )
		}
		//titan.GiveWeapon( "mp_weapon_gunship_missile", ["titan_emptyhanded"] )
		titan.GiveWeapon( "mp_titanweapon_meteor", ["storm_launcher", "fd_wpn_upgrade_2"] )

		// offhand replace
		for ( int i = 0; i <= OFFHAND_ANTIRODEO; i++ ) // for better sloting
		{
			entity nowWeapon = titan.GetOffhandWeapon( i )
			if( IsValid( nowWeapon ))
			{
				string className = nowWeapon.GetWeaponClassName()
				switch( className )
				{
					// replace legion's ability
					case "mp_titanability_gun_shield":
						titan.TakeWeaponNow( className )
						titan.GiveOffhandWeapon( "mp_titanability_particle_wall", i, ["brute4_bubble_shield"] )
						break
					case "mp_titanability_ammo_swap":
						titan.TakeWeaponNow( className )
						titan.GiveOffhandWeapon( "mp_titanability_smoke", i )
						break
					case "mp_titanability_power_shot":
						titan.TakeWeaponNow( className )
						titan.GiveOffhandWeapon( "mp_titanweapon_homing_rockets", i )
						break
					// replace tone's tracker rockets
					case "mp_titanweapon_tracker_rockets":
						titan.TakeWeaponNow( className )
						titan.GiveOffhandWeapon( "mp_titanweapon_salvo_rockets", i, ["missile_racks", "fighter_rockets"] )
						break
					// replace northstar's hover and tether
					case "mp_titanability_tether_trap":
						titan.TakeWeaponNow( className )
						titan.GiveOffhandWeapon( "mp_titanweapon_vortex_shield", i, ["slow_recovery_vortex", "impact_drain_vortex"] )
						break
					// nerf heat shield
					case "mp_titanweapon_heat_shield":
						nowWeapon.AddMod( "fighter_shield" )
						break
				}
			}
		}
	#endif // LOADOUT_REPLACE

	// core replace
	titan.TakeOffhandWeapon( OFFHAND_EQUIPMENT )
	//titan.GiveOffhandWeapon( "mp_titancore_amp_core", OFFHAND_EQUIPMENT, ["damage_core"] )
	//titan.GiveOffhandWeapon( "mp_titancore_laser_cannon", OFFHAND_EQUIPMENT, ["tesla_core"] )
	titan.GiveOffhandWeapon( "mp_titancore_shift_core", OFFHAND_EQUIPMENT, ["dash_core", "ttf1_dash_core"] )

	// add turbo titan, replace turbo engine with hyper core
	entity soul = titan.GetTitanSoul()
	if ( IsValid( soul ) )
	{
		TitanLoadoutDef loadout = soul.soul.titanLoadout
		if ( loadout.setFileMods.contains( "pas_mobility_dash_capacity" ) ) // has turbo engine
		{
			// change to PAS_HYPER_CORE
			GivePassive( soul, ePassives.PAS_HYPER_CORE )
			if ( TitanDamageRewardsTitanCoreTime() )
			{
				SoulTitanCore_SetNextAvailableTime( soul, 0.20 )
				GiveOffhandElectricSmoke( titan )
			}
		}
		// these mods gets applied on player embark!
		loadout.setFileMods.removebyvalue( "pas_mobility_dash_capacity" )
		loadout.setFileMods.append( "turbo_titan" )
	}
}

void function OnClassChangeBecomeTitan( entity player, entity titan )
{
    // add speed boost
    StatusEffect_AddEndless( player, eStatusEffect.speed_boost, SPEED_BOOST_SEVERITY )
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
    Titan_RodeoPanelCleanup( victim.GetTitanSoul() )
    thread ReplacePlayerAsTitan( victim )
}

void function Titan_RodeoPanelCleanup( entity soul )
{
    if ( !IsValid( soul ) )
        return
	if ( IsValid( soul.soul.batteryContainer ) )
		soul.soul.batteryContainer.Kill_Deprecated_UseDestroyInstead()
}

// basically same as RespawnAsTitan(), but this one won't do score events
void function ReplacePlayerAsTitan( entity player )
{
    player.EndSignal( "OnDestroy" )
    WaitFrame() // wait for other postDeath functions set up

	// respawn crash exploit hotfix
	if ( IsAlive( player ) ) 
        return

    PlayerChangeToSpectatorClass( player ) // prevent a crash with going from titan => pilot on respawn
    player.Signal( "OnRespawned" ) // kill any postdeaththreads that could be running
	player.Signal( "PlayerRespawnStarted" )

	player.isSpawning = true
	entity spawnpoint = FindSpawnPoint( player, true, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) && !IsFFAGame() )

 	TitanLoadoutDef titanLoadout = GetTitanLoadoutForPlayer( player )
	
	asset model = GetPlayerSettingsAssetForClassName( titanLoadout.setFile, "bodymodel" )
	Attachment warpAttach = GetAttachmentAtTimeFromModel( model, "at_hotdrop_01", "offset", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), 0 )
	PlayFX( TURBO_WARP_FX, warpAttach.position, warpAttach.angle )
		
	entity titan = CreateAutoTitanForPlayer_FromTitanLoadout( player, titanLoadout, spawnpoint.GetOrigin(), spawnpoint.GetAngles() )
	DispatchSpawn( titan )
	player.SetPetTitan( titan ) // required for marking this player having a pet titan
	
	AddCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) // hide hud
	
	entity camera = CreateTitanDropCamera( spawnpoint.GetAngles(), < 90, titan.GetAngles().y, 0 > )
	camera.SetParent( titan )
	
	// calc offset for spawnpoint angle
	// todo this seems bad but too lazy to figure it out rn
	//vector xyOffset = RotateAroundOrigin2D( < 44, 0, 0 >, < 0, 0, 0>, spawnpoint.GetAngles().y )
	//xyOffset.z = 520 // < 44, 0, 520 > at 0,0,0, seems to be the offset used in tf2
	//print( xyOffset )
	
	vector xyOffset = RotateAroundOrigin2D( < 44, 0, 520 >, < 0, 0, 0 >, spawnpoint.GetAngles().y )
	
	camera.SetLocalOrigin( xyOffset )
	camera.SetLocalAngles( < camera.GetAngles().x, spawnpoint.GetAngles().y, camera.GetAngles().z > ) // this straight up just does not work lol
	camera.Fire( "Enable", "!activator", 0, player )
	
	titan.EndSignal( "OnDestroy" )
	OnThreadEnd( function() : ( player, titan, camera )
	{
		if ( IsValid( player ) )
		{
			RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) // show hud
			player.isSpawning = false
		}
	
		if ( IsValid( titan ) )
			titan.Destroy() // pilotbecomestitan leaves an npc titan that we need to delete
		else
			RespawnAsPilot( player ) // this is 100% an edgecase, just avoid softlocking if we ever hit it in playable gamestates
		
		camera.Fire( "Disable", "!activator", 0, player )
		camera.Destroy()
	})
	
	waitthread TitanHotDrop( titan, "at_hotdrop_01", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), player, camera ) // do hotdrop anim
	
	player.RespawnPlayer( null ) // spawn player as pilot so they get their pilot loadout on embark
	player.SetOrigin( titan.GetOrigin() )
	ClearTitanAvailable( player ) // titanfall succeed, clear titan availability
	
	// don't make player titan when entity batteryContainer is not valid.
	// This will prevent a servercrash that sometimes occur when evac is disabled and somebody is calling a titan in the defeat screen.
	if( IsValid( titan.GetTitanSoul().soul.batteryContainer ) )
		PilotBecomesTitan( player, titan ) // make player titan
	else
		print( "batteryContainer is not a valid entity in RespawnAsTitan(). Skipping PilotBecomesTitan()." )
}

void function PlayerChangeToSpectatorClass( entity player )
{
    asset model = player.GetModelName()
    // this can't be done right before player becoming a titan! will cause their sound to be "out of titan" style, which makes most things too loud
    player.SetPlayerSettings( "spectator" ) 
    player.SetModel( model ) // restore titan ragdoll model
}

void function OnGamePrematch()
{
    Nessie_CreateMenuMarvin()
}

void function OnGamePlaying()
{
    Spawner( TEAM_BOTH ) // spawn these things
    thread DisableSyncedMeleeLifeLong()
}

void function DisableSyncedMeleeLifeLong()
{
    while ( true )
    {
        foreach ( entity player in GetPlayerArray() )
            SyncedMelee_Disable( player )

        WaitFrame()
    }
}

void function AddGruntHealth( entity npc )
{
    npc.SetMaxHealth( GRUNT_HEALTH )
    npc.SetHealth( GRUNT_HEALTH )
}

void function AddSpectreHealth( entity npc )
{
    npc.SetMaxHealth( SPECTRE_HEALTH )
    npc.SetHealth( SPECTRE_HEALTH )
}

void function AddReaperHealth( entity npc )
{
    if ( FOG_ENABLED )
        Highlight_ClearEnemyHighlight( npc )
    npc.SetMaxHealth( REAPER_HEALTH )
    npc.SetHealth( REAPER_HEALTH )
}


// taken  from _gamemode_aitdm.nut, manually do spawner
void function Spawner( int team )
{
    thread Spawner_Threaded( team )
}

void function Spawner_Threaded( int team )
{
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )
	
	while( true )
	{
		// TODO: this should possibly not count scripted npc spawns, probably only the ones spawned by this script
		array<entity> npcs = GetNPCArrayOfTeam( team )
		int count = npcs.len()
		int reaperCount = GetNPCArrayEx( "npc_super_spectre", team, -1, <0,0,0>, -1 ).len()
		
		// NORMAL SPAWNS
		if ( count < MAX_SQUADS * 4 - 2 )
		{
			array<string> ents = [ "npc_soldier", "npc_spectre", "npc_stalker" ]
            string ent = ents[ RandomInt( ents.len() ) ]
			
			array< entity > points = GetZiplineDropshipSpawns()
			// Prefer dropship when spawning grunts
			if ( ent == "npc_soldier" && points.len() != 0 )
			{
				if ( RandomInt( points.len() ) )
				{
					entity node = points[ RandomInt( points.len() ) ]
					waitthread Aitdm_SpawnDropShip( node, team )
					continue
				}
			}
			
			points = SpawnPoints_GetDropPod()
			entity node = points[ RandomInt( points.len() ) ]
			waitthread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent, SquadHandler )
		}
		
		WaitFrame()
	}
}

void function Aitdm_SpawnDropShip( entity node, int team )
{
	thread AiGameModes_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, 4, SquadHandler )
	wait 20
}

void function SquadHandler( array<entity> guys )
{
	// Not all maps have assaultpoints / have weird assault points ( looking at you ac )
	// So we use enemies with a large radius
	array< entity > points = GetNPCArrayOfEnemies( guys[0].GetTeam() )
	
	if ( points.len()  == 0 )
		return
	
	vector point
	point = points[ RandomInt( points.len() ) ].GetOrigin()
	
	array<entity> players = GetPlayerArrayOfEnemies( guys[0].GetTeam() )
	
	// Setup AI
	foreach ( guy in guys )
	{
		guy.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE )
		guy.AssaultPoint( point )
		guy.AssaultSetGoalRadius( 1600 ) // 1600 is minimum for npc_stalker, works fine for others
		
		// show on enemy radar
		foreach ( player in players )
			guy.Minimap_AlwaysShow( 0, player )
		
		
		//thread AITdm_CleanupBoredNPCThread( guy )
	}
	
	// Every 5 - 15 secs change AssaultPoint
	while ( true )
	{	
		foreach ( guy in guys )
		{
			// Check if alive
			if ( !IsAlive( guy ) )
			{
				guys.removebyvalue( guy )
				continue
			}
			// Stop func if our squad has been killed off
			if ( guys.len() == 0 )
				return
			
			// Get point and send guy to it
			points = GetNPCArrayOfEnemies( guy.GetTeam() )
			if ( points.len() == 0 )
				continue
				
			point = points[ RandomInt( points.len() ) ].GetOrigin()
			
			guy.AssaultPoint( point )
		}
		wait RandomFloatRange(5.0,15.0)
	}
}

// Used to handle both player and ai events
void function HandleScoreEvent( entity victim, entity attacker, var damageInfo )
{
	// Basic checks
	if ( !( victim != attacker && attacker.IsPlayer() || attacker.IsTitan() && attacker.GetBossPlayer() != null && GetGameState() == eGameState.Playing ) )
		return
	
	// Hacked spectre filter
	if ( victim.GetOwner() == attacker )
		return
	
	// Split score so we can check if we are over the score max
	// without showing the wrong value on client
	int teamScore
	int playerScore
	string eventName
	
	// Handle AI, marvins aren't setup so we check for them to prevent crash
	if ( victim.IsNPC() && victim.GetClassName() != "npc_marvin" )
	{
		switch ( victim.GetClassName() )
		{
			case "npc_soldier":
			case "npc_spectre":
			case "npc_stalker":
				playerScore = 1
				break
			case "npc_super_spectre":
				playerScore = 3
				break
			default:
				playerScore = 0
				break
		}
		
		// Titan kills get handled bellow this
		if ( eventName != "KillNPCTitan"  && eventName != "" )
			playerScore = ScoreEvent_GetPointValue( GetScoreEvent( eventName ) )
	}
	
	if ( victim.IsPlayer() )
		playerScore = 5
	
	// Player ejecting triggers this without the extra check
	if ( victim.IsTitan() && victim.GetBossPlayer() != attacker )
		playerScore += 10
	
	
	teamScore = playerScore
	
	// Check score so we dont go over max
	if ( GameRules_GetTeamScore(attacker.GetTeam()) + teamScore > GetScoreLimit_FromPlaylist() )
		teamScore = GetScoreLimit_FromPlaylist() - GameRules_GetTeamScore(attacker.GetTeam())
	
	// Add score + update network int to trigger the "Score +n" popup
	if ( IsFFAGame() )
		AddTeamScore( attacker.GetTeam(), teamScore )
	attacker.AddToPlayerGameStat( PGS_ASSAULT_SCORE, playerScore )
}


// taken from _gamemode_ttdm.nut
void function TTDMIntroSetup()
{
	// this should show intermission cam for 15 sec in prematch, before spawning players as titans
	AddCallback_GameStateEnter( eGameState.Prematch, TTDMIntroStart )
	AddCallback_OnClientConnected( TTDMIntroShowIntermissionCam )
}

void function TTDMIntroStart()
{
	thread TTDMIntroStartThreaded()
}

void function TTDMIntroStartThreaded()
{
	ClassicMP_OnIntroStarted()

	foreach ( entity player in GetPlayerArray() )
	{
		if ( !IsPrivateMatchSpectator( player ) )
			TTDMIntroShowIntermissionCam( player )
		else
			RespawnPrivateMatchSpectator( player )
	}

	wait INTRO_LENGTH

	ClassicMP_OnIntroFinished()
}

void function TTDMIntroShowIntermissionCam( entity player )
{
	if ( GetGameState() != eGameState.Prematch )
		return

	thread PlayerWatchesTTDMIntroIntermissionCam( player )
}

void function PlayerWatchesTTDMIntroIntermissionCam( entity player )
{
	player.EndSignal( "OnDestroy" )
	ScreenFadeFromBlack( player )

	entity intermissionCam = GetEntArrayByClass_Expensive( "info_intermission" )[ 0 ]

	// the angle set here seems sorta inconsistent as to whether it actually works or just stays at 0 for some reason
	player.SetObserverModeStaticPosition( intermissionCam.GetOrigin() )
	player.SetObserverModeStaticAngles( intermissionCam.GetAngles() )
	player.StartObserverMode( OBS_MODE_STATIC_LOCKED )

	wait INTRO_LENGTH

	RespawnAsTitan( player, false )
	TryGameModeAnnouncement( player )
}