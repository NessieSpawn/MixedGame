global function GameModifier_Kraber_Init

const string DEFAULT_REPLACEMENT_TACTICAL = "mp_ability_grapple"
const array<string> TACTICALS_LIST = 
[
    "mp_ability_heal", 
    "mp_ability_grapple", 
    "mp_ability_holopilot", 
    "mp_weapon_grenade_sonar"
]

// for ordnance_boost
const string DEFAULT_REPLACEMENT_ORDNANCE = "mp_weapon_satchel"
const array<string> ORDNANCES_LIST =
[
    "mp_weapon_grenade_gravity",
    "mp_weapon_satchel",
    "mp_weapon_frag_grenade"
]

const array<string> KRABER_PLAYLIST = 
[
    "mp_glitch",
    "mp_colony02",
    "mp_wargames",
    "mp_eden",
    "mp_drydock",
    "mp_black_water_canal",
    "mp_thaw",
    "mp_grave",
    "mp_homestead",
    "mp_forwardbase_kodai",
    "mp_angel_city",
]

// gameplay settings
const bool HACKED_DEATH_KILL = false            // controls hacked death stuff. turn off for even shorter death cam
const bool INFINITE_CLIP = true                 // infinite clip for both kraber and charge rifle
const bool ENABLE_CHARGE_RIFLE = true           // enable charge rifle usage
const bool GRAPPLE_PLAYER_ALLOWED = false       // whether allow player use grapple on other players
const bool ENABLE_RESPAWN_SPEED = true          // if player respawn away from battle, they gain speed boost
const bool ORDNANCE_BOOST = true                // allows player to use ordnance for boosting
const bool PLAYLIST_FORCED = true               // force change map after game
const bool NERFED_HEALTH_REGEN = true           // slow down health regen. stim no longer gets shorter health regen delay
const bool QUICK_CHARGE_BALANCE = true          // make chargehack charge rifle get infinite clip
const bool KUNAI_MODE_TOGGLE = true             // requires command input. player can choose to use pulseblade-only loadout
const bool PISTOL_MODE_TOGGLE = false           // requires command input. I love this guy
const bool SOFTBALL_ENABLED = true              // player can choose to use softball-only loadout. this softball only deals damage when direct hit, otherwise it deals knockbacks
const bool EPG_ENABLED = true                   // player can choose to use epg-only loadout. this epg only deals damage when direct hit, otherwise it deals knockbacks
const bool SPECIAL_MODE_PLAYER_TITLE = true     // display a title for player

// mode notifications
// general
const string LOADOUT_RESTORE_NEXT_RESPAWN = "将在下次重生时恢复装备"
const string LOADOUT_CHANGE_NEXT_RESPAWN = "将在下次重生时应用装备"
// kunaimode
const array<string> KUNAI_MODE_COMMANDS = // chat command will append a "!"
[
    "kunaimode",
    "km"
]
const string KUNAI_MODE_NOTIFICATION_ENABLED = "开启了苦无模式，再次输入 kunaimode 以关闭"
const string KUNAI_MODE_NOTIFICATION_DISABLED = "关闭了苦无模式"
// pistolmode
const array<string> PISTOL_MODE_COMMANDS = // chat command will append a "!"
[
    "pistolmode",
    "pm"
]
const string PISTOL_MODE_NOTIFICATION_ENABLED = "开启了手枪模式，再次输入 pistolmode 以关闭"
const string PISTOL_MODE_NOTIFICATION_DISABLED = "关闭了手枪模式"

const string ANSI_COLOR_END = "\x1b[0m"
const string ANSI_COLOR_BLUE = "\x1b[38;5;81m"
const string ANSI_COLOR_RED = "\x1b[38;5;196m"
const string ANSI_COLOR_ORANGE = "\x1b[38;5;208m"
const string ANSI_COLOR_YELLOW = "\x1b[38;5;11m"

struct
{
    // kunai mode
    table<entity, bool> playerEnabledKunaiMode
    // pistol mode
    table<entity, bool> playerEnabledPistolMode
} file

const array<string> CONNECTING_NOTIFICATIONS = 
[
    //ANSI_COLOR_YELLOW + "克莱博混战服务器" + ANSI_COLOR_END,
    ANSI_COLOR_YELLOW + "不只是克莱博的混战服务器" + ANSI_COLOR_END,
    //ANSI_COLOR_BLUE + "武器可用：" + ANSI_COLOR_END + "克莱博、电能步枪",
    ANSI_COLOR_BLUE + "武器可用：" + ANSI_COLOR_END + "克莱博、电能步枪、能源炮、垒球榴弹",
    ANSI_COLOR_BLUE + "技能可用: " + ANSI_COLOR_END + "幻影铁驭、兴奋剂、钩爪(不会勾中玩家)、脉冲刀",
    ANSI_COLOR_BLUE + "重火力可用：" + ANSI_COLOR_END + "重力星(无引力)、炸药包、破片手雷",
    ANSI_COLOR_ORANGE + "克莱博和电能步枪弹匣无限" + ANSI_COLOR_END,
    ANSI_COLOR_ORANGE + "能源炮与垒球榴弹仅在直击时伤害敌对目标，可击退自身" + ANSI_COLOR_END,
    //ANSI_COLOR_ORANGE + "生命回复延迟加大，重生在无战斗区域会获得加速" + ANSI_COLOR_END,
    //ANSI_COLOR_ORANGE + "钩爪不会勾中玩家，重力星不会产生引力" + ANSI_COLOR_END,
    ANSI_COLOR_ORANGE + "重火力充能一次，仅对自身造成伤害用于加速，满血时不会致死" + ANSI_COLOR_END,
    ANSI_COLOR_YELLOW + "除默认允许的武器外，有以下装备可选(在聊天框输入，偏弱)：" + ANSI_COLOR_END,
    ANSI_COLOR_YELLOW + "!kunaimode 或 !km          " + ANSI_COLOR_END + ANSI_COLOR_BLUE + " 战术技能替换为 苦无，主武器仅可用快充电能步枪" + ANSI_COLOR_END,
    //ANSI_COLOR_YELLOW + "!pistolmode 或 !pm         " + ANSI_COLOR_END + ANSI_COLOR_BLUE + " 主武器替换为 极低伤害的消音RE-45，可以击退目标" + ANSI_COLOR_END,
    ANSI_COLOR_RED + "请尊重其他玩家，勿卖弱、嘲讽等" + ANSI_COLOR_END,
    //"可以在聊天框使用 " + ANSI_COLOR_YELLOW + "!private/!pc <玩家名关键字> <消息内容>" + ANSI_COLOR_END + " 指令与特定玩家进行私聊，私聊消息将显示为" + ANSI_COLOR_YELLOW + "[WHISPER]" + ANSI_COLOR_END,
    //"(例：" + ANSI_COLOR_YELLOW + "!pc 123 nihao " + ANSI_COLOR_END + " 将对名字内含有123字符的玩家发送\"nihao\")"
]

void function GameModifier_Kraber_Init()
{
    if ( HACKED_DEATH_KILL )
        HackedDeath_SetEnabled( true ) // powerful thing, no any screen blur and flash on death

    // enable normal settings, since this modifier didn't change so many things
    Nessie_Normal_Settings_NonTitan_Init()
    if ( HACKED_DEATH_KILL )
        SetDeathCamLengthForced( 2.0 ) // shorter death cam, maybe not needed
    else
    {
        SetDeathCamLengthForced( 0.5 ) // even shorter death cam
        SetReplayStartDelayOverride( 1.5 ) // total of 2.0s death cam( 0.5s to enable respawn + 1.5s before replay )
    }

    // gamemode_kraber specific settings
    Melee_SetSyncedMeleeNoLimit( true ) // enable execution
	SetShouldFUCKOFFAWALL( true ) // no awall allowed
    ForcedPlaylist_Disabled( true ) // overrides base forced playlist
    SetWeaponDropsEnabled( false ) // don't let players pickup other kraber
    //SetBattleChatterEnableToAll( true ) // play chatter to their enemies

    // funny!!!
    //FriendlyFire_SetEnabled( true )
    //MeleeSyncedDecoy_EnableExecutingOwnedDecoy( true )
    //MeleeSyncedDecoy_EnableExecutingProps( true )
    Nessie_SetHoloSprayEnabled( true ) // holo spray for fun
    Nessie_SetHoldingPropsEnabled( true ) // holding prop for fun
    //PrimaryMelee_SetFunnyMeleeEnableToAll( true ) // adds funny melee for player!

    Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
    AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_GameStateEnter( eGameState.Playing, OnGameStart )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_GameStateEnter( eGameState.Postmatch, OnGamePostmatch )

    // marvin
    AddCallback_GameStateEnter( eGameState.Prematch, OnGamePrematch )

    // gameplay settings
    if ( NERFED_HEALTH_REGEN )
        HealthRegen_SetCustomRegenDelay( 6.0, 5.0, 5.0 ) // also give quick_charge users better chance
    if ( KUNAI_MODE_TOGGLE )
    {
        foreach ( string command in KUNAI_MODE_COMMANDS )
        {
            AddClientCommandCallback( command, ToggleKunaiMode )
            NessieChatCommands_Register( "!" + command, ChatToggleKunaiMode )
        }
    }
    if ( PISTOL_MODE_TOGGLE )
    {
        foreach ( string command in PISTOL_MODE_COMMANDS )
        {
            AddClientCommandCallback( command, TogglePistolMode )
            NessieChatCommands_Register( "!" + command, ChatTogglePistolMode )
        }
    }
}

void function OnClientConnected( entity player )
{
    foreach ( string notification in CONNECTING_NOTIFICATIONS )
	    Chat_ServerPrivateMessage( player, notification, false, false )

    // kunai mode
    file.playerEnabledKunaiMode[ player ] <- false
    // pistol mode
    file.playerEnabledPistolMode[ player ] <- false
}

void function OnPlayerRespawned( entity player )
{
    // respawn not giving loadout, which will mess things up
	//GiveKraber( player )
    DisableBoostBar( player )

    if ( !GRAPPLE_PLAYER_ALLOWED )
        DisableGrappleContent( player ) // make players unable to be grappled
    if ( ENABLE_RESPAWN_SPEED && GetGameState() >= eGameState.Playing )
        PlayerRespawnSpeedBoost( player )
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	GiveKraber( player )
    //DisableBoostBar( player ) // no need to reset boost everytime player try to change loadout
}

void function OnGamePrematch()
{
    Nessie_CreateMenuMarvin()
}

void function OnGameStart()
{
    SetPlayerDeathsHidden( true ) // stop death sounds
    // change settings here to prevent being overwriten
    // be sure to set much higher prop limit
    Nessie_SetWorldMaxNessieCount( 80 )
    Rodeo_SetWorldBatteryMaxCount( 80 )
    HoloSpray_SetMaxCountPerPlayer( 4 )

    foreach( entity player in GetPlayerArray() )
        DisableBoostBar( player ) // starting will re-enable player's boost, lets set it to disable again

    if ( INFINITE_CLIP )
        RestorePlayerKraberClip()
}

void function OnGamePostmatch()
{
    if ( PLAYLIST_FORCED )
        KraberForcedPlaylist()
}

// utilities
void function DisableBoostBar( entity player )
{
    thread DisableBoostBar_Threaded( player )
}

void function DisableBoostBar_Threaded( entity player )
{
    WaitFrame() // wait for player earn meter being set up
    if( IsValid( player ) )
        PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function GiveKraber( entity player )
{
    player.TakeWeaponNow( "melee_pilot_emptyhanded" )

    bool usingModifiedLoadout = false
    bool ignoreTacticalFilter = false
    bool ignoreOrdnanceFilter
    bool allowTactical = true
    bool allowOrdnance = true

    string primaryName
    int primarySkin
    int primaryCamo
    int secondarySkin
    int secondaryCamo
    entity firstWeapon
    entity secondWeapon
    foreach ( entity weapon in player.GetMainWeapons() )
    {
        if ( !IsValid( firstWeapon ) )
            firstWeapon = weapon
        if ( IsValid( firstWeapon ) && !IsValid( secondWeapon ) )
            secondWeapon = weapon
    }
    if ( IsValid( firstWeapon ) )
    {
        primaryName = firstWeapon.GetWeaponClassName()
        primarySkin = firstWeapon.GetSkin()
        primaryCamo = firstWeapon.GetCamo()
    }
    if ( IsValid( secondWeapon ) )
    {
        secondarySkin = secondWeapon.GetSkin()
        secondaryCamo = secondWeapon.GetCamo()
    }

    // special weapons
    if ( file.playerEnabledKunaiMode[ player ] ) // kunai mode
    {
        ignoreTacticalFilter = true
        allowTactical = false
        usingModifiedLoadout = true
        if ( SPECIAL_MODE_PLAYER_TITLE )
            player.SetTitle( "#WPN_GRENADE_SONAR_SHORT" )

        //if ( PlayerHasPassive( player, ePassives.PAS_POWER_CELL ) )
	    //    TakePassive( player, ePassives.PAS_POWER_CELL )
        //if ( PlayerHasPassive( player, ePassives.PAS_ORDNANCE_PACK ) )
	    //    TakePassive( player, ePassives.PAS_ORDNANCE_PACK )

        foreach ( entity weapon in player.GetMainWeapons() )
            player.TakeWeaponNow( weapon.GetWeaponClassName() )
        //foreach ( entity weapon in player.GetOffhandWeapons() )
        //    player.TakeWeaponNow( weapon.GetWeaponClassName() )

        entity primary = player.GiveWeapon( "mp_weapon_defender", ["quick_charge", "at_unlimited_ammo"] )
        primary.SetSkin( primarySkin )
        primary.SetCamo( primaryCamo )

        player.TakeOffhandWeapon( OFFHAND_SPECIAL )
        //player.TakeOffhandWeapon( OFFHAND_ORDNANCE )
        array<string> kunaiMods = ["ninja_projectile", "impact_bounce", "kunai_mode"]
        if ( INFINITE_CLIP ) // also give kunai double charge if kraber has infinite clip
            kunaiMods.extend( ["amped_tacticals", "kunai_mode_amped"] )
        player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", OFFHAND_SPECIAL, kunaiMods )
        //player.GiveOffhandWeapon( "mp_weapon_thermite_grenade", OFFHAND_ORDNANCE, ["ninja_projectile", "impact_bounce", "kunai_mode"] )
    }
    else if ( file.playerEnabledPistolMode[ player ] ) // pistol mode
    {
        usingModifiedLoadout = true
        if ( SPECIAL_MODE_PLAYER_TITLE )
            player.SetTitle( "#WPN_RE45_AUTOPISTOL_SHORT" )

        foreach ( entity weapon in player.GetMainWeapons() )
            player.TakeWeaponNow( weapon.GetWeaponClassName() )

        entity secondary = player.GiveWeapon( "mp_weapon_autopistol", ["pistol_mode", "silencer", "extended_ammo"] )
        secondary.SetSkin( secondarySkin )
        secondary.SetCamo( secondaryCamo )
    }

    // normal weapons
    if ( !usingModifiedLoadout )
    {
        if ( SOFTBALL_ENABLED && primaryName == "mp_weapon_softball" ) // softball
        {
            allowOrdnance = false
            if ( SPECIAL_MODE_PLAYER_TITLE )
                player.SetTitle( "#WPN_SOFTBALL_SHORT" )

            foreach ( entity weapon in player.GetMainWeapons() )
                player.TakeWeaponNow( weapon.GetWeaponClassName() )
            //foreach ( entity weapon in player.GetOffhandWeapons() )
            //    player.TakeWeaponNow( weapon.GetWeaponClassName() )

            entity primary = player.GiveWeapon( "mp_weapon_softball", ["rocket_jumper", "direct_hit", "one_shot_clip"] )
            primary.SetSkin( primarySkin )
            primary.SetCamo( primaryCamo )
            //entity secondary = player.GiveWeapon( "mp_weapon_autopistol", ["rocket_arena", "silencer"] )
            //secondary.SetSkin( secondarySkin )
            //secondary.SetCamo( secondaryCamo )

            player.TakeOffhandWeapon( OFFHAND_ORDNANCE )
        }
        else if ( EPG_ENABLED && primaryName == "mp_weapon_epg" ) // epg
        {
            allowOrdnance = false
            if ( SPECIAL_MODE_PLAYER_TITLE )
                player.SetTitle( "#WPN_EPG_SHORT" )

            foreach ( entity weapon in player.GetMainWeapons() )
                player.TakeWeaponNow( weapon.GetWeaponClassName() )
            //foreach ( entity weapon in player.GetOffhandWeapons() )
            //    player.TakeWeaponNow( weapon.GetWeaponClassName() )

            entity primary = player.GiveWeapon( "mp_weapon_epg", ["rocket_jumper", "direct_hit", "one_shot_clip"] )
            primary.SetSkin( primarySkin )
            primary.SetCamo( primaryCamo )
            //entity secondary = player.GiveWeapon( "mp_weapon_autopistol", ["rocket_arena", "silencer"] )
            //secondary.SetSkin( secondarySkin )
            //secondary.SetCamo( secondaryCamo )

            player.TakeOffhandWeapon( OFFHAND_ORDNANCE )
        }
        else // kraber
        {
            if ( SPECIAL_MODE_PLAYER_TITLE )
                player.SetTitle( "#WPN_SNIPER_SHORT" )

            array<string> allowedWeapons = [ "mp_weapon_sniper" ]
            if ( ENABLE_CHARGE_RIFLE )
                allowedWeapons.append( "mp_weapon_defender" )
            array<string> defaultMods = ["pas_fast_ads", "extended_ammo"]
            if ( INFINITE_CLIP )
                defaultMods = ["pas_fast_ads", "ricochet"]

            bool hasKraber = PlayerHasWeapon( player, "mp_weapon_sniper" )
            foreach ( entity weapon in player.GetMainWeapons() )
            {
                string weaponName = weapon.GetWeaponClassName()

                if( !allowedWeapons.contains( weaponName ) )
                {
                    player.TakeWeaponNow( weapon.GetWeaponClassName() )

                    if ( !hasKraber )
                    {
                        entity weapon = player.GiveWeapon( "mp_weapon_sniper", defaultMods )
                        weapon.SetSkin( primarySkin )
                        weapon.SetCamo( primaryCamo )
                        hasKraber = true
                    }
                }

                if ( ENABLE_CHARGE_RIFLE )
                {
                    if( weaponName == "mp_weapon_defender" )
                    {
                        if ( weapon.HasMod( "extended_ammo" ) )
                        {
                            weapon.RemoveMod( "extended_ammo" )
                            weapon.SetWeaponPrimaryAmmoCount( weapon.GetWeaponSettingInt( eWeaponVar.ammo_default_total ) ) // update clip
                        }

                        bool infiniteClip = INFINITE_CLIP
                        if ( !infiniteClip && weapon.HasMod( "quick_charge" ) )
                        {
                            if ( QUICK_CHARGE_BALANCE ) // unlimited ammo for quick charge
                                infiniteClip = true
                        }

                        if ( infiniteClip )
                            weapon.AddMod( "at_unlimited_ammo" ) 
                    }
                }
            }
        }
    }

    // offhand management
	foreach( entity weapon in player.GetOffhandWeapons() )
	{
        array<string> availableOffhands
        if ( allowTactical )
            availableOffhands.extend( TACTICALS_LIST )
        // ordnance boost
        if ( ORDNANCE_BOOST && allowOrdnance )
            availableOffhands.extend( ORDNANCES_LIST )

        // filter ignore
        if ( ignoreTacticalFilter && weapon == player.GetOffhandWeapon( OFFHAND_SPECIAL ) )
            continue
        if ( ignoreOrdnanceFilter && weapon == player.GetOffhandWeapon( OFFHAND_ORDNANCE ) )
            continue

		if( !availableOffhands.contains( weapon.GetWeaponClassName() ) )
			player.TakeWeaponNow( weapon.GetWeaponClassName() )
	}
    if( allowTactical && !IsValid( player.GetOffhandWeapon( OFFHAND_SPECIAL ) ) )
        player.GiveOffhandWeapon( DEFAULT_REPLACEMENT_TACTICAL, OFFHAND_SPECIAL )

    // ordnance boost
    if ( ORDNANCE_BOOST && allowOrdnance )
    {
        entity ordnance = player.GetOffhandWeapon( OFFHAND_ORDNANCE )
        if ( !IsValid( ordnance ) )
        {
            player.GiveOffhandWeapon( DEFAULT_REPLACEMENT_ORDNANCE, OFFHAND_ORDNANCE )
            ordnance = player.GetOffhandWeapon( OFFHAND_ORDNANCE )
        }

        ordnance.AddMod( "ordnance_boost" )
        try { ordnance.SetWeaponPrimaryClipCount( ordnance.GetWeaponPrimaryClipCountMax() ) }
        catch (ex) {}
    }
    
    SetPlayerCooldowns( player ) // update cooldowns again
}

void function DisableGrappleContent( entity player )
{
    if( IsAlive( player ) )
        player.kv.contents = (int(player.kv.contents) | CONTENTS_NOGRAPPLE) // make player unable to be grappled
}

void function EnableGrappleContent( entity player )
{
    player.kv.contents = (int(player.kv.contents) & ~CONTENTS_NOGRAPPLE) // remove unable to be grappled content
}

const float RESPAWN_SPEED_BOOST_DURATION_MAX = 5.0
const float RESPAWN_SPEED_BOOST_SEVERITY = 0.4 // insanly high
const float RESPAWN_SPEED_BOOST_DEACTIVATE_RANGE = 1500 // if we have enemy within this range we stop the speed boost

void function PlayerRespawnSpeedBoost( entity player )
{
    thread PlayerRespawnSpeedBoost_Threaded( player )
}

void function PlayerRespawnSpeedBoost_Threaded( entity player )
{
    if ( HasEnemyInBoostDeactivateRange( player ) )
        return

    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    //Remote_CallFunction_Replay( player, "ServerCallback_SpottingHighlight" ) // temp, just for fun, will highlight predicted fp proxy
    EmitSoundOnEntityOnlyToPlayer( player, player, "UI_MapPing_Victim_1P" ) // the spottingHighlight will keep player's predicted proxy highlighted, which will cause other highlights to disappear while it's shown
    int effect = StatusEffect_AddTimed( player, eStatusEffect.speed_boost, RESPAWN_SPEED_BOOST_SEVERITY, RESPAWN_SPEED_BOOST_DURATION_MAX, 0 )
    int stimVisual = StatusEffect_AddTimed( player, eStatusEffect.stim_visual_effect, 1.0, 9999, 9999 )

    OnThreadEnd
    (
        function(): ( player, stimVisual )
        {
            if ( IsValid( player ) )
                StatusEffect_Stop( player, stimVisual )
        }
    )

    float endTime = Time() + RESPAWN_SPEED_BOOST_DURATION_MAX
    while ( Time() <= endTime )
    {
        WaitFrame()
       
        if ( HasEnemyInBoostDeactivateRange( player ) ) // found enemy...
        {
            StatusEffect_Stop( player, effect )
            StatusEffect_Stop( player, stimVisual )
            return
        }
    }
}

bool function HasEnemyInBoostDeactivateRange( entity player )
{
    array<entity> enemies = GetPlayerArrayOfEnemies_Alive( player.GetTeam() )
    if ( enemies.len() == 0 )
        return false
    entity closestEnemy = GetClosest( enemies, player.GetOrigin(), RESPAWN_SPEED_BOOST_DEACTIVATE_RANGE )
    if ( IsValid( closestEnemy ) )
        return true
    return false
}

void function RestorePlayerKraberClip()
{
    thread RestorePlayerKraberClip_Threaded()
}

void function RestorePlayerKraberClip_Threaded()
{
    while( GetGameState() == eGameState.Playing )
    {
        foreach ( entity player in GetPlayerArray() )
        {
            entity weapon = player.GetActiveWeapon()
            if ( IsValid( weapon ) )
            {
                if ( weapon.GetWeaponClassName() == "mp_weapon_sniper" )
                    weapon.SetWeaponPrimaryClipCount( weapon.GetWeaponPrimaryClipCountMax() )
            }
        }

        WaitFrame()
    }
}

void function PlayerWeaponModeToggle( entity player, table<entity, bool> toggleTable, string enableMsg, string disableMsg )
{
    bool nextModeState = !toggleTable[ player ]
    // disable other modes
    file.playerEnabledKunaiMode[ player ] = false
    file.playerEnabledPistolMode[ player ] = false

    toggleTable[ player ] = nextModeState

    string chatNotification = ""
    if ( nextModeState )
    {
        if ( Loadouts_CanGivePilotLoadout( player ) )
            chatNotification = ANSI_COLOR_BLUE + enableMsg + ANSI_COLOR_END
        else
            chatNotification = ANSI_COLOR_BLUE + enableMsg + "。" + LOADOUT_CHANGE_NEXT_RESPAWN + ANSI_COLOR_END
    }
    else
    {
        if ( Loadouts_CanGivePilotLoadout( player ) )
            chatNotification = ANSI_COLOR_BLUE + disableMsg + ANSI_COLOR_END
        else
            chatNotification = ANSI_COLOR_BLUE + disableMsg + "。" + LOADOUT_RESTORE_NEXT_RESPAWN + ANSI_COLOR_END
    }

    if ( Loadouts_CanGivePilotLoadout( player ) )
        Loadouts_TryGivePilotLoadout( player )

    if ( chatNotification != "" )
        Chat_ServerPrivateMessage( player, chatNotification, false, false )
}

// kunai mode
bool function ToggleKunaiMode( entity player, array<string> args )
{
    PlayerWeaponModeToggle( player, file.playerEnabledKunaiMode, KUNAI_MODE_NOTIFICATION_ENABLED, KUNAI_MODE_NOTIFICATION_DISABLED )

    return true
}

ClServer_MessageStruct function ChatToggleKunaiMode( ClServer_MessageStruct msgStruct )
{
    entity sender = msgStruct.player
    ToggleKunaiMode( sender, [] )
    msgStruct.shouldBlock = true // always block the message
    return msgStruct
}

bool function TogglePistolMode( entity player, array<string> args )
{
    PlayerWeaponModeToggle( player, file.playerEnabledPistolMode, PISTOL_MODE_NOTIFICATION_ENABLED, PISTOL_MODE_NOTIFICATION_DISABLED )

    return true
}

ClServer_MessageStruct function ChatTogglePistolMode( ClServer_MessageStruct msgStruct )
{
    entity sender = msgStruct.player
    TogglePistolMode( sender, [] )
    msgStruct.shouldBlock = true // always block the message
    return msgStruct
}

void function KraberForcedPlaylist()
{
    thread KraberForcedPlaylist_Threaded()
}

void function KraberForcedPlaylist_Threaded()
{
    wait 5
    
    array<string> curPlayList = KRABER_PLAYLIST
    int mapIndex = curPlayList.find( GetMapName() )
    mapIndex += 1 // next map index
	if( mapIndex == curPlayList.len() ) // reached last map?
		mapIndex = 0
	string nextMap = curPlayList[mapIndex]

    ServerCommand( "map " + nextMap )
}