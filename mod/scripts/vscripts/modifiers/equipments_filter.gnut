untyped
global function EquipmentsFilter_Init

global function IgnoreEquipmentsFilter // "Offhand", "Main", "All", "None"
global function FilterWeapon

global function SetEquipmentsFilterList

global struct Weapon
{
	string weapon
	array<string> mods
}

const bool WHITELIST = false
const bool BLACKLIST = true
const bool FILTER_TYPE = BLACKLIST

const Weapon PRIMARY = { weapon = "mp_weapon_rspn101_og", mods = ["extended_ammo", "pas_fast_reload", "hcog"] }
const Weapon SECONDARY = { weapon = "mp_weapon_defender", mods = ["pas_fast_swap", "pas_fast_ads"] }
const Weapon BACKUP = { weapon = "mp_weapon_autopistol", mods = ["extended_ammo", "pas_fast_reload"] }
const Weapon GRENADE = { weapon = "mp_weapon_thermite_grenade", mods = [] }
const Weapon TACTICAL = { weapon = "mp_ability_grapple", mods = [] }
const Weapon MELEE = { weapon = "melee_pilot_kunai", mods = [] }
const bool MELEESWITCH = false

const array<string> DEFAULT_WEAPONS_LIST = 
[
	"mp_ability_cloak", 
	"mp_weapon_deployable_cover", 
	"mp_weapon_frag_grenade", 
	"mp_weapon_grenade_gravity", 
	"mp_weapon_satchel", 
	"mp_weapon_dmr", 
	"mp_weapon_lmg", 
	"mp_weapon_g2",
	"mp_weapon_pulse_lmg"
]

const array<string> DISABLED_BOOSTS_LIST =
[
	"burnmeter_smart_pistol", 
	"burnmeter_ap_turret_weapon",
]

const string ANSI_COLOR_END = "\x1b[0m"
const string ANSI_COLOR_BLUE = "\x1b[38;5;81m"
const string ANSI_COLOR_RED = "\x1b[38;5;196m"
const string ANSI_COLOR_ORANGE = "\x1b[38;5;208m"
const string ANSI_COLOR_YELLOW = "\x1b[38;5;11m"

const array<string> CONNECTING_NOTIFICATIONS = 
[
	ANSI_COLOR_YELLOW + "村规PVP服务器，禁用了部分可能引起争议的装备" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "武器禁用：" + ANSI_COLOR_END + "长弓DMR、喷火枪、G2、冷战榴弹、近战",
	ANSI_COLOR_ORANGE + "技能禁用：" + ANSI_COLOR_END + "隐身、A盾",
	ANSI_COLOR_ORANGE + "重火力禁用：" + ANSI_COLOR_END + "破片手雷、重力星、炸药包",
	ANSI_COLOR_ORANGE + "强化卡禁用：" + ANSI_COLOR_END + "智慧手枪、铁驭哨兵",
]

struct
{
	string ignoreFilterType = "None"
	array<string> filterList = DEFAULT_WEAPONS_LIST // default
} file

void function EquipmentsFilter_Init()
{
	// replace cloak/a-wall pilot model with grapple
    AltPilot_SetPlayerSettingsOverride( "pilot_heavy_male", "pilot_grapple_male" )
    AltPilot_SetPlayerSettingsOverride( "pilot_heavy_female", "pilot_grapple_female" )
    AltPilot_SetPlayerSettingsOverride( "pilot_geist_male", "pilot_grapple_male" )
    AltPilot_SetPlayerSettingsOverride( "pilot_geist_female", "pilot_grapple_female" )
	
	Burnmeter_SetRewardsDisabled( DISABLED_BOOSTS_LIST ) // modified function in _burnmeter.gnut

	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned ) // respawn not giving loadout, which will mess things up
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
}

void function SetEquipmentsFilterList( array<string> list )
{
	file.filterList = list
}

void function IgnoreEquipmentsFilter( string ignoreType )
{
	file.ignoreFilterType = ignoreType
	if( ignoreType == "Offhand" || ignoreType == "All" )
	{
		// re-enable cloak/a-wall pilot model
		AltPilot_RemovePlayerSettingsOverride( "pilot_heavy_male" )
		AltPilot_RemovePlayerSettingsOverride( "pilot_heavy_female" )
		AltPilot_RemovePlayerSettingsOverride( "pilot_geist_male" )
		AltPilot_RemovePlayerSettingsOverride( "pilot_geist_female" )
	}
}

void function OnClientConnected( entity player )
{
	foreach ( string message in CONNECTING_NOTIFICATIONS )
		Chat_ServerPrivateMessage( player, message, false, false )
}

void function OnPlayerRespawned( entity player )
{
	//FilterWeapon( player )
	//player.SetAimAssistAllowed( false )
	//script foreach( entity player in GetPlayerArray() ){ player.SetAimAssistAllowed( false ) }
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	FilterWeapon( player )
}

void function FilterWeapon( entity player )
{
	if( file.ignoreFilterType == "All" ) // some random event will set this to not influence their loadouts
		return

 	bool hasAllowedWeapon = false

	if( file.ignoreFilterType != "Main" )
	{
		foreach ( int enum_, entity weapon in player.GetMainWeapons() )
		{
			if ( FILTER_TYPE == IsOnList( weapon.GetWeaponClassName() ) )
			{
				player.TakeWeaponNow( weapon.GetWeaponClassName() )

				switch ( enum_ ) 
				{
					case 0:
						if ( PRIMARY.weapon != "")
							player.GiveWeapon( PRIMARY.weapon, PRIMARY.mods )
						break
					case 1:
						if ( SECONDARY.weapon != "")
							player.GiveWeapon( SECONDARY.weapon, SECONDARY.mods	)
						break
					case 2:
						if ( BACKUP.weapon != "")
							player.GiveWeapon( BACKUP.weapon, BACKUP.mods )
						break
					default:
						break
				}
			}
		}
	}

	if( file.ignoreFilterType != "Offhand" )
	{
		foreach( int enum_, entity weapon in player.GetOffhandWeapons() )
		{
			if( FILTER_TYPE == IsOnList( weapon.GetWeaponClassName() ) )
			{
				player.TakeWeaponNow( weapon.GetWeaponClassName() )

				switch( enum_ )
				{
					case 0:
						if( GRENADE.weapon != "" )
							player.GiveOffhandWeapon( GRENADE.weapon, OFFHAND_ORDNANCE, GRENADE.mods )
						break
					case 1:
						if( TACTICAL.weapon != "" )
							player.GiveOffhandWeapon( TACTICAL.weapon, OFFHAND_SPECIAL, TACTICAL.mods )
						break
					default:
						break
				}
			}
		}
	}

	player.TakeWeaponNow( "melee_pilot_emptyhanded" )
	if( MELEESWITCH )
		player.GiveOffhandWeapon( MELEE.weapon, OFFHAND_MELEE, MELEE.mods )
}

bool function IsOnList( string w )
{
	foreach ( weapon in file.filterList ) 
	{
		if ( weapon == w )	
			return true
	}
	return false
}