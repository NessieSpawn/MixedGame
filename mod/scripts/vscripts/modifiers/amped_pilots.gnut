untyped // SetPlayerSettings() requires this
global function AmpedPilots_Enabled_Init

global function AmpedPilots_Init
global function AmpedPilots_SetEnabled

struct
{
    bool pilotAmpEnabled = false
} file

void function AmpedPilots_Enabled_Init()
{
    file.pilotAmpEnabled = true
    SetPlayerBodyTypeDependOnSurfaceProp( true ) // so players will display correct death effect
    RegisterSignal( "PendingClassChange" )
}

void function AmpedPilots_Init()
{
    AddCallback_PlayerClassChanged( OnPlayerClassChanged )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPilotGetLoadout )
}

void function OnPlayerClassChanged( entity player )
{
    if ( !file.pilotAmpEnabled )
        return

    if ( !IsAlive( player ) ) // dead players can do nothing with their current class
        return

    if ( player.IsTitan() )
        return

    if ( player.GetPlayerSettings() == "spectator" )
        return
    
    thread ChangePlayerToColiseumSetFile( player )
}

void function ChangePlayerToColiseumSetFile( entity player )
{
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )
    player.Signal( "PendingClassChange" )
    player.EndSignal( "PendingClassChange" ) // don't let this instance running multiple time for a player

    WaitFrame() // wait for other class functions to set up

    // skin and camo get before resetting
    bool isFemale = IsPlayerFemale( player )
    array<string> classMods = player.GetPlayerSettingsMods()
    int skin = player.GetSkin()
    int camo = player.GetCamo()

    asset model = player.GetModelName()
	int bodyGroup = player.GetFullBodygroup()
    //player.SetPlayerSettingsWithMods( "pilot_coliseum_male", ["pas_ads_hover"] )
    string coliseumSetFile = "pilot_coliseum_male"
    if ( isFemale )
        coliseumSetFile = "pilot_coliseum_female"
    player.SetPlayerSettingsWithMods( coliseumSetFile, classMods )

    player.SetModel( model )
    player.SetFullBodygroup( bodyGroup )
    player.SetSkin( skin )
    player.SetCamo( camo )
}

void function OnPilotGetLoadout( entity player, PilotLoadoutDef p )
{
    if ( !file.pilotAmpEnabled )
        return

    if ( PlayerHasWeapon( player, "mp_ability_grapple" ) )
        player.GiveExtraWeaponMod( "all_grapple" )
    else
        player.GiveExtraWeaponMod( "amped_tacticals" )

    // rearm player
    // restore ammo
	foreach( entity offhandweapon in player.GetOffhandWeapons() )
	{
        if ( IsValid( offhandweapon ) )
        {
            if( offhandweapon.GetWeaponClassName() == "mp_titanweapon_vortex_shield_ion" )
                continue
            switch ( GetWeaponInfoFileKeyField_Global( offhandweapon.GetWeaponClassName(), "cooldown_type" ) )
            {
                case "grapple":
                    player.SetSuitGrapplePower( 100.0 )
                    continue

                case "ammo":
                case "ammo_instant":
                case "ammo_deployed":
                case "ammo_timed":
                case "ammo_per_shot":
                    int maxAmmo = offhandweapon.GetWeaponPrimaryClipCountMax()

                    offhandweapon.SetWeaponPrimaryClipCount( maxAmmo )
                    continue

                case "chargeFrac":
                case "charged_shot":
                case "vortex_drain":
                    offhandweapon.SetWeaponChargeFractionForced( 0 )
                    continue

                default:
                    //printt( offhandweapon.GetWeaponClassName() + " needs to be updated to support cooldown_type setting" )
                    continue
            }
        }
	}
}

void function AmpedPilots_SetEnabled( bool enabled )
{
    file.pilotAmpEnabled = enabled
    SetPlayerBodyTypeDependOnSurfaceProp( enabled ) // bind together to fix death effect
}