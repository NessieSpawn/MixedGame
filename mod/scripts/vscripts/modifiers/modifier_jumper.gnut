global function GameModifier_Jumper_Init

const int PLAYER_AIR_JUMP_MAX_COUNT = 10
const int PLAYER_AIR_ACCELERATION = 1500
const float JUMP_PAD_SPEED_BOOST_SEVERITY = 1.0
const int JUMP_PAD_VERTICAL_SPEED = 650
const bool JUMP_PAD_SPEED_LOCK = false

const float JUMP_PAD_COOLDOWN = 0.3

struct
{
    table< entity, int > playerAirJumpCountTable
	table< entity, float > playerLastJumpPadUsedTime
} file

void function GameModifier_Jumper_Init()
{
    AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_PlayerClassChanged( OnPlayerChangeClass )
    AddCallback_GameStateEnter( eGameState.Prematch, OnGamePrematch )
}

void function OnClientConnected( entity player )
{
    file.playerAirJumpCountTable[ player ] <- 0
	file.playerLastJumpPadUsedTime[ player ] <- 0.0
    AddPlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, OnPlayerDoubleJump )
}

void function OnPlayerChangeClass( entity player )
{
	thread DelayedApplyAirAcceleration( player )
}

void function DelayedApplyAirAcceleration( entity player )
{
	player.EndSignal( "OnDestroy" )
	WaitFrame()
	player.kv.airAcceleration = PLAYER_AIR_ACCELERATION
}

void function OnGamePrematch()
{
    thread GiveAllEntitiesJumpPadEffect()
}

void function OnPlayerDoubleJump( entity player )
{
    file.playerAirJumpCountTable[ player ] += 1
    if ( file.playerAirJumpCountTable[ player ] >= PLAYER_AIR_JUMP_MAX_COUNT )
        return
    player.TouchGround() // restore double jump
}

void function GiveAllEntitiesJumpPadEffect()
{
    while( true )
    {
        WaitFrame()

        array<entity> allEntities
        allEntities.extend( GetPlayerArray() )
        allEntities.extend( GetNPCArray() )
        // don't handle projectiles now
        //allEntities.extend( GetProjectileArrayEx( "grenade", TEAM_ANY, TEAM_ANY, < 0,0,0 >, -1 ) )
        //allEntities.extend( GetProjectileArrayEx( "rpg_missile", TEAM_ANY, TEAM_ANY, < 0,0,0 >, -1 ) )
        //allEntities.extend( GetProjectileArrayEx( "crossbow_bolt", TEAM_ANY, TEAM_ANY, < 0,0,0 >, -1 ) )

        foreach ( entity ent in allEntities )
        {
            if ( !IsAlive( ent ) )
                continue
            bool shouldLift = false
            int fixAmount = 60
            if ( ent.IsProjectile() )
                fixAmount = 120
            // best way to handle for now
            TraceResults traceresult = TraceLine( ent.GetOrigin(), ent.GetOrigin() - < 0, 0, fixAmount >, ent, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
            if( IsValid( traceresult.hitEnt ) )
            {
                if ( traceresult.hitEnt.IsWorld() )
                {
                    //print( ent )
                    shouldLift = true
                }
            }
            
            try // some entities may don't have IsOnGround() function
            {
                if ( ent.IsOnGround() )
                    shouldLift = true
            }
            catch ( ex1 ){}
			try // some entities may not spawning with a highlight
			{
				Highlight_SetEnemyHighlight( ent, "battery_thief" ) // give entity a highlight
			}
			catch ( ex2 ){}

            if ( ent.IsPlayer() )
            {
                if ( ent.IsWallRunning() || ent.IsWallHanging() || ent.IsTraversing() )
				{                    
					shouldLift = false // save these players
				}
            }

            if ( shouldLift )
            {
                //print( ent )
                if ( ent.IsPlayer() )
				{
                    file.playerAirJumpCountTable[ ent ] = 0 // restore air jumps
					ent.TouchGround() // restore double jump
				}
                //if ( ent.IsNPC() )
                    //ent.SetOrigin( ent.GetOrigin() + < 0,0,30 > ) // npcs needs to be off ground to jump
                GiveJumpPadEffect( ent )
            }
        }
    }
}

// copied from mp_ability_jump_pad.gnut, signals has already been registered
void function GiveJumpPadEffect( entity ent )
{
	if( !IsValid( ent ) )
		return
    // only parented entity can't jump
	if( ent.GetParent() != null )
		return
	// player jumppad cooldown
	if ( ent.IsPlayer() )
	{
		if ( file.playerLastJumpPadUsedTime[ ent ] + JUMP_PAD_COOLDOWN > Time() )
			return
	}

    if ( ent.IsPlayer() )
    {
        StopSoundOnEntity( ent, "Boost_Card_SentryTurret_Deployed_3P" ) // prevent sound stacking
	    EmitSoundOnEntity( ent, "Boost_Card_SentryTurret_Deployed_3P" ) // ony emit one sound, for this mode will frequcenly use jump pad
	    Remote_CallFunction_Replay( ent, "ServerCallback_ScreenShake", 5, 10, 0.5 )
    }

	vector targetVelocity
    // jump higher
	targetVelocity = < ent.GetVelocity().x * JUMP_PAD_SPEED_BOOST_SEVERITY, ent.GetVelocity().y * JUMP_PAD_SPEED_BOOST_SEVERITY, JUMP_PAD_VERTICAL_SPEED >

    if ( ent.IsPlayer() ) 
    {
		file.playerLastJumpPadUsedTime[ ent ] = Time()
		if ( JUMP_PAD_SPEED_LOCK )
        	thread JumpPadForcedVelocity( ent, targetVelocity ) // maybe not a good idea: prevent jump higher through manually jump input, also prevents tap strafe
        else
			ent.SetVelocity( targetVelocity )
		thread JumpPadFlying( ent )
        thread JumpPadTrailThink( ent )
    }
    else
        ent.SetVelocity( targetVelocity )
}

void function JumpPadFlying( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "JumpPadFlyStart" )
	player.EndSignal( "JumpPadFlyStart" )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				player.Signal( "JumpPadPlayerTouchGround" )
		}
	)

	wait 1 // wait for player leave ground

	while( true )
	{
		if( player.IsOnGround() )
			break

		WaitFrame()
	}
}

void function JumpPadForcedVelocity( entity player, vector targetVelocity )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "JumpPadPlayerTouchGround" )
	player.Signal( "JumpPadForcedVelocityStart" )
	player.EndSignal( "JumpPadForcedVelocityStart" )

	float forcedTime = 0.5 // same as player's lurch time
	float startTime = Time()
	while( Time() < startTime + forcedTime )
	{
		player.SetVelocity( targetVelocity )
		WaitFrame()
	}
}

void function JumpPadTrailThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "JumpPadPlayerTouchGround" )
	player.Signal( "JumpPadTrailStart" )
	player.EndSignal( "JumpPadTrailStart" )

	array<entity> jumpJetFX

	OnThreadEnd(
		function(): ( jumpJetFX )
		{
			foreach( entity fx in jumpJetFX )
			{
				if( IsValid( fx ) )
					EffectStop( fx )
			}
		}
	)

	// enemy left vent fx, // "vent_left_out" "vent_right_out" direction is a little bit weird
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_left", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_left", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON", "vent_left", false ) )
	// enemy right vent fx
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_right", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_right", false ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_ON", "vent_right", false ) )
	// enemy center vent fx
	// this can be too big!! maybe use it for flame throwers?
	//jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_enemy_jump_jet_center_DBL", "vent_center", false ) )

	// friendly left vent fx, "P_team_jump_jet_WR_trails" is more visible with some transparent flames
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_DBL", "vent_left", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_left", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON", "vent_left", true ) )
	// friendly right vent fx
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_DBL", "vent_right", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_right", true ) )
	jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_ON", "vent_right", true ) )
	// friendly center vent fx
	// this can be too big!! maybe use it for flame throwers?
	//jumpJetFX.append( CreateJumpPadJetFxForPlayer( player, $"P_team_jump_jet_center_DBL", "vent_center", true ) )

	WaitForever()
	
}

entity function CreateJumpPadJetFxForPlayer( entity player, asset particle, string attachment, bool isFriendly )
{
	int particleID = GetParticleSystemIndex( particle )
	int attachID = player.LookupAttachment( attachment )
	if( attachID <= 0 ) // no attachment valid, don't play fx on this model
		return null
	entity fx = StartParticleEffectOnEntity_ReturnEntity( player, particleID, FX_PATTACH_POINT_FOLLOW, attachID )
	fx.SetOwner( player )
	SetTeam( fx, player.GetTeam() )
	if( isFriendly ) // removed: player can see friendly fx( blue flames and trails )
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY // | ENTITY_VISIBLE_TO_OWNER // this might get annoying!
	else
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY

	return fx
}