global function Elitist_Init

void function Elitist_Init() {
    #if SERVER
        if(KillSlowPlayersEnabled() || DamageSlowPlayersEnabled()){
            //AddCallback_OnPlayerRespawned( RemoveAntiSpeedLoadout )

            // this one isn't enabled, player can rekt other players:(
            //AddCallback_OnPlayerGetsNewPilotLoadout( RemoveAntiSpeedLoadoutOnChange )

            AddCallback_GameStateEnter( eGameState.Playing, TrackPlayerSpeed )

            //Don't die after the match, but needs fix for epilogue
            AddCallback_GameStateEnter( eGameState.WinnerDetermined, StopTrackingPlayerSpeed )
            AddCallback_OnPlayerRespawned( GraceTimeOnRespawned )
            AddCallback_OnClientConnected( GraceTimeOnRespawned )
        }

        Riff_ForceTitanAvailability( eTitanAvailability.Never )
	    // Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
        if(GetCurrentPlaylistVarInt("accepted_speed", 0) > 0)
            acceptedSpeed = GetCurrentPlaylistVarFloat("accepted_speed", 0)
        if(GetCurrentPlaylistVarInt("speedgauge_multiplier", 0) > 0)
            counterMultiplier *= GetCurrentPlaylistVarFloat("speedgauge_multiplier", 0)
    #endif
}


bool function KillSlowPlayersEnabled() {
    return GetCurrentPlaylistVarInt("kill_slow_players", 0) == 1
}
bool function DamageSlowPlayersEnabled() {
    return true
}
bool function BarCounterEnabled() {
    return true
}
bool function TextCounterEnabled() {
    return GetCurrentPlaylistVarInt("text_speedgauge_counter", 0) == 1
}
bool function BurnMeterCounterEnabled(){
    return GetCurrentPlaylistVarInt("burnmeter_speedgauge_counter", 0) == 1
}



float counterMultiplier = 0.02 //defines speed at which counter is added or removed
float speedFetchInterval = 0.1 //seconds
float graceTime = 2
float acceptedSpeed = 260 // 260 is running speed
bool GameIsPlaying = false;

table playersCounters = {}

#if SERVER
    void function ForcePlayerLoadout( entity player ) {

    }

    void function ForcePlayerLoadoutOnLoadoutChange(entity player, PilotLoadoutDef loadout ) {
        ForcePlayerLoadout( player )
    }

    void function TrackPlayerSpeed() {
        GameIsPlaying = true

        thread TrackPlayerSpeed_Threaded()
    }

    void function TrackPlayerSpeed_Threaded(){
        wait 2
        foreach (entity player in GetPlayerArray()){
            //SendHudMessage( player, "移速过低的玩家将受到惩罚", -1, 0.4, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
            GraceTimeOnRespawned(player) // Initializes
        }
        wait 3
        while( GameIsPlaying )
        {
            wait speedFetchInterval
            array<entity> players = GetPlayerArray()
            foreach (entity player in players)
            {
                if ( IsValid(player) && IsAlive( player ) && player.GetPlayerName() in playersCounters && playersCounters[player.GetPlayerName()] >= 0 )
                {
                    if(!player.IsPhaseShifted()){
                        // velocity tracking
                        vector velocity = player.GetVelocity()
                        float playerVel = sqrt(velocity.x * velocity.x + velocity.y * velocity.y) // Keep only horizontal velocity
                        playersCounters[player.GetPlayerName()] -= ((acceptedSpeed - playerVel)*counterMultiplier)*(speedFetchInterval*0.1)

                        if(playersCounters[player.GetPlayerName()] > 1){
                            playersCounters[player.GetPlayerName()] = 1
                        }else if(playersCounters[player.GetPlayerName()] <= 0){
                            playersCounters[player.GetPlayerName()] = 0
                            if(KillSlowPlayersEnabled()){
                                SendHudMessage( player, "You died because you were too slow", -1, 0.5, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
                                player.SetHealth(0)
                            }
                            else if(DamageSlowPlayersEnabled()){
                                //SendHudMessage( player, "移速过低！已受到生命限制\n提高速度以恢复自身", -1, 0.5, 255, 255, 255, 255, 0, 3.0, 0.5 )
                                player.SetHealth( 5 ) // should set much lower to make everything oneshot it // player.GetMaxHealth()/10)
                            }
                        }
                    }
                    //IDK how to cast to float and it's ugly
                    if(player.GetHealth() > 0)
                        printCounter(player, (playersCounters[player.GetPlayerName()]+"").tofloat(), speedFetchInterval)
                }
            }
        }
    }

    void function GraceTimeOnRespawned(entity player){
        thread GraceTimeOnRespawned_Threaded(player)
    }

    void function GraceTimeOnRespawned_Threaded(entity player){
        if(IsValid(player)){
            if(player.GetPlayerName() in playersCounters){
                playersCounters[player.GetPlayerName()] = -1
            }else{
                playersCounters[player.GetPlayerName()] <- -1
            }

            wait graceTime
            //while( GetGameState() == eGameState.Prematch ) // wait till prematch end
            //    WaitFrame()
	}
	if(IsValid(player)){
            if(!(player.GetPlayerName() in playersCounters)){
                playersCounters[player.GetPlayerName()] <- 1
            }else{
                playersCounters[player.GetPlayerName()] = 1
            }
        }

    }

    void function RemoveAntiSpeedLoadout(entity player){
        if( IsValid( player.GetOffhandWeapon(OFFHAND_ORDNANCE) ) )
        {
            entity ordnance = player.GetOffhandWeapon(OFFHAND_ORDNANCE)
            if(ordnance.GetWeaponClassName() == "mp_weapon_grenade_gravity"){
                player.TakeOffhandWeapon(OFFHAND_ORDNANCE)
                player.GiveOffhandWeapon("mp_weapon_thermite_grenade", OFFHAND_ORDNANCE)
            }
            else if(ordnance.GetWeaponClassName() == "mp_weapon_grenade_emp"){
                player.TakeOffhandWeapon(OFFHAND_ORDNANCE)
                player.GiveOffhandWeapon("mp_weapon_grenade_electric_smoke", OFFHAND_ORDNANCE)
            }
        }
        thread RemoveAntiSpeedModdedLoadout_Threaded( player )
    }

    void function RemoveAntiSpeedLoadoutOnChange(entity player, PilotLoadoutDef loadout ){
        RemoveAntiSpeedLoadout(player)
    }

    void function StopTrackingPlayerSpeed(){
        GameIsPlaying = false
    }

    void function printCounter(entity player, float counter, float duration){
        if(BarCounterEnabled()){
            string message = ""
            for(int i=0; i<counter*20; i++){
                message += "||"
            }
            SendHudMessage( player, "生命值: [ " + message + " ]", -1, 0.8, 0, 255, 255 /*192, 192, 192*/, 255, 0, duration*2, 0 )
        }else if(TextCounterEnabled()){
	    //Oh god my fingers hurts when writing this (how tf do I keep integer part only)
            SendHudMessage( player, ((counter*100)-((counter*100)%1))+"%", -1, 0.8, 192, 192, 192, 255, 0, duration*2, 0 )
        }
        if(BurnMeterCounterEnabled()){
            player.SetPlayerNetFloat( EARNMETER_EARNEDFRAC, counter )
        }
    }

void function RemoveAntiSpeedModdedLoadout_Threaded( entity player )
{
    wait 1
    if( IsValid( player ) )
    {
        int offhandslot = -1
        if( player.GetMainWeapons().len() > 1 )
        {
            if( IsValid( player.GetMainWeapons()[1] ) )
            {
                entity mainhand = player.GetMainWeapons()[1]
                if( mainhand.GetWeaponClassName() == "mp_weapon_softball" )
                {
                    if( mainhand.HasMod( "emp_softball" ) || mainhand.HasMod( "gravity_softball" ) )
                    {
                        player.TakeWeaponNow( mainhand.GetWeaponClassName() )
                        player.GiveWeapon( "mp_weapon_softball", ["pas_fast_reload", "extended_ammo", "pas_fast_swap", "thermite_softball"] )
                    }
                }
            }
        }
        foreach( entity offhand in player.GetOffhandWeapons() )
        {
            offhandslot += 1
            if( offhandslot == OFFHAND_EQUIPMENT )
                offhandslot += 1
            if( offhand.HasMod( "gas_trap" ) )
            {
                player.TakeWeaponNow( offhand.GetWeaponClassName() )
                player.GiveOffhandWeapon( "mp_titanweapon_heat_shield", offhandslot, ["pilot_usage"] )
            }
            if( offhand.HasMod( "pilot_tether" ) )
            {
                player.TakeWeaponNow( offhand.GetWeaponClassName() )
                player.GiveOffhandWeapon( "mp_titanweapon_dumbfire_rockets", offhandslot, ["fd_twin_cluster"] )
            }
            if( offhand.GetWeaponClassName() == "mp_weapon_arc_trap" )
            {
                player.TakeWeaponNow( offhand.GetWeaponClassName() )
                player.GiveOffhandWeapon( "mp_titanability_smoke", offhandslot )
            }
            if( offhand.GetWeaponClassName() == "mp_titanweapon_arc_wave" )
            {
                player.TakeWeaponNow( offhand.GetWeaponClassName() )
                player.GiveOffhandWeapon( "mp_weapon_thermite_grenade", offhandslot )
            }
        }
    }
}

#endif
