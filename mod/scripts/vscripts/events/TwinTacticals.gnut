global function TwinTacticals_Init
void function TwinTacticals_Init(){
    //AddPrivateMatchModeSettingEnum("#MODE_SETTING_CATEGORY_RIFFPACK", "TwinTacticals", ["#SETTING_DISABLED", "#SETTING_ENABLED"], "0")
    #if SERVER
    // modified settings
    IgnoreEquipmentsFilter( "Offhand" ) // this will disable FUCKOFF functions
    SetLoadoutGracePeriodEnabled( false )
    
    // replace cloak pilot model with grapple
    AltPilot_SetPlayerSettingsOverride( "pilot_heavy_male", "pilot_grapple_male" )
    AltPilot_SetPlayerSettingsOverride( "pilot_heavy_female", "pilot_grapple_female" )
    AltPilot_SetPlayerSettingsOverride( "pilot_geist_male", "pilot_grapple_male" )
    AltPilot_SetPlayerSettingsOverride( "pilot_geist_female", "pilot_grapple_female" )

    //AddCallback_OnPlayerRespawned(Respawn)
    AddCallback_OnPlayerGetsNewPilotLoadout(OnPlayerChangeLoadout)
    #endif
}

bool function TwinTacsEnabled(){
    return true //GetCurrentPlaylistVarInt("TwinTacticals", 0) == 1
}


const array<string> pilotAbility = [
    "mp_ability_cloak",
    "mp_ability_grapple",
    "mp_ability_heal",
    "mp_ability_holopilot",
    "mp_ability_shifter",
    "mp_weapon_grenade_sonar",
    "mp_weapon_deployable_cover"
]
const array<string> pilotNades = [
    "mp_weapon_satchel",
    "mp_weapon_grenade_electric_smoke",
    "mp_weapon_grenade_emp",
    "mp_weapon_grenade_gravity",
    "mp_weapon_frag_grenade",
    "mp_weapon_thermite_grenade"
]
const array<string> bannedAbility = [ // means these can only get from random givings, match equipmentsFilter
    "mp_ability_cloak",
    "mp_weapon_deployable_cover"
]
#if SERVER
void function Respawn(entity player){
    if(TwinTacsEnabled()){
        /* // should rework this
        string offhand = player.GetOffhandWeapons()[OFFHAND_RIGHT].GetWeaponClassName()
        if(pilotNades.find(offhand) != -1){
            player.TakeWeaponNow(offhand)
            if(pilotAbility[pilotNades.find(offhand)] == player.GetOffhandWeapons()[OFFHAND_LEFT].GetWeaponClassName())
                player.GiveOffhandWeapon(pilotAbility[pilotNades.find(offhand)+1], OFFHAND_RIGHT)
            else
                player.GiveOffhandWeapon(pilotAbility[pilotNades.find(offhand)], OFFHAND_RIGHT)
            }
        */

        string tactical = player.GetOffhandWeapons()[OFFHAND_LEFT].GetWeaponClassName()
        string ordnance = player.GetOffhandWeapons()[OFFHAND_RIGHT].GetWeaponClassName()
        if( bannedAbility.find(tactical) != -1 )
        {
            player.TakeWeaponNow( tactical )
            player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_LEFT )
            tactical = "mp_ability_grapple"
        }

        if( pilotNades.find(ordnance) != -1 )
            ReplaceOrdnanceWithRandomTactical( player, tactical )
    }
}
void function OnPlayerChangeLoadout(entity player, PilotLoadoutDef loadout){
    if(player.GetOffhandWeapons().len() != 0){
    Respawn(player)}
}

void function ReplaceOrdnanceWithRandomTactical( entity player, string ownedTactical )
{
    string ordnance = player.GetOffhandWeapons()[OFFHAND_RIGHT].GetWeaponClassName()
    player.TakeWeaponNow( ordnance )
    array<string> validTacticalss = pilotAbility
    validTacticalss.removebyvalue( ownedTactical ) // avoid same offhand crash
    string replacement = validTacticalss[RandomInt(validTacticalss.len())]
    player.GiveOffhandWeapon( replacement, OFFHAND_RIGHT )
    NotifyOffhandChange( player, ordnance, replacement )      
}
#endif
