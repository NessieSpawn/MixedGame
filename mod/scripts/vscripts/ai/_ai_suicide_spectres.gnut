untyped // for us using signal's table

global function SuicideSpectres_Init
global function MakeSuicideSpectre
// modified utility for us removing tick's ability
global function RemoveSuicideSpectre
//
global function SpectreSuicideOnDamaged
global function GetNPCAttackerEnt

// fake suicide spectre utility
global function IsFakeSuicideSpectre_ByScriptName
global const string FAKE_SPECTRE_SCRIPTNAME 	= "fakeSuicideSpectre" // for confirming it's a faken suicide spectre( not tick )


// modified settings
// settings per entity
global function SuicideSpectre_SetNotExploding // for making pet ticks

global function SuicideSpectre_SetSuicideChaseBehavior // script settings for "SuicideChaseTime" ai settings, also allows change movement speed when overload chasing
global function SuicideSpectre_SetJumpAtTitans // script settings for "JumpAtTitans" ai settings
global function SuicideSpectre_SetCreateHeavyArmorDangerousArea // make titans try to dodge when a tick is about to explode
global function SuicideSpectre_SetCanExplodeInMidAir // make SP specific behavior a setting!
global function SuicideSpectre_SetOverloadDelayAdjustment // adjust overload delay based on sequence duration. by default normal frag drone has 0.25s delay compare to sentry frag drone

// game settings
global function SuicideSpectre_SetUseGlobalChainExplosionTimer // sets whether ticks should use a global timer for their detonation. enabled by default as vanilla behavior

const FX_SPECTRE_EXPLOSION				= $"P_drone_frag_exp"

//
// Suicide spectre script
//

const SPECTRE_EXPLOSION_DELAY 					= 0.25   // Delay for the first spectre in a chain to start exploding.
const SPECTRE_DAMAGE_MULTIPLIER_BODY 			= 1.5
const SPECTRE_DAMAGE_MULTIPLIER_HEAD 			= 6.0
const SPECTRE_DAMAGE_MULTIPLIER_SMART_PISTOL	= 2.0
const SPECTRE_HEADSHOT_KEEP_WALKING_CHANCE		= 100 	 // 35% chance to keep walking after a headshot to add variety

struct
{
	int chainExplosionIndex
	float lastChainExplosionTime

	table< string, array<string> > spectreAnims
	float nextOverloadTime
	
	// modified settings
	array<entity> noExplosionSpectres // for making pet ticks
	table<entity, float> spectreSuicideChaseTime
	table<entity, float> spectreSuicideChaseSpeedScale
	table<entity, bool> spectreShouldJumpAtTitans
	table<entity, bool> spectreShouldCreateHeavyArmorDangerousArea
	table<entity, bool> spectreCanExplodeInMidAir
	table<entity, float> spectreOverloadDelayAdjustment

	// vanilla behavior turns to settings: npc/npc owned ticks never follow chain explosion time
	bool spectreUseGlobalChainExplosionTime = true
	table<entity, int> playerSpectreChainExplosionIndex
	table<entity, float> playerSpectreLastChainExplosionTime
	table<string, int> npcSpectreSquadChainExplosionIndex
	table<string, float> npcSpectreSquadLastChainExplosionTime
} file

const SFX_TICK_OVERLOAD 				= "corporate_spectre_overload_beep"
const SFX_TICK_EXPLODE 					= "corporate_spectre_death_explode"

const SFX_FRAGDRONE_OVERLOAD 			= "weapon_sentryfragdrone_preexplo"
const SFX_FRAGDRONE_EXPLODE 			= "weapon_sentryfragdrone_explo"
const SFX_FRAGDRONE_SUPERPURSUIT		= "weapon_sentryfragdrone_superpursuit"

const CHAIN_EXPLOSION_MAXINDEX			= 10


void function SuicideSpectres_Init()
{
	RegisterSignal( "SuicideSpectreForceExplode" )
	RegisterSignal( "SuicideSpectreExploding" )
	RegisterSignal( "SuicideGotEnemy" )
	RegisterSignal( "SuicideLostEnemy" )
	// modified signals for handling jumpAtTitan case
	RegisterSignal( "SuicideSpectreExploded" ) // this means tick is detonated by damage
	RegisterSignal( "SuicideSpectreNearEnemy" ) // this means tick is detonated by other script's signal
	// modified signal for removing a tick's ability
	RegisterSignal( "SpectreStopWaitToExplode" )

	PrecacheParticleSystem( FX_SPECTRE_EXPLOSION )

	file.spectreAnims[ "spectreSearch" ] <- []
	file.spectreAnims[ "spectreSearch" ].append( "sp_suicide_spectre_search" )
	file.spectreAnims[ "spectreSearch" ].append( "sp_suicide_spectre_search_B" )
	file.spectreAnims[ "spectreSearch" ].append( "sp_suicide_spectre_search_C" )

	AddDamageCallback( "npc_frag_drone", SpectreSuicideOnDamaged_Callback )
	AddDeathCallback( "npc_frag_drone", FragDroneDeath )
}

/************************************************************************************************\

 ######  ######## ######## ##     ## ########
##    ## ##          ##    ##     ## ##     ##
##       ##          ##    ##     ## ##     ##
 ######  ######      ##    ##     ## ########
      ## ##          ##    ##     ## ##
##    ## ##          ##    ##     ## ##
 ######  ########    ##     #######  ##

\************************************************************************************************/
void function MakeSuicideSpectre( entity spectre )
{
	spectre.SetAimAssistAllowed( true )
	spectre.SetAllowMelee( false )
	DisableLeeching( spectre )

	spectre.SetNPCMoveSpeedScale( 1.0 )

	spectre.EnableNPCMoveFlag( NPCMF_IGNORE_CLUSTER_DANGER_TIME | NPCMF_PREFER_SPRINT )
	spectre.DisableNPCMoveFlag( NPCMF_FOLLOW_SAFE_PATHS | NPCMF_INDOOR_ACTIVITY_OVERRIDE )

	spectre.kv.allowShoot = 0

	// Frag drones do suicide spectre behavior but we don't want them doing the enemy changed sounds so filter them out
	if ( !IsFragDrone( spectre ) && !IsTick( spectre ) )
		spectre.SetEnemyChangeCallback( SuicideSpectreEnemyChanged )

	spectre.SetLookDistOverride( SPECTRE_MAX_SIGHT_DIST )
	//spectre.SetHearingSensitivity( 10 ) //1 is default
	spectre.EnableNPCFlag( NPC_MUTE_TEAMMATE )

	spectre.ai.suicideSpectreExplosionDelay = -1

	thread SpectreWaitToExplode( spectre )
	AddAnimEvent( spectre, "frag_drone_armed", FragDroneArmed )

	// modified settings INIT
	// never INIT now, we'd better only do setups
	/*
	file.spectreShouldJumpAtTitans[ spectre ] <- false
	file.spectreShouldCreateHeavyArmorDangerousArea[ spectre ] <- false
	file.spectreCanExplodeInMidAir[ spectre ] <- IsSingleplayer() // default is we enable this behavior in SP
	*/
}

// modified utility for us removing a tick's ability
void function RemoveSuicideSpectre( entity spectre )
{
	// other misc stuffs maybe no need to remove...? kinda difficult to recover everything

	// modified signal to stop SpectreWaitToExplode() think
	spectre.Signal( "SpectreStopWaitToExplode" )
	// remove anim event
	if ( HasAnimEvent( spectre, "frag_drone_armed" ) )
		DeleteAnimEvent( spectre, "frag_drone_armed" )
}
//

void function FragDroneArmed( entity npc )
{
	npc.ai.fragDroneArmed = true
}

void function FragDroneDeath( entity spectre, var damageInfo )
{
	// modified!!! for check fake suicide spectres
	if ( IsFakeSuicideSpectre_ByScriptName( spectre ) )
		return // don't do anything

	FragDroneDeath_Think( spectre, damageInfo )
}

// for reloadscripts
void function FragDroneDeath_Think( entity spectre, var damageInfo )
{
	vector pos = spectre.GetOrigin()
	int tagID = spectre.LookupAttachment( "CHESTFOCUS" )
	vector fxOrg = spectre.GetAttachmentOrigin( tagID )
	string expSFX
	if ( spectre.mySpawnOptions_aiSettings == "npc_frag_drone_throwable" )
		expSFX = SFX_FRAGDRONE_EXPLODE
	else
		expSFX = SFX_TICK_EXPLODE
	int expFX = GetParticleSystemIndex( FX_SPECTRE_EXPLOSION )

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	entity attackerEnt = GetNPCAttackerEnt( spectre, attacker )

	int team = GetExplosionTeamBasedOnGamemode( spectre )

	int damageDef = GetDamageDefForFragDrone( spectre )
	
	// modified!!! for making pet ticks
	bool shouldDoExplosion = true
	if( file.noExplosionSpectres.contains( spectre ) )
		shouldDoExplosion = false
	
	if ( shouldDoExplosion )
	{
		RadiusDamage_DamageDefSimple( damageDef, pos, attackerEnt, spectre, 0 )
		EmitSoundAtPosition( spectre.GetTeam(), pos, expSFX )
		CreateShake( pos, 10, 105, 1.25, 768 )
		StartParticleEffectInWorld( expFX, fxOrg, Vector( 0, 0, 0 ) )
	}
	else // fake explosion that does no damage
	{
		StartParticleEffectInWorld( GetParticleSystemIndex( $"impact_air_40mm" ), fxOrg, Vector( 0, 0, 0 ) )
		EmitSoundAtPosition( spectre.GetTeam(), pos, "Explo_40mm_Impact_3P" )
	}

	spectre.Gib( <0, 0, 100> ) //Used to do .Destroy() on the frag drones immediately, but this meant you can't display the obiturary correctly. Instead, since it's dead already just hide it
}

entity function GetNPCAttackerEnt( entity npc, entity attacker )
{
	entity owner = npc.GetBossPlayer()
	bool ownerIsPlayer = owner != null && owner.IsPlayer()

	if ( IsMultiplayer() )
		return ownerIsPlayer ? owner : npc

	if ( !IsAlive( attacker ) )
		return npc

	// dont give player credit, since that does some bad things
	if ( ownerIsPlayer )
		return owner

	if ( attacker.IsPlayer() )
		return GetEnt( "worldspawn" )

	return attacker
}


int function GetDamageDefForFragDrone( entity drone )
{
	var damageDef = drone.Dev_GetAISettingByKeyField( "damageDefOverride" )
	if ( damageDef != null )
	{
		expect string( damageDef )
		return eDamageSourceId[ damageDef ]
	}

	entity owner = drone.GetBossPlayer()
	if ( owner != null && owner.IsPlayer() )
		return damagedef_frag_drone_throwable_PLAYER

	return damagedef_frag_drone_throwable_NPC
}

void function SuicideSpectreEnemyChanged( entity spectre )
{
	// Spectre "Speaks"
	if ( ( RandomFloat( 1.0 ) ) < 0.02 )
		EmitSoundOnEntity( spectre, "diag_imc_spectre_gs_spotenemypilot_01_1" )
}

/************************************************************************************************\

########  ########   #######  ##     ## #### ##     ## #### ######## ##    ##
##     ## ##     ## ##     ##  ##   ##   ##  ###   ###  ##     ##     ##  ##
##     ## ##     ## ##     ##   ## ##    ##  #### ####  ##     ##      ####
########  ########  ##     ##    ###     ##  ## ### ##  ##     ##       ##
##        ##   ##   ##     ##   ## ##    ##  ##     ##  ##     ##       ##
##        ##    ##  ##     ##  ##   ##   ##  ##     ##  ##     ##       ##
##        ##     ##  #######  ##     ## #### ##     ## ####    ##       ##

\************************************************************************************************/
void function SpectreWaitToExplode( entity spectre )
{
	Assert( spectre.IsNPC() )
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "OnDestroy" ) // should be vanilla missing!

	// modified signal for removing a tick's ability
	spectre.EndSignal( "SpectreStopWaitToExplode" )

	// now we change to handle like this: use WaitSignal() so we can get what makes tick explode
	//waitthread SuicideSpectre_WaittillNearEnemyOrExploding( spectre )
	thread SuicideSpectre_WaittillNearEnemyOrExploding( spectre )
	table signalTable = WaitSignal( spectre, "SuicideSpectreForceExplode", "SuicideSpectreExploding", "SuicideSpectreExploded", "SuicideSpectreNearEnemy" )
	string receivedSignal = expect string( signalTable.signal )

	// modified!!! for check fake suicide spectres
	if ( IsFakeSuicideSpectre_ByScriptName( spectre ) )
		return // don't do anything

	if ( spectre.ai.suicideSpectreExplodingAttacker == null )
	{
		// not exploding, so overload
		spectre.ai.suicideSpectreExplosionDelay = GetSpectreExplosionTime( spectre )
		// adding new parameter: skipSuicideChase and skipJumpAtTitans for us handling damage ignition/scripted force explode cases
		//waitthread SpectreOverloads( spectre )
		
		// modified case starts here
		// if this spectre is overloaded by scripted signal, we never do their suicide chase
		// if this spectre is overloaded by damage or scripted signal, we never do jump animation
		bool skipSuicideChase = receivedSignal == "SuicideSpectreForceExplode"
		bool skipJumpAtTitans = receivedSignal == "SuicideSpectreForceExplode" || receivedSignal == "SuicideSpectreExploding" 
		waitthread SpectreOverloads( spectre, skipSuicideChase, skipJumpAtTitans )
	}

	if ( spectre.ai.suicideSpectreExplosionDelay > 0 )
		wait spectre.ai.suicideSpectreExplosionDelay

	entity attacker = spectre.ai.suicideSpectreExplodingAttacker
	if ( !IsValid( attacker ) )
	{
		entity lastAttacker = GetLastAttacker( spectre )
		if ( IsValid( lastAttacker ) )
		{
			attacker = lastAttacker
		}
		else
		{
			attacker = spectre
		}
	}

	vector force = GetDeathForce()

	Assert( !attacker.IsProjectile(), "Suicide Spectre attacker was a projectile! Type: " + attacker.ProjectileGetWeaponClassName() )

	// JFS: sometimes the attacker is a projectile, which can cause a script error.
	// The real solution is to figure out which weapon is passing in the projectile as the attacker and correct that.
	// nessie note: no weapon actually uses projectile as attacker
	// the real cause is that a npc without owner player getting destroyed will make their projectile use themselves as attacker
	if ( attacker.IsProjectile() )
	{
		attacker = spectre
	}

	spectre.Die( attacker, attacker, { force = force, scriptType = DF_DOOMED_HEALTH_LOSS, damageSourceId = eDamageSourceId.suicideSpectreAoE } )
}

void function SetSuicideSpectreExploding( entity spectre, entity attacker, float explodingTime )
{
	Assert( spectre.ai.suicideSpectreExplodingAttacker == null )
	spectre.ai.suicideSpectreExplodingAttacker = attacker
	spectre.ai.suicideSpectreExplosionDelay = explodingTime

	spectre.Signal( "SuicideSpectreExploding" )
}

float function GetSpectreExplosionTime( entity spectre )
{
	// guess following behavior only exists in SP... because MP ticks won't damage each other
	// now make it a setting
	if ( file.spectreUseGlobalChainExplosionTime )
	{
		if ( Time() - file.lastChainExplosionTime > 1.0 )
			file.chainExplosionIndex = 0

		float waitTime = file.chainExplosionIndex * 0.14 // RandomFloatRange( CHAIN_EXPLOSION_INTERVALMIN, CHAIN_EXPLOSION_INTERVALMAX )
		file.lastChainExplosionTime = Time()
		file.chainExplosionIndex++
		return waitTime
	}
	else
	{
		// MP behavior should be players specific? only affects player's tick chain reaction. that's the only case ticks can damage each other
		float waitTime = 0 // explode instantly after animation done
		entity player = spectre.GetBossPlayer()
		if ( IsValid( player ) )
		{
			if ( !( player in file.playerSpectreChainExplosionIndex ) )
				file.playerSpectreChainExplosionIndex[ player ] <- 0
			if ( !( player in file.playerSpectreLastChainExplosionTime ) )
				file.playerSpectreLastChainExplosionTime[ player ] <- 0

			if ( Time() - file.playerSpectreLastChainExplosionTime[ player ] > 1.0 )
				file.playerSpectreChainExplosionIndex[ player ] = 0
			
			waitTime = file.playerSpectreChainExplosionIndex[ player ] * 0.14
			file.playerSpectreLastChainExplosionTime[ player ] = Time()
			file.playerSpectreChainExplosionIndex[ player ]++
		}
		else // pure npc tick... try to figure out wait time using npc squad
		{
			string squadName = expect string( spectre.kv.squadname )
			if ( squadName != "" )
			{
				if ( !( squadName in file.npcSpectreSquadChainExplosionIndex ) )
					file.npcSpectreSquadChainExplosionIndex[ squadName ] <- 0
				if ( !( squadName in file.npcSpectreSquadLastChainExplosionTime ) )
					file.npcSpectreSquadLastChainExplosionTime[ squadName ] <- 0

				if ( Time() - file.npcSpectreSquadLastChainExplosionTime[ squadName ] > 1.0 )
					file.npcSpectreSquadChainExplosionIndex[ squadName ] = 0
				
				waitTime = file.npcSpectreSquadChainExplosionIndex[ squadName ] * 0.14
				file.npcSpectreSquadLastChainExplosionTime[ squadName ] = Time()
				file.npcSpectreSquadChainExplosionIndex[ squadName ]++
			}
		}
		return waitTime
	}

	unreachable
}

void function SuicideSpectre_WaittillNearEnemyOrExploding( entity spectre )
{
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "SuicideSpectreExploding" )
	spectre.EndSignal( "SuicideSpectreForceExplode" )

	bool pursuitSoundPlaying = false

	float minScale = expect float( spectre.Dev_GetAISettingByKeyField( "minSpeedScale" ) )
	float maxScale = expect float( spectre.Dev_GetAISettingByKeyField( "maxSpeedScale" ) )

	while ( true )
	{
		// modified!!! for check fake suicide spectres
		if ( IsFakeSuicideSpectre_ByScriptName( spectre ) )
			return // don't do anything

		wait 0.1

		if ( !spectre.ai.fragDroneArmed )
			continue

		if ( spectre.ai.suicideSpectreExplodingAttacker != null )
		{
			// modified here: we put signals for us better handle overload animation
			spectre.Signal( "SuicideSpectreExploded" )
			return
		}

		//If spectre is not interrruptable, don't bother
		if ( !spectre.IsInterruptable() )
			continue

		//If spectre is parented, don't bother
		if ( IsValid( spectre.GetParent() ) )
			continue

		// speed up when near enemy
		entity enemy = spectre.GetEnemy()
		if ( IsAlive( enemy ) )
		{
			float dist = Distance( enemy.GetOrigin(), spectre.GetOrigin() )
			float maxDist = 850
			if ( spectre.mySpawnOptions_aiSettings == "npc_frag_drone_throwable" )
			{
				if ( dist < maxDist )
				{
					if ( pursuitSoundPlaying == false )
					{
						EmitSoundOnEntity( spectre, SFX_FRAGDRONE_SUPERPURSUIT )
						pursuitSoundPlaying = true
					}
				}
				else
				{
					if ( pursuitSoundPlaying == true )
					{
						StopSoundOnEntity( spectre, SFX_FRAGDRONE_SUPERPURSUIT )
						pursuitSoundPlaying = false
					}
				}
			}
			float speed = GraphCapped( dist, 200, 850, maxScale, minScale )
			spectre.SetNPCMoveSpeedScale( speed )
		}

		// offset the overload time
		if ( Time() < file.nextOverloadTime )
			continue

		entity attacker = SuicideSpectre_NearEnemy( spectre )
		if ( attacker != null )
		{
			//SetSuicideSpectreOverloading( spectre, attacker )
			//Assert( 0 ) // never reached

			// modified here: we put signals for us better handle overload animation
			spectre.Signal( "SuicideSpectreNearEnemy" )
			return
		}
	}
}

entity function SuicideSpectre_NearEnemy( entity spectre )
{
	// See if any player is close eneough to trigger self-destruct
	array<entity> enemies
	entity closestEnemy = spectre.GetClosestEnemy()
	if ( closestEnemy )
		enemies.append( closestEnemy )

	entity currentEnemy = spectre.GetEnemy()
	if ( currentEnemy && currentEnemy != closestEnemy )
		enemies.append( currentEnemy )

	vector origin = spectre.GetOrigin()
	float dist = expect float( spectre.Dev_GetAISettingByKeyField( "suicideExplosionDistance" ) )
	foreach ( enemy in enemies )
	{
		if ( !IsAlive( enemy ) )
			continue
		if ( enemy.IsCloaked( true ) )
			continue
		if ( enemy.GetNoTarget() )
			continue
		if ( enemy.IsPlayer() && enemy.IsPhaseShifted() )
			continue

		vector enemyOrigin = enemy.GetOrigin()

		if ( Distance( origin, enemyOrigin ) > dist )
			continue

		float heightDiff = enemyOrigin.z - origin.z

		// dont explode because you jump over me or I am on the floor above you
		if ( fabs( heightDiff ) > 40 )
		{
			// unless enemy is standing on something slightly above you and there is a clear trace
			float curTime = Time()
			float timeDiff = curTime - spectre.ai.suicideSpectreExplosionTraceTime
			const float TRACE_INTERVAL = 2

			if ( heightDiff > 0 && timeDiff > TRACE_INTERVAL && enemy.IsOnGround() && spectre.CanSee( enemy ) )
			{
				spectre.ai.suicideSpectreExplosionTraceTime = curTime
				float frac = TraceHullSimple( origin, < origin.x, origin.y, enemyOrigin.z >, spectre.GetBoundingMins(), spectre.GetBoundingMaxs(), spectre )
				if ( frac == 1.0 )
					return enemy
			}
			continue
		}

		return enemy
	}

	return null
}

// adding new parameter: skipSuicideChase and skipJumpAtTitans for us handling damage ignition/scripted force explode cases
//void function SpectreOverloads( entity spectre )
void function SpectreOverloads( entity spectre, bool skipSuicideChase = false, bool skipJumpAtTitans = false )
{
	spectre.EndSignal( "SuicideSpectreExploding" )
	file.nextOverloadTime = Time() + 0.05

	#if MP
	var chaseTime = spectre.Dev_GetAISettingByKeyField( "SuicideChaseTime" )
	// here's modified script settings handle!
	if ( SuicideSpectre_GetSuicideChaseTime( spectre ) != null )
		chaseTime = SuicideSpectre_GetSuicideChaseTime( spectre )
	// modified here: we allow script to skip suicide chase think
	//if ( chaseTime != null )
	if ( chaseTime != null && !skipSuicideChase )
	{
		float maxScale = expect float( spectre.Dev_GetAISettingByKeyField( "maxSpeedScale" ) )
		// here's modified script settings handle!
		if ( SuicideSpectre_GetSuicideChaseSpeedScale( spectre ) != null )
			maxScale = expect float( SuicideSpectre_GetSuicideChaseSpeedScale( spectre ) )
		
		spectre.SetNPCMoveSpeedScale( maxScale )

		expect float( chaseTime )
		float endChaseTime = Time() + chaseTime

		for ( ;; )
		{
			if ( Time() >= endChaseTime )
				break

			if ( !IsAlive( spectre.GetEnemy() ) )
				break

			entity nearEnemy = SuicideSpectre_NearEnemy( spectre )
			if ( IsAlive( nearEnemy ) )
			{
				if ( nearEnemy.IsTitan() && spectre.IsInterruptable() )
				{
					JumpAtTitan( spectre, nearEnemy )
					spectre.ai.suicideSpectreExplosionDelay = 0.0
					return
				}
				break
			}

			WaitFrame()
		}
	}
	#endif

	for ( ;; )
	{
		// make this SP specific behavior a setting!
		/*
		#if SP
		if ( spectre.IsInterruptable() && !spectre.Anim_IsActive() )
			break
		#elseif MP
		if ( spectre.IsInterruptable() && !spectre.Anim_IsActive() && spectre.IsOnGround() )
			break
		#endif
		*/
		bool passOnGroundCheck = spectre.IsOnGround()
		if ( SuicideSpectre_CanExplodeInMidAir( spectre ) )
			passOnGroundCheck = true // if we allow this spectre to explode in mid-air, always pass ground check
		if ( spectre.IsInterruptable() && !spectre.Anim_IsActive() && passOnGroundCheck )
			break

		WaitFrame()
	}

	string overloadSF
	bool isFragDrone = 	spectre.mySpawnOptions_aiSettings == "npc_frag_drone_throwable"
	if ( isFragDrone )
		overloadSF = SFX_FRAGDRONE_OVERLOAD
	else
		overloadSF = SFX_TICK_OVERLOAD
	// Overload Sound
	EmitSoundOnEntity( spectre, overloadSF )

	// modified to add settings, allow npc titans aware their explosions
	//AI_CreateDangerousArea_DamageDef( damagedef_frag_drone_explode, spectre, TEAM_INVALID, true, false )
	AI_CreateDangerousArea_DamageDef( damagedef_frag_drone_explode, spectre, TEAM_INVALID, true, SuicideSpectre_ShouldCreateHeavyArmorDangerousArea( spectre ) )

	// Cleanup on thread end
	OnThreadEnd(
		function() : ( spectre, overloadSF )
		{
			if ( IsValid( spectre ) )
			{
				StopSoundOnEntity( spectre, overloadSF )
			}
		}
	)

	bool jumpAtTitans = spectre.Dev_GetAISettingByKeyField( "JumpAtTitans" ) == null || spectre.Dev_GetAISettingByKeyField( "JumpAtTitans" ) == 1
	// modified script settings handle. does not overwrite ai settings file!
	// guess I messed up this thing here... this kind of "JumpAtTitans" only works when a tick is traversing
	// we need script settings able to overwrite AISettings
	//if ( file.spectreShouldJumpAtTitans[ spectre ] )
	//	jumpAtTitans = true
	if ( SuicideSpectre_ShouldJumpAtTitans( spectre ) != null )
		jumpAtTitans = expect bool( SuicideSpectre_ShouldJumpAtTitans( spectre ) )

	entity enemy = spectre.GetEnemy()
	// wait, why is there a "!" for spectre.IsInterruptable() check???
	// guess I messed up this thing here... this kind of "JumpAtTitans" only works when a tick is traversing
	// FD tick's behavior is done using SuicideChaseTime settings
	// it's still good to leave skipJumpAtTitans checks here
	//if ( enemy && enemy.IsTitan() && jumpAtTitans && !spectre.IsInterruptable() )
	//if ( enemy && enemy.IsTitan() && jumpAtTitans && !skipJumpAtTitans && spectre.IsInterruptable() )
	if ( enemy && enemy.IsTitan() && jumpAtTitans && !skipJumpAtTitans && !spectre.IsInterruptable() )
	{
		//print( "we're jumping at titans!" )
		JumpAtTitan( spectre, enemy )
	}
	else
	{
		string anim = "sp_suicide_spectre_explode_stand"
		var overrideAnim = spectre.Dev_GetAISettingByKeyField( "OverrideOverloadAnim" )

		if ( overrideAnim != null )
		{
			anim = expect string( overrideAnim )
		}

		// change to use wrapped function so we can adjust their overload delay
		/*
		waitthread PlayAnim( spectre, anim )

		if ( !isFragDrone )
			wait 0.25
		*/
		
		// do blocking call because there's already waitthread inside this function
		SpectreOverloadAnimationWithTimer( spectre, anim )
	}
}

// function for handling animation with timer adjustments
void function SpectreOverloadAnimationWithTimer( entity spectre, string anim )
{
	float sequenceDuration = spectre.GetSequenceDuration( anim )
	float overloadDelayAdjustment = SuicideSpectre_GetOverloadDelayAdjustment( spectre )
	float expectedTimer = sequenceDuration + overloadDelayAdjustment

	// if we got longer timer, do delay after animation done
	if ( expectedTimer > sequenceDuration )
	{
		waitthread PlayAnim( spectre, anim )
		wait overloadDelayAdjustment
	}
	else if ( expectedTimer < sequenceDuration ) // if we got shorter timer, add timeout for animation
	{
		thread PlayAnim( spectre, anim )
		waitthread WaitTillSpectreFinishAnimationOrTimeout( spectre, expectedTimer )
	}
	else // no timer adjustments
		waitthread PlayAnim( spectre, anim )
}

void function WaitTillSpectreFinishAnimationOrTimeout( entity spectre, float timeout )
{
	// same signals as WaittillAnimDone() does
	spectre.EndSignal( "OnAnimationInterrupted" )
	spectre.EndSignal( "OnAnimationDone" )

	wait timeout
}

void function JumpAtTitan( entity spectre, entity enemy )
{
	vector myOrigin = spectre.GetOrigin()
	vector dirToEnemy = enemy.EyePosition() - myOrigin

	float dist = Length( dirToEnemy )
	if ( dist > 0 )
	{
		const float MAX_DIST = 100
		dirToEnemy *= min( MAX_DIST, dist ) / dist
	}

	vector refOrigin = myOrigin + Vector( dirToEnemy.x, dirToEnemy.y, 256 )
	vector refAngles = spectre.GetAngles() + Vector( 0, 180, 0 )
	spectre.Anim_ScriptedPlayWithRefPoint( "sd_jump_explode", refOrigin, refAngles, 0.3 )
	WaittillAnimDone( spectre )
	return
}

int function GetExplosionTeamBasedOnGamemode( entity spectre )
{
	return spectre.GetTeam()
}


/************************************************************************************************\

########     ###    ##     ##    ###     ######   ########
##     ##   ## ##   ###   ###   ## ##   ##    ##  ##
##     ##  ##   ##  #### ####  ##   ##  ##        ##
##     ## ##     ## ## ### ## ##     ## ##   #### ######
##     ## ######### ##     ## ######### ##    ##  ##
##     ## ##     ## ##     ## ##     ## ##    ##  ##
########  ##     ## ##     ## ##     ##  ######   ########

\************************************************************************************************/
void function SpectreSuicideOnDamaged_Callback( entity spectre, var damageInfo )
{
	// modified!!! for check fake suicide spectres
	if ( IsFakeSuicideSpectre_ByScriptName( spectre ) )
		return // don't do anything

	SpectreSuicideOnDamaged( spectre, damageInfo )
}


void function SpectreSuicideOnDamaged( entity spectre, var damageInfo )
{
	//Assert( IsSuicideSpectre( spectre ) )

	int damageType = DamageInfo_GetCustomDamageType( damageInfo )
	DamageInfo_SetCustomDamageType( damageInfo, damageType )

	if ( !IsAlive( spectre ) )
		return


	entity attacker 			= DamageInfo_GetAttacker( damageInfo )
	entity inflictor 			= DamageInfo_GetInflictor( damageInfo )
	float damage				= DamageInfo_GetDamage( damageInfo )
	int damageSourceId 			= DamageInfo_GetDamageSourceIdentifier( damageInfo )

	// Calculate build time credit
	if ( attacker.IsPlayer() )
	{
		if ( GameModeRulesShouldGiveTimerCredit( attacker, spectre, damageInfo ) && !TitanDamageRewardsTitanCoreTime() )
		{
			float timerCredit = CalculateBuildTimeCredit( attacker, spectre, damage, spectre.GetHealth(), spectre.GetMaxHealth(), "spectre_kill_credit", 9 )
			if ( timerCredit )
				DecrementBuildTimer( attacker, timerCredit )
		}
	}

	// No pain anims for suicide spectres
	DamageInfo_AddDamageFlags( damageInfo, DAMAGEFLAG_NOPAIN )

	// modified here: we've added shield health for npcs
	// now we do nothing if shield can blank out the damage
	// no further checks, maybe not accurate but whatever
	if ( GetShieldHealthWithFix( spectre ) - int( damage ) >= 0 )
		return
	//

	spectre.Signal( "SuicideSpectreExploding" )

	if ( !IsValid( inflictor ) || !inflictor.IsPlayer() )
	{
		if ( spectre.ai.suicideSpectreExplodingAttacker == null )
		{
			if ( spectre.GetHealth() - damage <= 0 || ( IsValid( inflictor ) && IsTick( inflictor ) ) )
			{
				float explosionTime = GetSpectreExplosionTime( spectre )
				SetSuicideSpectreExploding( spectre, attacker, explosionTime )
				DamageInfo_SetDamage( damageInfo, 0 )
				return
			}
		}
		else
		{
			// already exploding
			DamageInfo_SetDamage( damageInfo, 0 )
			return
		}

		DamageInfo_SetDamage( damageInfo, damage )
	}
}



///// Modified Functions /////

void function SuicideSpectre_SetNotExploding( entity spectre )
{
	if( !( file.noExplosionSpectres.contains( spectre ) ) )
		file.noExplosionSpectres.append( spectre )
}

bool function IsFakeSuicideSpectre_ByScriptName( entity spectre )
{
	if ( !IsValid( spectre ) )
		return false

	if ( spectre.GetScriptName() == FAKE_SPECTRE_SCRIPTNAME )
		return true

	return false
}

void function SuicideSpectre_SetSuicideChaseBehavior( entity spectre, float suicideChaseTime, float suicideChaseSpeedScale = -1 )
{
	if ( !( spectre in file.spectreSuicideChaseTime ) )
		file.spectreSuicideChaseTime[ spectre ] <- 0
	file.spectreSuicideChaseTime[ spectre ] = suicideChaseTime
	
	if ( suicideChaseSpeedScale > 0 )
	{
		if ( !( spectre in file.spectreSuicideChaseSpeedScale ) )
			file.spectreSuicideChaseSpeedScale[ spectre ] <- 0
		file.spectreSuicideChaseSpeedScale[ spectre ] = suicideChaseSpeedScale
	}
}

float ornull function SuicideSpectre_GetSuicideChaseTime( entity spectre )
{
	if ( !( spectre in file.spectreSuicideChaseTime ) )
		return null // default return value
	
	return file.spectreSuicideChaseTime[ spectre ]
}

float ornull function SuicideSpectre_GetSuicideChaseSpeedScale( entity spectre )
{
	if ( !( spectre in file.spectreSuicideChaseSpeedScale ) )
		return null // default return value
	
	return file.spectreSuicideChaseSpeedScale[ spectre ]
}

void function SuicideSpectre_SetJumpAtTitans( entity spectre, bool jumpAtTitans )
{
	if ( !( spectre in file.spectreShouldJumpAtTitans ) )
		file.spectreShouldJumpAtTitans[ spectre ] <- false // init

	file.spectreShouldJumpAtTitans[ spectre ] = jumpAtTitans
}

bool ornull function SuicideSpectre_ShouldJumpAtTitans( entity spectre )
{
	if ( !( spectre in file.spectreShouldJumpAtTitans ) )
		return null // default return value

	return file.spectreShouldJumpAtTitans[ spectre ]
}

void function SuicideSpectre_SetCreateHeavyArmorDangerousArea( entity spectre, bool createDangerousArea )
{
	if ( !( spectre in file.spectreShouldCreateHeavyArmorDangerousArea ) )
		file.spectreShouldCreateHeavyArmorDangerousArea[ spectre ] <- false // init

	file.spectreShouldCreateHeavyArmorDangerousArea[ spectre ] = createDangerousArea
}

bool function SuicideSpectre_ShouldCreateHeavyArmorDangerousArea( entity spectre )
{
	if ( !( spectre in file.spectreShouldCreateHeavyArmorDangerousArea ) )
		return false // default return value

	return file.spectreShouldCreateHeavyArmorDangerousArea[ spectre ]
}

void function SuicideSpectre_SetCanExplodeInMidAir( entity spectre, bool explodeMidAir )
{
	if ( !( spectre in file.spectreCanExplodeInMidAir ) )
		file.spectreCanExplodeInMidAir[ spectre ] <- false // init

	file.spectreCanExplodeInMidAir[ spectre ] = explodeMidAir
}

bool function SuicideSpectre_CanExplodeInMidAir( entity spectre )
{
	if ( !( spectre in file.spectreCanExplodeInMidAir ) )
		return IsSingleplayer() // default return value

	return file.spectreCanExplodeInMidAir[ spectre ]
}

void function SuicideSpectre_SetOverloadDelayAdjustment( entity spectre, float overloadDelayAdjustment )
{
	if ( !( spectre in file.spectreOverloadDelayAdjustment ) )
		file.spectreOverloadDelayAdjustment[ spectre ] <- overloadDelayAdjustment // init

	file.spectreOverloadDelayAdjustment[ spectre ] = overloadDelayAdjustment
}

float function SuicideSpectre_GetOverloadDelayAdjustment( entity spectre )
{
	if ( spectre in file.spectreOverloadDelayAdjustment )
		return file.spectreOverloadDelayAdjustment[ spectre ]

	// no settings override: use default think
	float overloadDelayAdjustment = 0.0
	bool isFragDrone = spectre.mySpawnOptions_aiSettings == "npc_frag_drone_throwable"
	if ( !isFragDrone ) // default adjustment: frag drone wait .25s more
		overloadDelayAdjustment = 0.25
	
	return overloadDelayAdjustment
}

void function SuicideSpectre_SetUseGlobalChainExplosionTimer( bool useGlobalTimer )
{
	file.spectreUseGlobalChainExplosionTime = useGlobalTimer
}