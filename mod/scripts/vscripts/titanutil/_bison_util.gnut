untyped // for player.GetPlayerSettingsMods()
global function BisonUtil_Init

const float BISON_DAMAGE_REDUCTION_SEVERITY = 0.1
const float BISON_SPEED_BOOST_SEVERITY = 0.0 // was 0.15, will cause bison's movement animations messed up
const float BISON_VICTIM_SLOW_DURATION = 0.0 // was 0.3, no slow effect for now
const float BISON_DASH_RECHARGE_RATE_SCALE = 3.0 // since we've removed bison's speed boost, should give them more charge
const float BISON_DASH_RECHARGE_RATE_SCALE_TURBO = 1.75 // bison with pas_mobility_dash_capacity receive less rate
const float BISON_DASH_RECHARGE_DELAY_SCALE = 0.0 // bison won't have any delay recharging another dash 

// bison titan
const float BISON_GRAPPLE_TITAN_ATTACHED_DURATION = 0.6 // grapple duration when attached a titan
const float BISON_GRAPPLE_COST_GRAPPLING_TITAN = 0.45
const float BISON_GRAPPLE_COST_GRAPPLING_PILOT = 0.25

const string BISON_PUNCH_MOD_NAME = "bison_punch"
const float TITAN_DASH_PUNCH_SPEEDSCALE_BISON = 1.25 // 1.27 when 10 fps, ~490 for ogre titans
const float TITAN_DASH_PUNCH_COOLDOWN_BISON = 2.0
const float HIT_CONFIRMATION_MULTIPLIER_AS_BISON = 0.2 // bison will have less screen shake

void function BisonUtil_Init()
{
    // adding a new damageSourceId. it's gonna transfer to client automatically
	RegisterWeaponDamageSource( "melee_titan_punch_bison", "Bison Punch" )

    AddCallback_OnPilotBecomesTitan( OnPlayerBecomeBison )
    AddSpawnCallback( "npc_titan", OnBisonSpawned )
    AddDamageCallbackSourceID( eDamageSourceId.melee_titan_punch_bison, BisonMelee_DamagedTarget )

    // bison grapple settings
	RegisterSignal( "BisonGrappled" )
    RegisterSignal( "BisonGrappleCancelled" )
    RegisterSignal( "BisonGrappleAttachedTitan" )
    AddCallback_MpAbilityGrapplePrimaryAttack( BisonOnUseGrapple )
    AddCallback_OnGrapple( OnBisonGrappleAttached )

    // melee, modified in sh_melee_titan.gnut
    TitanMelee_AddDashPunchSpeedScaleMod( BISON_PUNCH_MOD_NAME, TITAN_DASH_PUNCH_SPEEDSCALE_BISON ) // bison's dash is faster than normal ogre dash
    TitanMelee_AddDashPunchCooldownMod( BISON_PUNCH_MOD_NAME, TITAN_DASH_PUNCH_COOLDOWN_BISON ) // bison's dash has longer cooldown
    TitanMelee_AddCounterImmuneMod( BISON_PUNCH_MOD_NAME ) // bison's punch won't be countered
    TitanMelee_AddExecutionDisabledMod( BISON_PUNCH_MOD_NAME ) // execution is not allowed for bison punches
    TitanMelee_AddHitConfirmationMultiplierMod( BISON_PUNCH_MOD_NAME, HIT_CONFIRMATION_MULTIPLIER_AS_BISON ) // bison has less screen shake
    TitanMelee_AddDamageSourceIdMod( BISON_PUNCH_MOD_NAME, eDamageSourceId.melee_titan_punch_bison ) // bison unique melee damageSourceId
}

void function BisonMelee_DamagedTarget( entity victim, var damageInfo )
{
    // since we added fighter_melee, should check this...
    entity attacker = DamageInfo_GetAttacker( damageInfo )
    if ( !IsValid( attacker ) )
        return

    entity weapon = attacker.GetMeleeWeapon()
    if ( !IsValid( weapon ) )
        return
    if ( !weapon.HasMod( "bison_punch" ) )
        return

    if( !victim.IsTitan() )
        return
    entity soul = victim.GetTitanSoul()
    if( !IsValid( soul ) )
        return
    StatusEffect_AddTimed( soul, eStatusEffect.move_slow, 0.25, BISON_VICTIM_SLOW_DURATION, 0.25 )
    StatusEffect_AddTimed( soul, eStatusEffect.dodge_speed_slow, 0.25, BISON_VICTIM_SLOW_DURATION * 2, 1.0 )
    if( soul.IsDoomed() )
        DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * 1.5 )
}

void function OnPlayerBecomeBison( entity player, entity titan )
{
    thread HandlePlayerBisonAbility( player )
}

void function OnBisonSpawned( entity titan )
{
    entity soul = titan.GetTitanSoul()
    if( !IsValid( soul ) )
        return
    entity meleeWeapon = titan.GetMeleeWeapon()
    if( !IsValid( meleeWeapon ) )
        return
    if( !meleeWeapon.HasMod( "bison_punch" ) )
        return

    // bison can still execute npc titans, always use scorch prime's
    soul.soul.titanLoadout.titanExecution = "execution_scorch_prime" 
    thread HandleBisonDamageReduction( soul, meleeWeapon )
    
}

void function HandleBisonDamageReduction( entity soul, entity meleeWeapon )
{
    soul.EndSignal( "OnDestroy" )
    meleeWeapon.EndSignal( "OnDestroy" ) // bison's confirmation: melee weapon

    int damageReduction = StatusEffect_AddEndless( soul, eStatusEffect.damage_reduction, BISON_DAMAGE_REDUCTION_SEVERITY )

    OnThreadEnd(
        function(): ( soul, damageReduction )
        {
            if( IsValid( soul ) )
                StatusEffect_Stop( soul, damageReduction )
        }
    )

    WaitForever()
}

void function HandlePlayerBisonAbility( entity player )
{
    wait 0.1
    if( !IsValid( player ) )
        return
    entity soul = player.GetTitanSoul()
    if( !IsValid( soul ) )
        return
    entity meleeWeapon = player.GetMeleeWeapon()
    if( !IsValid( meleeWeapon ) )
        return
    if( !meleeWeapon.HasMod( "bison_punch" ) )
        return

    // can't handle offhand cancel
    // best method is through removing weapon's pullout time in settings file
    //thread BisonForcedOffhandCancelThink( player )

    soul.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "DisembarkingTitan" )
	player.EndSignal( "TitanEjectionStarted" )
    
    // for spawner using player.GiveExtraWeaponMod( "amped_tacticals" ), force remove it
    /* // now handle by using non-conflict weapon settings
    entity grappleWeapon
    foreach( entity offhand in player.GetOffhandWeapons() )
    {
        if( offhand.GetWeaponClassName() == "mp_ability_grapple" && offhand.HasMod( "bison_grapple" ) )
            grappleWeapon = offhand
    }
    if( IsValid( grappleWeapon ) )
    {
        array<string> mods = grappleWeapon.GetMods()
        mods.removebyvalue( "amped_tacticals" )
        mods.removebyvalue( "all_grapple" )
        print( mods )
        grappleWeapon.SetMods( mods )
    }
    */

    // speed
    int speedBoost = StatusEffect_AddEndless( player, eStatusEffect.speed_boost, BISON_SPEED_BOOST_SEVERITY )
    
    // dash power regen
    array<string> classMods = player.GetPlayerSettingsMods()
    float powerRegenScale = BISON_DASH_RECHARGE_RATE_SCALE
    if ( classMods.contains( "pas_mobility_dash_capacity" ) || classMods.contains( "turbo_titan" ) ) // has turbo engine or in turbo titan mode
        powerRegenScale = BISON_DASH_RECHARGE_RATE_SCALE_TURBO // nerfed rate
    player.SetPowerRegenRateScale( powerRegenScale )
    player.SetDodgePowerDelayScale( BISON_DASH_RECHARGE_DELAY_SCALE )

    OnThreadEnd(
        function(): ( player, soul, speedBoost )
        {
            if( IsValid( player ) )
            {
                // clean up
                StatusEffect_Stop( player, speedBoost )
                player.SetPowerRegenRateScale( 1.0 )
                player.SetDodgePowerDelayScale( 1.0 )
            }
        }
    )

    WaitForever()
}

// can't handle offhand cancel
// best method is through removing weapon's pullout time in settings file
/*
void function BisonForcedOffhandCancelThink( entity player )
{
    player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "DisembarkingTitan" )
	player.EndSignal( "TitanEjectionStarted" )

    while ( true )
    {
        WaitFrame()
        entity activeWeapon = player.GetActiveWeapon()
        entity meleeWeapon = player.GetMeleeWeapon()
        if ( !IsValid( activeWeapon ) || !IsValid( meleeWeapon ) )
            continue
        if ( activeWeapon == meleeWeapon )
            continue

        if ( activeWeapon.IsWeaponOffhand() && activeWeapon.IsChargeWeapon() && player.IsInputCommandHeld( IN_MELEE ) )
        {
            player.ClearOffhand()
            //player.SetActiveWeaponByName( meleeWeapon.GetWeaponClassName() )
        }
    }
}
*/

void function BisonOnUseGrapple( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    // for bison: not allowed to control players or npcs forever by grapple
	if( weapon.HasMod( "bison_grapple" ) )
	{
        entity player = weapon.GetWeaponOwner()
		thread BisonDelayedAutoDetach( player )
	}
}

void function BisonDelayedAutoDetach( entity player )
{
	player.Signal( "BisonGrappled" )
	player.EndSignal( "BisonGrappled" )
    player.EndSignal( "BisonGrappleCancelled" )

    // check cancelling through crouching
	AddButtonPressedPlayerInputCallback( player, IN_DUCK, PlayerPressedGrappleDetachButton )
	AddButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE, PlayerPressedGrappleDetachButton )

    OnThreadEnd
    (
        function(): ( player )
        {
            if ( IsValid( player ) )
            {
                // clean up
				RemoveButtonPressedPlayerInputCallback( player, IN_DUCK, PlayerPressedGrappleDetachButton )
				RemoveButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE, PlayerPressedGrappleDetachButton )
            }
        }
    )

	player.WaitSignal( "BisonGrappleAttachedTitan" )
    wait BISON_GRAPPLE_TITAN_ATTACHED_DURATION // limited grapple duration
	if( IsAlive( player ) )
		player.Grapple( < 0,0,0 > ) // grapple again while another one is active will cancel it
}

void function PlayerPressedGrappleDetachButton( entity player )
{
	player.Signal( "BisonGrappleCancelled" )
}

void function OnBisonGrappleAttached( entity player, entity hitEnt, vector hitpos, vector hitNormal )
{
    // anti-crash
    if ( !IsValid( hitEnt ) )
        return
    if ( !IsAlive( hitEnt ) )
        return

    entity grappleWeapon = null
	foreach( entity offhand in player.GetOffhandWeapons() )
	{
		if( offhand.GetWeaponClassName() == "mp_ability_grapple" )
			grappleWeapon = offhand
	}

    if ( !IsValid( grappleWeapon ) )
        return

    if ( !grappleWeapon.HasMod( "bison_grapple" ) )
        return

    float powerPerGrapple = grappleWeapon.GetWeaponSettingFloat( eWeaponVar.grapple_power_required )
    float ownerGrapplePower = player.GetSuitGrapplePower()
    int grappleShotsLeft = int ( ownerGrapplePower / powerPerGrapple )
    float grapplePowerCostMax
    if ( ownerGrapplePower == 100 ) // max power
        grapplePowerCostMax = powerPerGrapple // max cost
    else
        grapplePowerCostMax = ownerGrapplePower - ( grappleShotsLeft * powerPerGrapple ) // will never use next grapple's power

    // npc grapple cost
    if ( hitEnt.IsNPC() )
    {
        if ( hitEnt.IsTitan() )
        {
            float powerReduction = min ( grapplePowerCostMax, BISON_GRAPPLE_COST_GRAPPLING_TITAN )
            player.SetSuitGrapplePower( max ( 0, ownerGrapplePower - powerReduction ) )
            player.Signal( "BisonGrappleAttachedTitan" ) // tell BisonDelayedAutoDetach() we've attached a titan
        }
    }
    // player grapple costs
    if ( hitEnt.IsPlayer() )
    {
        if ( hitEnt.IsTitan() )
        {
            float powerReduction = min ( grapplePowerCostMax, BISON_GRAPPLE_COST_GRAPPLING_TITAN )
            player.SetSuitGrapplePower( max ( 0, ownerGrapplePower - powerReduction ) )
            player.Signal( "BisonGrappleAttachedTitan" ) // tell BisonDelayedAutoDetach() we've attached a titan
        }
        else
        {
            float powerReduction = min ( grapplePowerCostMax, BISON_GRAPPLE_COST_GRAPPLING_PILOT )
            player.SetSuitGrapplePower( max ( 0, ownerGrapplePower - powerReduction ) )
        }
    }
}