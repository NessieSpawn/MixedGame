// this file has been reworked and no longer uses GivePilotLoadout() / GiveTitanLoadout()
// works more like _passives.gnut now, mostly direct weapon/mod changes

untyped // for using SetPlayerSettingsWithMods()
global function Playlist_Init

void function Playlist_Init()
{
	// featured mode settings
	AddCallback_OnPlayerGetsNewPilotLoadout( FeaturedModeSettingsSetupPilotLoadouts )
	AddCallback_OnTitanGetsNewTitanLoadout( FeaturedModeSettingsSetupTitanLoadouts )

	// iron lts rules
	if ( HasIronRules() ) 
		Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )
}

bool function IsFeaturedMode( string modeName )
{
	return GetCurrentPlaylistVar( "featured_mode_" + modeName ) == "1"
}

bool function IsATWeapon( entity weapon )
{
	return GetWeaponInfoFileKeyField_Global( weapon.GetWeaponClassName(), "menu_category" ) == "at"
}

void function ReplaceMainWeapon( entity player, entity orgWeapon, string newWeaponClassName, array<string> newWeaponMods = [] )
{
	// maintain skin. only happens when weapon name is the same, otherwise we'll use default skin index
	int skinIndex = orgWeapon.GetWeaponClassName() == newWeaponClassName ? orgWeapon.GetSkin() : WEAPON_SKIN_INDEX_CAMO
	// maintain camo
	int camoIndex = orgWeapon.GetCamo()
	// maintain pro screen
	if ( orgWeapon.HasMod( "pro_screen" ) && !newWeaponMods.contains( "pro_screen" ) )
		newWeaponMods.append( "pro_screen" )

	player.TakeWeaponNow( orgWeapon.GetWeaponClassName() )

	entity newWeapon = player.GiveWeapon( newWeaponClassName, newWeaponMods )
	newWeapon.SetProScreenOwner( player )
	if ( newWeapon.HasMod( "pro_screen" ) )
		UpdateProScreen( player, newWeapon )
	newWeapon.SetSkin( skinIndex )
	newWeapon.SetCamo( camoIndex )
}

// every settings needs to be in a certain order
// e.g.: "amped_tacticals" uses AddMod(), so it goes earlier than modes that replaces offhand weapon
// "tactikill" uses AddMod(), so it goes earlier than modes that replaces main weapons
void function FeaturedModeSettingsSetupPilotLoadouts( entity player, PilotLoadoutDef loadout )
{
	// tactical ability playlist
	int tacticalUpdateTime

	// amped_tacticals isn't catch up to date
	// grapple weapon will have to use all_grapple for 3 charges
	if ( IsFeaturedMode( "amped_tacticals" ) )
	{
		entity tacticalWeapon = player.GetOffhandWeapon( OFFHAND_SPECIAL )
		if ( IsValid( tacticalWeapon ) && tacticalWeapon.GetWeaponClassName() == "mp_ability_grapple" )
			tacticalWeapon.AddMod( "all_grapple" )
		else
			tacticalWeapon.AddMod( "amped_tacticals" )
		tacticalUpdateTime++
	}
		
	if ( IsFeaturedMode( "all_grapple" ) ) 
	{
		player.TakeOffhandWeapon( OFFHAND_SPECIAL )
		player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL, ["all_grapple"] )
		tacticalUpdateTime++
	}
	
	if ( IsFeaturedMode( "all_phase" ) ) 
	{
		player.TakeOffhandWeapon( OFFHAND_SPECIAL )
		player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_SPECIAL, ["all_phase"] )
		tacticalUpdateTime++
	}

	if ( IsFeaturedMode( "all_holopilot" ) )
	{
		player.TakeOffhandWeapon( OFFHAND_SPECIAL )
		player.GiveOffhandWeapon( "mp_ability_holopilot", OFFHAND_SPECIAL )
		tacticalUpdateTime++
	}

	// if we have enabled too many tactical ability modifier, try to warn server hoster!
	if ( tacticalUpdateTime > 1 )
	{
		CodeWarning( "[PLAYLIST] Do not enable multiple tactical ability modifiers together!" )
	}
	
	// ordnance playlist
	if ( IsFeaturedMode( "all_ticks" ) ) 
	{
		player.TakeOffhandWeapon( OFFHAND_ORDNANCE )
		player.GiveOffhandWeapon( "mp_weapon_frag_drone", OFFHAND_SPECIAL, ["all_ticks"] )
	}

	// update tactical/ordnance cooldown
	SetPlayerCooldowns( player )
	
	// special weapons playlist
	if ( IsFeaturedMode( "tactikill" ) )
	{
		foreach ( entity weapon in player.GetMainWeapons() )
			weapon.AddMod( "tactical_cdr_on_kill" )
	}

	if ( IsFeaturedMode( "rocket_arena" ) )
	{	
		// this crashes sometimes for some reason
		// what reason?

		array<entity> mainWeapons = player.GetMainWeapons() // store main weapons here so we can get everything before updating
		foreach ( int slot, entity weapon in mainWeapons )
		{
			switch ( slot )
			{
				case 0: // primary weapon
					ReplaceMainWeapon( player, weapon, "mp_weapon_epg", ["rocket_arena"] )
					break

				// secondary/backup weapon
				case 1: 
				case 2:
					// this means our current slot is AT
					if ( IsATWeapon( weapon ) )
					{
						// set AT to useless archer
						ReplaceMainWeapon( player, weapon, "mp_weapon_rocket_launcher" )
					}
					else // current slot is pistol
					{
						ReplaceMainWeapon( player, weapon, "mp_weapon_autopistol", ["rocket_arena"] )
					}
					break
			}
		}

		entity meleeWeapon = player.GetOffhandWeapon( OFFHAND_MELEE )
		if ( IsValid( meleeWeapon ) )
			meleeWeapon.AddMod( "rocket_arena" )
	}
	
	// this one was never released, assuming it just gives you a mastiff and a kraber with quick swap
	if ( IsFeaturedMode( "shotguns_snipers" ) )
	{
		array<entity> mainWeapons = player.GetMainWeapons() // store main weapons here so we can get everything before updating
		foreach ( int slot, entity weapon in mainWeapons )
		{
			switch ( slot )
			{
				case 0: // primary weapon
					ReplaceMainWeapon( player, weapon, "mp_weapon_sniper", ["pas_fast_swap", "pas_fast_ads"] )
					break

				// secondary/backup weapon
				case 1: 
				case 2:
					// replace AT with mastiff
					if ( IsATWeapon( weapon ) )
					{
						ReplaceMainWeapon( player, weapon, "mp_weapon_mastiff", ["pas_fast_swap", "pas_fast_ads"] )
					}
					break
			}
		}
	}
}

void function FeaturedModeSettingsSetupTitanLoadouts( entity titan, TitanLoadoutDef loadout )
{
	entity soul = titan.GetTitanSoul()
	if ( !IsValid( soul ) ) //Ejecting
		return
	
	// npc case
	if ( titan.IsNPC() )
	{
		if ( IsFeaturedMode( "turbo_titans" ) )
		{
			// get titan's settings struct, which they maybe transferred to player
			TitanSettings titanSettings = titan.ai.titanSettings
			titanSettings.titanSetFileMods.removebyvalue( "pas_mobility_dash_capacity" ) // will crash if we have both mods
			titanSettings.titanSetFileMods.append( "turbo_titan" ) // this gets applied on player embark
		}
	}
	else if ( titan.IsPlayer() ) // player case
	{
		if ( IsFeaturedMode( "turbo_titans" ) )
		{
			int health = titan.GetHealth()
			array<string> settingMods = titan.GetPlayerSettingsMods()
			settingMods.removebyvalue( "pas_mobility_dash_capacity" ) // will crash if we have both mods
			settingMods.append( "turbo_titan" )
			titan.SetPlayerSettingsWithMods( titan.GetPlayerSettings(), settingMods )
			titan.SetHealth( health ) // update health back to normal
		}
	}
}