global function GruntChatter_MP_Init
global function PlayGruntChatterMPLine

void function GruntChatter_MP_Init()
{
	Assert( IsMultiplayer(), "MP Grunt chatter is restricted to Multiplayer only." )

	// fix for grunt squad dialogue!
	// based off spectre chatters in _ai_spectre.gnut, which is good enough for MP
	AddCallback_OnPlayerKilled( GruntChatter_OnPlayerKilled )
	AddCallback_OnNPCKilled( GruntChatter_OnNPCKilled )
}

void function PlayGruntChatterMPLine( entity grunt, string conversationType )
{
	// defensive fix
	if ( !IsValidGruntChatterSpeaker( grunt ) )
		return

	#if !GRUNT_CHATTER_MP_ENABLED
		return
	#endif
	
	foreach ( entity player in GetPlayerArray() )
		if ( ShouldPlayGruntChatterMPLine( conversationType, player, grunt ) )
			Remote_CallFunction_Replay( player, "ServerCallback_PlayGruntChatterMP", GetConversationIndex( conversationType ), grunt.GetEncodedEHandle() )
}

// nessie fix! modified checks for fun
bool function IsValidGruntChatterSpeaker( entity guy )
{
	if ( !IsAlive( guy ) )
		return false
	if ( !IsGrunt( guy ) ) 
		return false
	if ( guy.IsFrozen() ) // frozen npc never speak
		return false
	if ( guy.IsMechanical() ) // mechanical grunt never speak
		return false

	return true
}

// fix for grunt squad dialogue!
// based off spectre chatters in _ai_spectre.gnut, which is good enough for MP
void function GruntChatter_OnPlayerKilled( entity playerKilled, entity attacker, var damageInfo )
{
	if ( !IsValidGruntChatterSpeaker( attacker ) )
		return

	if ( playerKilled.IsTitan() )
		thread PlayGruntChatterAfterDelay( attacker, "bc_gruntkillstitan" )
	else if ( AiSoldiers_IsPilotEngageChatterEnabled() ) // modified function in _ai_soldiers.gnut, for custom usage such as gruntmode
		thread PlayGruntChatterAfterDelay( attacker, "bc_killenemypilot" )
}

void function GruntChatter_OnNPCKilled( entity npcKilled, entity attacker, var damageInfo )
{
	// checks reworked here
	// want to handle spectre specialist squad!
	//if ( IsGrunt( npcKilled ) )
	if ( IsGrunt( npcKilled ) || IsSpectre( npcKilled ) )
	{
		string deadGuySquadName = expect string( npcKilled.kv.squadname )
		if ( deadGuySquadName == "" )
			return

		// this can run into error for some reason... do a try-catch
		//array<entity> squad = GetNPCArrayBySquad( deadGuySquadName )
		array<entity> squad
		try
		{
			squad = GetNPCArrayBySquad( deadGuySquadName )
		}
		catch ( ex )
		{
			//print( ex )
			return // we do nothing if crash is about to happen
		}

		entity speakingSquadMate = null

		foreach( squadMate in squad )
		{
			// checks reworked here
			//if ( IsGrunt( squadMate ) )
			if ( IsValidGruntChatterSpeaker( squadMate ) )
			{
				speakingSquadMate = squadMate
				break
			}
		}
		if ( speakingSquadMate == null )
			return

		if ( squad.len() == 1 )
			thread PlayGruntChatterAfterDelay( speakingSquadMate, "bc_squaddeplete" )
		else if ( squad.len() > 0  )
			thread PlayGruntChatterAfterDelay( speakingSquadMate, "bc_allygruntdown" )
	}
	else
	{
		// checks reworked here
		//if ( IsGrunt( attacker ) )
		if ( !IsValidGruntChatterSpeaker( attacker ) )
			return

		if ( npcKilled.IsTitan() )
			thread PlayGruntChatterAfterDelay( attacker, "bc_gruntkillstitan" )
	}
}

void function PlayGruntChatterAfterDelay( entity grunt, string chatterLine, float delay = 0.3 )
{
	wait delay

	if ( !IsAlive( grunt ) ) //Really this is just an optimization thing, if the grunt is dead no point in running the same check for every player nearby in ShouldPlayGruntChatterMPLine
		return

	PlayGruntChatterMPLine( grunt, chatterLine )
}