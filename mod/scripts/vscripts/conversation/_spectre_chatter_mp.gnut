global function SpectreChatter_MP_Init
global function PlaySpectreChatterMPLine

void function SpectreChatter_MP_Init()
{
	Assert( IsMultiplayer(), "MP Spectre chatter is restricted to Multiplayer only." )

	// fix for spectre squad dialogue!
	// based off spectre chatters in _ai_spectre.gnut, which is good enough for MP
	AddCallback_OnPlayerKilled( SpectreChatter_OnPlayerKilled )
	AddCallback_OnNPCKilled( SpectreChatter_OnNPCKilled )
}

void function PlaySpectreChatterMPLine( entity spectre, string conversationType )
{
	// defensive fix!
	if ( !IsValidSpectreChatterSpeaker( spectre ) )
		return

	#if !SPECTRE_CHATTER_MP_ENABLED
		return
	#endif
	
	foreach ( entity player in GetPlayerArray() )
		if ( ShouldPlaySpectreChatterMPLine( conversationType, player, spectre ) )
			Remote_CallFunction_Replay( player, "ServerCallback_PlaySpectreChatterMP", GetConversationIndex( conversationType ), spectre.GetEncodedEHandle() )
}

// nessie fix! modified checks for fun
bool function IsValidSpectreChatterSpeaker( entity guy )
{
	if ( !IsAlive( guy ) )
		return false
	if ( !IsSpectre( guy ) ) 
		return false

	return true
}

// fix for spectre squad dialogue!
// based off spectre chatters in _ai_spectre.gnut, which is good enough for MP
void function SpectreChatter_OnPlayerKilled( entity playerKilled, entity attacker, var damageInfo )
{
	if ( !IsValidSpectreChatterSpeaker( attacker ) )
		return

	if ( playerKilled.IsTitan() )
		thread PlaySpectreChatterAfterDelay( attacker, "diag_imc_spectre_gs_gruntkillstitan_02_1" )
	else if ( AiSoldiers_IsPilotEngageChatterEnabled() ) // modified function in _ai_soldiers.gnut, for custom usage such as gruntmode
		thread PlaySpectreChatterAfterDelay( attacker, "diag_imc_spectre_gs_killenemypilot_01_1" )
}

void function SpectreChatter_OnNPCKilled( entity npcKilled, entity attacker, var damageInfo )
{
	// checks reworked here
	// want to handle spectre specialist squad!
	//if ( IsSpectre( npcKilled ) )
	if ( IsSpectre( npcKilled ) || IsGrunt( npcKilled ) )
	{
		string deadGuySquadName = expect string( npcKilled.kv.squadname )
		if ( deadGuySquadName == "" )
			return

		// this can run into error for some reason... do a try-catch
		//array<entity> squad = GetNPCArrayBySquad( deadGuySquadName )
		array<entity> squad
		try
		{
			squad = GetNPCArrayBySquad( deadGuySquadName )
		}
		catch ( ex )
		{
			//print( ex )
			return // we do nothing if crash is about to happen
		}

		entity speakingSquadMate = null

		foreach( squadMate in squad )
		{
			// checks reworked here
			//if ( IsSpectre( squadMate ) )
			if ( IsValidSpectreChatterSpeaker( squadMate ) )
			{
				speakingSquadMate = squadMate
				break
			}
		}
		if ( speakingSquadMate == null )
			return

		if ( squad.len() == 1 )
			thread PlaySpectreChatterAfterDelay( speakingSquadMate, "diag_imc_spectre_gs_squaddeplete_01_1" )
		else if ( squad.len() > 0  )
			thread PlaySpectreChatterAfterDelay( speakingSquadMate, "diag_imc_spectre_gs_allygrundown_05_1" )
	}
	else
	{
		// checks reworked here
		//if ( IsSpectre( attacker ) )
		if ( !IsValidSpectreChatterSpeaker( attacker ) )
			return

		if ( npcKilled.IsTitan() )
			thread PlaySpectreChatterAfterDelay( attacker, "diag_imc_spectre_gs_gruntkillstitan_02_1" )
	}
}

void function PlaySpectreChatterAfterDelay( entity spectre, string chatterLine, float delay = 0.3 )
{
	wait delay

	if ( !IsAlive( spectre ) ) //Really this is just an optimization thing, if the spectre is dead no point in running the same check for every player nearby in ShouldPlaySpectreChatterMPLine
		return

	PlaySpectreChatterMPLine( spectre, chatterLine )
}