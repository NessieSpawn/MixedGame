// needs tweak on moving animations
// maybe check for their enemy and reset moving animation
// refer to _ai_stalker.gnut
global function FakeSuicideSpectres_Init
global function CreateFakeSuicideSpectre
global function MakeFakeSuicideSpectre

global function FakeSuicideSpectre_LaunchSpectreDroppod
global function FakeSuicideSpectre_DefaultSpectreHandler

global function FakeSuicideSpectreOnDamaged

// modified!!!
global function IsFakeSuicideSpectre // get from file.suicideSpectres

// consts for spectres specific, not using aisettings!
const float SPECTRE_MIN_SPEED_SCALE = 1.3 // start with higher speed
const float SPECTRE_MAX_SPEED_SCALE = 1.7 // sprinting even faster
const float SPECTRE_SUICIDE_CHASE_TIME = 3.0
const float SPECTRE_SUICIDE_EXPLOSION_DISTANCE = 200 // same as fd's tick
const int SPECTRE_LOOKDISTANCE_COMBAT = 2000 // enemy search radius?
const bool SPECTRE_JUMP_AT_TITANS = true
const float SPECTRE_OVERLOAD_TIME = 2.0 // explosion delay, instead of using animation's duration
const array<string> SPECTRE_OVERLOAD_ANIMS =
[
	"sp_suicide_spectre_explode" // try to walk then explode
	"sp_suicide_spectre_explode_stand" // stand still then explode
]

// damages
const int SPECTRE_EXPLOSION_RADIUS = 300
const int SPECTRE_EXPLOSION_INNER_RADIUS = 200
const int SPECTRE_EXPLOSION_DAMAGE = 200
const int SPECTRE_EXPLOSION_DAMAGE_TITAN = 600

//const string FAKE_SPECTRE_SCRIPTNAME 	= "fakeSuicideSpectre" // moved into _ai_suicide_spectres.gnut
const FX_SPECTRE_EXPLOSION				= $"P_drone_frag_exp"

struct SpectreChainExplosionStruct
{
	vector lastExplosionPos
	int chainExplosionIndex
	float lastChainExplosionTime
}

struct
{
	array< SpectreChainExplosionStruct > chainExplosionController

	table< string, array<string> > spectreAnims
	float nextOverloadTime
 
	// modified!
	array<entity> suicideSpectres
	
	table<entity, entity> suicideSpectreChasingTable // for better behavior, abandoned for now
} file

const SFX_TICK_OVERLOAD 				= "corporate_spectre_overload_beep"
const SFX_TICK_EXPLODE 					= "corporate_spectre_death_explode"

const SFX_FRAGDRONE_OVERLOAD 			= "weapon_sentryfragdrone_preexplo"
const SFX_FRAGDRONE_EXPLODE 			= "weapon_sentryfragdrone_explo"
const SFX_FRAGDRONE_SUPERPURSUIT		= "weapon_sentryfragdrone_superpursuit"

const float CHAIN_EXPLOSION_INTERVAL 	= 0.14 //0.14
const CHAIN_EXPLOSION_MAXINDEX			= 10

void function FakeSuicideSpectres_Init()
{
	/* // signals already registered in SuicideSpectres_Init()
	RegisterSignal( "SuicideSpectreForceExplode" )
	RegisterSignal( "SuicideSpectreExploding" )
	RegisterSignal( "SuicideGotEnemy" )
	RegisterSignal( "SuicideLostEnemy" )

	PrecacheParticleSystem( FX_SPECTRE_EXPLOSION )
	*/

	file.spectreAnims[ "spectreSearch" ] <- []
	file.spectreAnims[ "spectreSearch" ].append( "sp_suicide_spectre_search" )
	file.spectreAnims[ "spectreSearch" ].append( "sp_suicide_spectre_search_B" )
	file.spectreAnims[ "spectreSearch" ].append( "sp_suicide_spectre_search_C" )
	
	// modified!!
	RegisterSignal( "SuicideSpectreEnemyChanged" )
	RegisterSignal( "DisableSuicideSpectreIdle" )
	RegisterSignal( "SuicideSpectreAssault" ) // for default spectre handler
	RegisterSignal( "SuicideSpectreOverload" ) // triggers overload
	
	// did a confirmation for normal spectres
	AddDamageCallback( "npc_frag_drone", FakeSuicideSpectreOnDamaged_Callback )
	AddDeathCallback( "npc_frag_drone", FakeSuicideSpectreDeath )
	AddDamageCallbackSourceID( eDamageSourceId.suicideSpectreAoE, FakeSuicideSpectre_DamagedPlayerOrNPC )
}

/************************************************************************************************\

 ######  ######## ######## ##     ## ########
##    ## ##          ##    ##     ## ##     ##
##       ##          ##    ##     ## ##     ##
 ######  ######      ##    ##     ## ########
      ## ##          ##    ##     ## ##
##    ## ##          ##    ##     ## ##
 ######  ########    ##     #######  ##

\************************************************************************************************/
// script CreateFakeSuicideSpectre( 3, GetPlayerCrosshairOrigin( GetPlayerArray()[0] ), GetPlayerArray()[0].GetAngles() )
entity function CreateFakeSuicideSpectre( int team, vector pos, vector angles )
{
	entity spectre = CreateNPC( "npc_frag_drone", team, pos, angles ) // spawn a tick so it has correct chaseStopDist
	spectre.SetValueForModelKey( $"models/robots/spectre/imc_spectre.mdl" )
	spectre.SetBehaviorSelector( "behavior_spectre" ) // use spectre's behavior

	DispatchSpawn( spectre )
	spectre.SetModel( $"models/robots/spectre/imc_spectre.mdl" )
	spectre.SetTitle( "#NPC_SPECTRE" ) // correct title
	FakeSuicideSpectreSetUp( spectre ) // become fake spectre
	
	return spectre
}

void function FakeSuicideSpectreSetUp( entity spectre )
{
	file.suicideSpectres.append( spectre ) // to confirm it's a suicide spectre
	spectre.SetScriptName( FAKE_SPECTRE_SCRIPTNAME ) // for later checking in _ai_suicide_spectres.gnut
	spectre.AssaultSetFightRadius( SPECTRE_LOOKDISTANCE_COMBAT ) // make the spettres target players very aggressively

	spectre.SetAimAssistAllowed( true )
	spectre.SetAllowMelee( false )
	DisableLeeching( spectre ) // suicide spectres cannot be hacked

	spectre.SetNPCMoveSpeedScale( SPECTRE_MIN_SPEED_SCALE ) // start with higher speed

	// Setup AI, disable useless flags
	spectre.EnableNPCMoveFlag( NPCMF_IGNORE_CLUSTER_DANGER_TIME | NPCMF_PREFER_SPRINT )
	spectre.DisableNPCMoveFlag( NPCMF_FOLLOW_SAFE_PATHS | NPCMF_INDOOR_ACTIVITY_OVERRIDE )
	spectre.DisableNPCFlag( NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE ) // still allow patrol and investigate
	
	// prefer chasing players
	TakeAllWeapons( spectre )
	file.suicideSpectreChasingTable[spectre] <- null // for better behavior
	
	spectre.kv.allowShoot = 0

	// Frag drones do suicide spectre behavior but we don't want them doing the enemy changed sounds so filter them out
	spectre.SetEnemyChangeCallback( SuicideSpectreEnemyChanged )

	spectre.SetLookDistOverride( SPECTRE_MAX_SIGHT_DIST )
	//spectre.SetHearingSensitivity( 10 ) // 1 is default, make them can hear any sound
	spectre.EnableNPCFlag( NPC_MUTE_TEAMMATE )

	spectre.ai.suicideSpectreExplosionDelay = -1

	thread SuicideSpectreIdle( spectre ) // try idle animations if no enemies found
	thread SuicideSpectreMoveAnim( spectre )
	thread SpectreWaitToExplode( spectre )
	spectre.ai.fragDroneArmed = true // always armed
}

bool function IsFakeSuicideSpectre( entity spectre )
{
	return file.suicideSpectres.contains( spectre )
}

void function FakeSuicideSpectreDeath( entity spectre, var damageInfo )
{
	FakeSuicideSpectreDeath_Think( spectre, damageInfo )
}

// for reloadscripts
void function FakeSuicideSpectreDeath_Think( entity spectre, var damageInfo )
{
	// check if its a tick spawn from this file
	if ( spectre.GetScriptName() != FAKE_SPECTRE_SCRIPTNAME )
		return // don't do anything

	// modified!!!
	if( !( file.suicideSpectres.contains( spectre ) ) )
		return
	
	vector pos = spectre.GetOrigin()
	int tagID = spectre.LookupAttachment( "CHESTFOCUS" )
	vector fxOrg = spectre.GetAttachmentOrigin( tagID )
	string expSFX = SFX_TICK_EXPLODE // spectres always be this one
	int expFX = GetParticleSystemIndex( FX_SPECTRE_EXPLOSION )

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	entity attackerEnt = GetNPCAttackerEnt( spectre, attacker )

	int team = GetExplosionTeamBasedOnGamemode( spectre )
	
	// try to make ttf1 suicide spectres
	/* no need to use these
	int tagID = spectre.LookupAttachment( "CHESTFOCUS" )
	vector origin = spectre.GetAttachmentOrigin( tagID )
	entity damageAttacker = GetNPCAttackerEnt( spectre, attacker )
	Explosion_DamageDefSimple( damagedef_stalker_powersupply_explosion_large, origin, damageAttacker, spectre, origin )
	spectre.Gib( <0, 0, 100> )
	*/
	
	// adjust for spectres, for friendlyfire to work, hardcoding
	// damages from damagedef_frag_drone_throwable_NPC
	RadiusDamage(
		pos,									// center
		attackerEnt,							// attacker
		spectre,								// inflictor
		SPECTRE_EXPLOSION_DAMAGE,				// damage
		SPECTRE_EXPLOSION_DAMAGE_TITAN,			// damageHeavyArmor
		SPECTRE_EXPLOSION_INNER_RADIUS,			// innerRadius
		SPECTRE_EXPLOSION_RADIUS,				// outerRadius
		SF_ENVEXPLOSION_MASK_BRUSHONLY,			// flags
		0,										// distanceFromAttacker
		2000,									// explosionForce
		DF_EXPLOSION | DF_GIB,					// scriptDamageFlags
		eDamageSourceId.suicideSpectreAoE )		// scriptDamageSourceIdentifier
	EmitSoundAtPosition( spectre.GetTeam(), pos, expSFX )
	CreateShake( pos, 10, 105, 1.25, 768 )
	StartParticleEffectInWorld( expFX, fxOrg, Vector( 0, 0, 0 ) )
	
	spectre.Gib( <0, 0, 100> ) //Used to do .Destroy() on the frag drones immediately, but this meant you can't display the obiturary correctly. Instead, since it's dead already just hide it
}

void function FakeSuicideSpectre_DamagedPlayerOrNPC( entity victim, var damageInfo )
{
	// check if its a tick spawn from this file
	if ( victim.GetScriptName() != FAKE_SPECTRE_SCRIPTNAME )
		return // don't do anything
		
	if( !( file.suicideSpectres.contains( victim ) ) )
		return

	// only allow suicide spectres damaging themselves as teammates, to trigger chain reactions
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( IsValid( attacker ) )
	{
		if( attacker.GetTeam() == victim.GetTeam() && !IsFakeSuicideSpectre( victim ) )
			DamageInfo_SetDamage( damageInfo, 0 )
	}
		
	/* stupid checks, only prevent damaging friendly players
	bool damageProtected = false
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( IsValid( attacker ) )
	{
		if( IsSpectre( attacker ) )
		{
			if( attacker.GetTeam() == victim.GetTeam() )
				damageProtected = true
		}
		else
		{
			entity inflictor = DamageInfo_GetInflictor( damageInfo )
			if( IsValid( inflictor ) )
			{
				if( IsSpectre( inflictor ) )
				{
					if( inflictor.GetTeam() == victim.GetTeam() )
						damageProtected = true
				}
			}
		}
	}
	if( damageProtected )
		DamageInfo_SetDamage( damageInfo, 0 )
	*/
}

void function SuicideSpectreEnemyChanged( entity spectre )
{
	entity enemy = spectre.GetEnemy()
	if ( IsAlive( enemy ) )
	{
		if ( file.suicideSpectres.contains( enemy ) ) // this is a enemy suicide spectre, don't target it
		{	
			spectre.SetEnemy( enemy ) // clear
			return
		}
	}
	// Spectre "Speaks"
	if ( ( RandomFloat( 1.0 ) ) < 0.02 )
		EmitSoundOnEntity( spectre, "diag_imc_spectre_gs_spotenemypilot_01_1" )
	// modified check for suicide spectres
	spectre.Signal( "SuicideSpectreEnemyChanged" )
}

/************************************************************************************************\

########  ########   #######  ##     ## #### ##     ## #### ######## ##    ##
##     ## ##     ## ##     ##  ##   ##   ##  ###   ###  ##     ##     ##  ##
##     ## ##     ## ##     ##   ## ##    ##  #### ####  ##     ##      ####
########  ########  ##     ##    ###     ##  ## ### ##  ##     ##       ##
##        ##   ##   ##     ##   ## ##    ##  ##     ##  ##     ##       ##
##        ##    ##  ##     ##  ##   ##   ##  ##     ##  ##     ##       ##
##        ##     ##  #######  ##     ## #### ##     ## ####    ##       ##

\************************************************************************************************/
void function SuicideSpectreIdle( entity spectre )
{
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "OnDestroy" )
	spectre.EndSignal( "DisableSuicideSpectreIdle" ) // manually stopped idle
	
	while( true )
	{
		entity currentEnemy = spectre.GetEnemy()
		entity droppod = spectre.GetParent() // is it doing a hotdrop?
		if ( !IsValid( currentEnemy ) && !IsValid( droppod ) ) // no enemy, not hotdropping
		{
			waitthread SpectreIdleAnimation( spectre ) // animations will be stopped once spectre found enemy
		}
		else // already has a enemy
			WaitFrame()
	}
}

void function SpectreIdleAnimation( entity spectre )
{
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "OnDestroy" )
	// modified signals
	spectre.EndSignal( "SuicideSpectreEnemyChanged" ) // wait for spectre find enemy
	spectre.EndSignal( "SuicideSpectreAssault" ) // wait for spectre try to assault, only effects DefaultSpectreHandler()
	spectre.EndSignal( "SuicideSpectreOverload" ) // stop idle animation and do overload animations
	spectre.EndSignal( "DisableSuicideSpectreIdle" ) // manually stopped idle
	// vanilla signals
	spectre.EndSignal( "SuicideSpectreExploding" )
	spectre.EndSignal( "SuicideSpectreForceExplode" )

	OnThreadEnd(
		function(): ( spectre )
		{
			// considering this means spectre found enemy, starting a assault or try overloading
			if ( IsValid( spectre ) )
			{
				spectre.Anim_Stop()
			}
		}
	)
	
	array<string> idleAnims = file.spectreAnims[ "spectreSearch" ]
	while( true )
	{
		string animation = idleAnims[ RandomInt( idleAnims.len() ) ]
		waitthread PlayAnim( spectre, animation )
	}
}

void function SuicideSpectreMoveAnim( entity spectre )
{
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "OnDestroy" )
	spectre.EndSignal( "SuicideSpectreExploding" )
	spectre.EndSignal( "SuicideSpectreForceExplode" )

	while( true )
	{
		spectre.ClearMoveAnim() // always try clear move animation
		spectre.SetMoveAnim( "sp_spectre_sprint_F" )
		WaitFrame()
	}
}

void function SpectreWaitToExplode( entity spectre )
{
	Assert( spectre.IsNPC() )
	spectre.EndSignal( "OnDeath" )

	waitthread SuicideSpectre_WaittillNearEnemyOrExploding( spectre )

	if ( spectre.ai.suicideSpectreExplodingAttacker == null )
	{
		// not exploding, so overload
		spectre.ai.suicideSpectreExplosionDelay = GetSpectreExplosionTime( spectre )
		waitthread SpectreOverloads( spectre )
	}

	if ( spectre.ai.suicideSpectreExplosionDelay > 0 )
		wait spectre.ai.suicideSpectreExplosionDelay

	entity attacker = spectre.ai.suicideSpectreExplodingAttacker
	if ( !IsValid( attacker ) )
	{
		entity lastAttacker = GetLastAttacker( spectre )
		if ( IsValid( lastAttacker ) )
		{
			attacker = lastAttacker
		}
		else
		{
			attacker = spectre
		}
	}

	vector force = GetDeathForce()

	Assert( !attacker.IsProjectile(), "Suicide Spectre attacker was a projectile! Type: " + attacker.ProjectileGetWeaponClassName() )

	// JFS: sometimes the attacker is a projectile, which can cause a script error.
	// The real solution is to figure out which weapon is passing in the projectile as the attacker and correct that.
	if ( attacker.IsProjectile() )
	{
		attacker = spectre
	}
	
	spectre.Die( attacker, attacker, { force = force, scriptType = DF_DOOMED_HEALTH_LOSS, damageSourceId = eDamageSourceId.suicideSpectreAoE } )
}

void function SetSuicideSpectreExploding( entity spectre, entity attacker, float explodingTime )
{
	Assert( spectre.ai.suicideSpectreExplodingAttacker == null )
	spectre.ai.suicideSpectreExplodingAttacker = attacker
	spectre.ai.suicideSpectreExplosionDelay = explodingTime

	spectre.Signal( "SuicideSpectreExploding" )
}

// works not really good and I can't understand it, but it's an option?
float function GetSpectreExplosionTime( entity spectre )
{
	vector spectrePos = spectre.GetOrigin()
	SpectreChainExplosionStruct chainStruct = FindNearestChainExplosionStruct( spectrePos )
	// reached max chain
	if ( Time() - chainStruct.lastChainExplosionTime > 1.0 )
		chainStruct.chainExplosionIndex = 0 // restart this chain

	chainStruct.lastExplosionPos = spectrePos // update chain pos
	float waitTime = chainStruct.chainExplosionIndex * CHAIN_EXPLOSION_INTERVAL
	chainStruct.lastChainExplosionTime = Time()
	chainStruct.chainExplosionIndex++
	thread ChainControllerCleaner( chainStruct ) // clean up the struct
	return waitTime
}

SpectreChainExplosionStruct function FindNearestChainExplosionStruct( vector origin )
{
	foreach( SpectreChainExplosionStruct tempStruct in file.chainExplosionController )
	{
		//print( tempStruct.lastExplosionPos )
		if ( Distance( tempStruct.lastExplosionPos, origin ) + 1 <= SPECTRE_EXPLOSION_RADIUS ) // consider this means the given origin inside explosion
		{
			return tempStruct // will this able to return a struct that can be edited?
		}
	}

	// if we're at this point it means there's no close enough explosions
	// create a new one
	SpectreChainExplosionStruct newStruct
	newStruct.lastExplosionPos = origin
	newStruct.lastChainExplosionTime = Time()
	newStruct.chainExplosionIndex = 0 // first chain
	file.chainExplosionController.append( newStruct ) // add to array

	return newStruct
}

void function ChainControllerCleaner( SpectreChainExplosionStruct chainStruct )
{
	// for debugging: can this struct be passed by another variable?
	int arrayIndex = file.chainExplosionController.find( chainStruct )
	//print( arrayIndex )

	wait CHAIN_EXPLOSION_INTERVAL + 0.1 // max chain interval, if we reached it we try to clean up
	arrayIndex = file.chainExplosionController.find( chainStruct )
	//print( arrayIndex )
	
	if ( Time() - chainStruct.lastChainExplosionTime > CHAIN_EXPLOSION_INTERVAL ) // hasn't chained for a long time! need to clean up
	{
		if ( arrayIndex >= 0 )
			file.chainExplosionController.remove( arrayIndex ) // clear it
	}
}

void function SuicideSpectre_WaittillNearEnemyOrExploding( entity spectre )
{
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "SuicideSpectreExploding" )
	spectre.EndSignal( "SuicideSpectreForceExplode" )

	bool pursuitSoundPlaying = false
	
	float minScale = SPECTRE_MIN_SPEED_SCALE // base stat
	float maxScale = SPECTRE_MAX_SPEED_SCALE // base stat

	//minScale = expect float( spectre.Dev_GetAISettingByKeyField( "minSpeedScale" ) )
	//maxScale = expect float( spectre.Dev_GetAISettingByKeyField( "maxSpeedScale" ) )

	while ( true )
	{
		wait 0.1

		if ( spectre.ai.suicideSpectreExplodingAttacker != null )
			return

		//If spectre is not interrruptable, don't bother
		if ( !spectre.IsInterruptable() )
			continue

		//If spectre is parented, don't bother
		if ( IsValid( spectre.GetParent() ) )
			continue

		// speed up when near enemy
		entity enemy = spectre.GetEnemy()
		if ( IsAlive( enemy ) )
		{
			float dist = Distance( enemy.GetOrigin(), spectre.GetOrigin() )
			float maxDist = 850
			if ( spectre.mySpawnOptions_aiSettings == "npc_frag_drone_throwable" )
			{
				if ( dist < maxDist )
				{
					if ( pursuitSoundPlaying == false )
					{
						EmitSoundOnEntity( spectre, SFX_FRAGDRONE_SUPERPURSUIT )
						pursuitSoundPlaying = true
					}
				}
				else
				{
					if ( pursuitSoundPlaying == true )
					{
						StopSoundOnEntity( spectre, SFX_FRAGDRONE_SUPERPURSUIT )
						pursuitSoundPlaying = false
					}
				}
			}
			float speed = GraphCapped( dist, 200, 850, maxScale, minScale )
			spectre.SetNPCMoveSpeedScale( speed )
			
			/* // stupid checks!!! not using right now	
			entity target = file.suicideSpectreChasingTable[spectre]
			//print( string( spectre ) + "'s enemy is " + string( enemy ) )
			//print( string( spectre ) + "'s chasing target is " + string( target ) )
			if( target != enemy )
			{
				//print( string( spectre ) + "'s target changed to " + string( enemy ) )
				file.suicideSpectreChasingTable[spectre] = enemy
				int followBehavior = GetDefaultNPCFollowBehavior( spectre )
				spectre.InitFollowBehavior( enemy, followBehavior )
				spectre.DisableBehavior( "Assault" )
				spectre.EnableBehavior( "Follow" )
				thread TrackSpectreEnemy( spectre, enemy )
				
				// no need to track dist, since spectre will never clear enemy automatically
				//int chaseDist = expect int( spectre.Dev_GetAISettingByKeyField( "aiEnemy_usePriorityDist" ) )
				//thread TrackEnemyDistance( spectre, enemy, chaseDist )
			}
			*/
		}

		// offset the overload time
		if ( Time() < file.nextOverloadTime )
			continue

		entity attacker = SuicideSpectre_NearEnemy( spectre )
		if ( attacker != null )
		{
			//SetSuicideSpectreOverloading( spectre, attacker )
			//Assert( 0 ) // never reached
			return
		}
	}
}

void function TrackSpectreEnemy( entity spectre, entity enemy )
{
	enemy.EndSignal( "OnDeath" )
	enemy.EndSignal( "OnDestroy" )
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "SuicideSpectreEnemyChanged" )
	
	OnThreadEnd(
		function():( spectre )
		{
			if( IsValid( spectre ) )
			{
				file.suicideSpectreChasingTable[spectre] = null
				spectre.ClearEnemy()
				//print( string( spectre ) + "'s target is cleared" )
				spectre.DisableBehavior( "Follow" )
				spectre.EnableBehavior( "Assault" )
			}
		}
	)

	WaitForever()
}

// prevent spectres chase down players even after they respawn! works pretty bad!
void function TrackEnemyDistance( entity spectre, entity enemy, int chaseDist )
{
	enemy.EndSignal( "OnDeath" )
	enemy.EndSignal( "OnDestroy" )
	spectre.EndSignal( "OnDeath" )
	spectre.EndSignal( "SuicideSpectreExploding" )
	spectre.EndSignal( "SuicideSpectreForceExplode" )
	
	OnThreadEnd(
		function():( spectre )
		{
			if( IsValid( spectre ) )
			{
				file.suicideSpectreChasingTable[spectre] = null
				spectre.ClearEnemy()
				//print( string( spectre ) + "'s target is cleared" )
				spectre.DisableBehavior( "Follow" )
				spectre.EnableBehavior( "Assault" )
			}
		}
	)
	
	while( true )
	{
		if( Distance( enemy.GetOrigin(), spectre.GetOrigin() ) > chaseDist )
			break
		wait 0.2
	}
}

entity function SuicideSpectre_NearEnemy( entity spectre )
{
	// See if any player is close eneough to trigger self-destruct
	array<entity> enemies
	entity closestEnemy = spectre.GetClosestEnemy()
	if ( closestEnemy )
		enemies.append( closestEnemy )

	entity currentEnemy = spectre.GetEnemy()
	if ( currentEnemy && currentEnemy != closestEnemy )
		enemies.append( currentEnemy )

	vector origin = spectre.GetOrigin()

	float dist = SPECTRE_SUICIDE_EXPLOSION_DISTANCE // base stat
	//dist = expect float( spectre.Dev_GetAISettingByKeyField( "suicideExplosionDistance" ) )
	
	foreach ( enemy in enemies )
	{
		if ( !IsAlive( enemy ) )
			continue
		if ( enemy.IsCloaked( true ) )
			continue
		if ( enemy.GetNoTarget() )
			continue
		if ( enemy.IsPlayer() && enemy.IsPhaseShifted() )
			continue

		vector enemyOrigin = enemy.GetOrigin()

		if ( Distance( origin, enemyOrigin ) > dist )
			continue

		float heightDiff = enemyOrigin.z - origin.z

		// dont explode because you jump over me or I am on the floor above you
		if ( fabs( heightDiff ) > 40 )
		{
			// unless enemy is standing on something slightly above you and there is a clear trace
			float curTime = Time()
			float timeDiff = curTime - spectre.ai.suicideSpectreExplosionTraceTime
			const float TRACE_INTERVAL = 2

			if ( heightDiff > 0 && timeDiff > TRACE_INTERVAL && enemy.IsOnGround() && spectre.CanSee( enemy ) )
			{
				spectre.ai.suicideSpectreExplosionTraceTime = curTime
				float frac = TraceHullSimple( origin, < origin.x, origin.y, enemyOrigin.z >, spectre.GetBoundingMins(), spectre.GetBoundingMaxs(), spectre )
				if ( frac == 1.0 )
					return enemy
			}
			continue
		}

		return enemy
	}

	return null
}

void function SpectreOverloads( entity spectre )
{
	spectre.Signal( "SuicideSpectreOverload" ) // for ending idle
	spectre.EndSignal( "SuicideSpectreExploding" )
	file.nextOverloadTime = Time() + 0.05

	#if MP
	float chaseTime = SPECTRE_SUICIDE_CHASE_TIME
	//var chaseTime = spectre.Dev_GetAISettingByKeyField( "SuicideChaseTime" )

	float maxScale = SPECTRE_MAX_SPEED_SCALE
	//float maxScale = expect float( spectre.Dev_GetAISettingByKeyField( "maxSpeedScale" ) )
	spectre.SetNPCMoveSpeedScale( maxScale )

	//expect float( chaseTime )
	float endChaseTime = Time() + chaseTime

	for ( ;; )
	{
		if ( Time() >= endChaseTime )
			break

		if ( !IsAlive( spectre.GetEnemy() ) )
			break

		entity nearEnemy = SuicideSpectre_NearEnemy( spectre )
		if ( IsAlive( nearEnemy ) )
		{
			if ( nearEnemy.IsTitan() && spectre.IsInterruptable() )
			{
				JumpAtTitan( spectre, nearEnemy )
				spectre.ai.suicideSpectreExplosionDelay = 0.0
				return
			}
			break
		}

		WaitFrame()
	}

	#endif
	
	// try to make ttf1 suicide spectres
	entity nukeFXInfoTarget
	entity fx

	//print( "Try to apply fx to suicide spectre" )
	nukeFXInfoTarget = CreateEntity( "info_target" )
	nukeFXInfoTarget.kv.spawnflags = SF_INFOTARGET_ALWAYS_TRANSMIT_TO_CLIENT
	DispatchSpawn( nukeFXInfoTarget )

	nukeFXInfoTarget.SetParent( spectre, "CHESTFOCUS" )

	fx = PlayFXOnEntity( $"P_spectre_suicide_warn", nukeFXInfoTarget )

	for ( ;; )
	{
		#if SP
		if ( spectre.IsInterruptable() && !spectre.Anim_IsActive() )
			break
		#elseif MP
		if ( spectre.IsInterruptable() && !spectre.Anim_IsActive() && spectre.IsOnGround() )
			break
		#endif

		WaitFrame()
	}

	string overloadSF = SFX_TICK_OVERLOAD

	/* // checks only for ticks!
	bool isFragDrone = 	spectre.mySpawnOptions_aiSettings == "npc_frag_drone_throwable"
	if ( isFragDrone )
		overloadSF = SFX_FRAGDRONE_OVERLOAD
	else
		overloadSF = SFX_TICK_OVERLOAD
	*/
	// Overload Sound
	EmitSoundOnEntity( spectre, overloadSF )

	AI_CreateDangerousArea_DamageDef( damagedef_frag_drone_explode, spectre, TEAM_INVALID, true, false )

	// Cleanup on thread end
	OnThreadEnd(
		//function() : ( spectre, overloadSF )
		// try to make ttf1 suicide spectres
		function() : ( spectre, overloadSF, nukeFXInfoTarget, fx )
		{
			if ( IsValid( spectre ) )
			{
				StopSoundOnEntity( spectre, overloadSF )
			}
			
			// try to make ttf1 suicide spectres
			if( IsValid( nukeFXInfoTarget ) )
			{
				nukeFXInfoTarget.Destroy()
			}
			if( IsValid( fx ) )
			{
				EffectStop( fx )
			}
		}
	)
	
	bool jumpAtTitans = SPECTRE_JUMP_AT_TITANS
	// old checks
	//bool jumpAtTitans = spectre.Dev_GetAISettingByKeyField( "JumpAtTitans" ) == null || spectre.Dev_GetAISettingByKeyField( "JumpAtTitans" ) == 1
	//if( IsSpectre( spectre ) )
	//	jumpAtTitans = true

	entity enemy = spectre.GetEnemy()
	if ( enemy && enemy.IsTitan() && jumpAtTitans && !spectre.IsInterruptable() )
	{
		JumpAtTitan( spectre, enemy )
	}
	else
	{
		string anim = SPECTRE_OVERLOAD_ANIMS[ RandomInt( SPECTRE_OVERLOAD_ANIMS.len() ) ]
		
		/* // old checks
		string anim = "sp_suicide_spectre_explode_stand"
		var overrideAnim = spectre.Dev_GetAISettingByKeyField( "OverrideOverloadAnim" )

		if ( overrideAnim != null )
		{
			anim = expect string( overrideAnim )
		}
		else if( IsSpectre( spectre ) ) // suicide spectres specific
		{
			anim = "sp_suicide_spectre_explode"
		}
		*/

		//waitthread PlayAnim( spectre, anim )
		
		// use a const duration
		thread PlayAnim( spectre, anim )
		wait SPECTRE_OVERLOAD_TIME

		//if ( !isFragDrone ) // god no need to do this
		//	wait 0.25
	}
}

void function JumpAtTitan( entity spectre, entity enemy )
{
	vector myOrigin = spectre.GetOrigin()
	vector dirToEnemy = enemy.EyePosition() - myOrigin

	float dist = Length( dirToEnemy )
	if ( dist > 0 )
	{
		const float MAX_DIST = 100
		dirToEnemy *= min( MAX_DIST, dist ) / dist
	}

	vector refOrigin = myOrigin + Vector( dirToEnemy.x, dirToEnemy.y, 256 )
	vector refAngles = spectre.GetAngles() + Vector( 0, 180, 0 )
	spectre.Anim_ScriptedPlayWithRefPoint( "sd_jump_explode", refOrigin, refAngles, 0.3 )
	WaittillAnimDone( spectre )
	return
}

int function GetExplosionTeamBasedOnGamemode( entity spectre )
{
	return spectre.GetTeam()
}


/************************************************************************************************\

########     ###    ##     ##    ###     ######   ########
##     ##   ## ##   ###   ###   ## ##   ##    ##  ##
##     ##  ##   ##  #### ####  ##   ##  ##        ##
##     ## ##     ## ## ### ## ##     ## ##   #### ######
##     ## ######### ##     ## ######### ##    ##  ##
##     ## ##     ## ##     ## ##     ## ##    ##  ##
########  ##     ## ##     ## ##     ##  ######   ########

\************************************************************************************************/
void function FakeSuicideSpectreOnDamaged_Callback( entity spectre, var damageInfo )
{
	FakeSuicideSpectreOnDamaged( spectre, damageInfo )
}


void function FakeSuicideSpectreOnDamaged( entity spectre, var damageInfo )
{
	// check if its a tick spawn from this file
	if ( spectre.GetScriptName() != FAKE_SPECTRE_SCRIPTNAME )
		return // don't do anything

	if( !( file.suicideSpectres.contains( spectre ) ) )
		return
		
	//Assert( IsFakeSuicideSpectre( spectre ) )

	int damageType = DamageInfo_GetCustomDamageType( damageInfo )
	DamageInfo_SetCustomDamageType( damageInfo, damageType )

	if ( !IsAlive( spectre ) )
		return


	entity attacker 			= DamageInfo_GetAttacker( damageInfo )
	entity inflictor 			= DamageInfo_GetInflictor( damageInfo )
	float damage				= DamageInfo_GetDamage( damageInfo )
	int damageSourceId 			= DamageInfo_GetDamageSourceIdentifier( damageInfo )

	// Calculate build time credit
	if ( attacker.IsPlayer() )
	{
		if ( GameModeRulesShouldGiveTimerCredit( attacker, spectre, damageInfo ) && !TitanDamageRewardsTitanCoreTime() )
		{
			float timerCredit = CalculateBuildTimeCredit( attacker, spectre, damage, spectre.GetHealth(), spectre.GetMaxHealth(), "spectre_kill_credit", 9 )
			if ( timerCredit )
				DecrementBuildTimer( attacker, timerCredit )
		}
	}

	// No pain anims for suicide spectres
	DamageInfo_AddDamageFlags( damageInfo, DAMAGEFLAG_NOPAIN )


	spectre.Signal( "SuicideSpectreExploding" )

	if ( !IsValid( inflictor ) || !inflictor.IsPlayer() )
	{
		if ( spectre.ai.suicideSpectreExplodingAttacker == null )
		{
			if ( spectre.GetHealth() - damage <= 0 || ( IsValid( inflictor ) && IsTick( inflictor ) ) )
			{
				float explosionTime = GetSpectreExplosionTime( spectre )
				SetSuicideSpectreExploding( spectre, attacker, explosionTime )
				DamageInfo_SetDamage( damageInfo, 0 )
				return
			}
		}
		else
		{
			// already exploding
			DamageInfo_SetDamage( damageInfo, 0 )
			return
		}

		DamageInfo_SetDamage( damageInfo, damage )
	}
}



/////////////////////////////////////////
///// OTHER WAYS TO SPAWN A SPECTRE /////
/////////////////////////////////////////

entity function MakeFakeSuicideSpectre( entity spectre ) // a real spectre
{
	// this function is only for a npc that previously be a spectre
	if ( !IsSpectre( spectre ) )
		return
	
	int team = spectre.GetTeam()
	vector origin = spectre.GetOrigin()
	vector angles = spectre.GetAngles()
	
	entity newSpectre = CreateFakeSuicideSpectre( team, origin, angles ) // spawn a fake suicide spectre
	spectre.Destroy() // destroy originall spectre

	return newSpectre
}

// this will spawn a droppod with suicide spectres
void function FakeSuicideSpectre_LaunchSpectreDroppod( vector pos, vector rot, int team, void functionref( array<entity> guys ) squadHandler = null )
{
	string squadName = MakeSquadName( team, UniqueString( "" ) )
	array<entity> guys
	
	entity pod = CreateDropPod( pos, <0,0,0> )
	
	InitFireteamDropPod( pod, eDropPodFlag.DISSOLVE_AFTER_DISEMBARKS ) // fast dissolving droppod
	
	for ( int i = 0; i < 4 ;i++ )
	{
		entity npc = CreateFakeSuicideSpectre( team, pos, <0,0,0> )
		SetSquad( npc, squadName )
		
		npc.SetParent( pod, "ATTACH", true )
		
		guys.append( npc )
	}
	
	// The order here is different so we can show on minimap while were still falling
	if ( squadHandler != null )
		thread squadHandler( guys )
		
	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )
	
	ActivateFireteamDropPod( pod, guys )
}

void function FakeSuicideSpectre_DefaultSpectreHandler( array<entity> spectres )
{
	foreach( entity spectre in spectres )
	{
		SuicideSpectreHandler( spectre )
	}
}

void function SuicideSpectreHandler( entity spectre )
{	
	if ( !IsValid( spectre ) ) // don't know why sometimes it failed to be valid
		return
	
	spectre.Signal( "DisableSuicideSpectreIdle" ) // stop default idle
	// First AssaultPoint
	array< entity > points = GetNPCArrayOfEnemies( spectre.GetTeam() )
	vector point
	
	if ( points.len() > 0 )
	{
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		spectre.AssaultPoint( point )
		spectre.AssaultSetGoalRadius( 1600 ) // 1600 is minimum for npc_stalker, works fine for others
	}
	
	array<entity> players = GetPlayerArrayOfEnemies( spectre.GetTeam() )
	// show on everyone's radar
	spectre.Minimap_AlwaysShow( TEAM_MILITIA, null )
	spectre.Minimap_AlwaysShow( TEAM_IMC, null )
	
	//thread AITdm_CleanupBoredNPCThread( guy )
	
	// Every 10 - 15 secs change AssaultPoint
	while ( true )
	{	
		spectre.Signal( "SuicideSpectreAssault" ) // this will end idle animations
		wait RandomFloatRange( 10.0,15.0 ) // do wait first
		
		// Check if alive
		if ( !IsAlive( spectre ) )
			return
		
		// Get point and send guy to it
		points = GetNPCArrayOfEnemies( spectre.GetTeam() )
		if ( points.len() == 0 )
			continue
			
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		
		spectre.AssaultPoint( point )

		WaitSignal( spectre, "OnFinishedAssault" )
		thread SpectreIdleAnimation( spectre ) // idle animation
	}

}