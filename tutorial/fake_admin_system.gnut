// 数组版本(权限组)
global function MainFunc_Init

global function ModAdmin_PlayerIsNormalAdmin
global function ModAdmin_PlayerIsBetaAdmin
global function ModAdmin_PlayerIsEliteAdmin

const array<string> ADMIN_NORMAL =
[
    "uid",
    "uid",
    "uid",
]

const array<string> ADMIN_BETA =
[
    "uid",
    "uid",
    "uid",
]

const array<string> ADMIN_ELITE =
[
    "uid",
    "uid",
    "uid",
]

void function MainFunc_Init()
{

}

bool function ModAdmin_PlayerIsNormalAdmin( entity player )
{
    return ADMIN_NORMAL.contains( player.GetUID() )
}

bool function ModAdmin_PlayerIsBetaAdmin( entity player )
{
    return ADMIN_BETA.contains( player.GetUID() )
}

bool function ModAdmin_PlayerIsEliteAdmin( entity player )
{
    return ADMIN_ELITE.contains( player.GetUID() )
}


// 表格版本(单个指令权限)
global function MainFunc_Init

global function ModAdmin_PlayerCanUseCommand

struct
{
    table< string, array<string> > playerAllowedCommands
} file

void function MainFunc_Init()
{
    InitPlayerAllowedCommands()
}

void function InitPlayerAllowedCommands()
{
    file.playerAllowedCommands["uid"] <- ["PrivateMatchLaunch", "PrivateMatchSetMode"]
    file.playerAllowedCommands["uid"] <- ["PrivateMatchLaunch", "PrivateMatchSetMode", "PrivateMatchSetPlaylistVarOverride"]
}

bool function ModAdmin_PlayerCanUseCommand( entity player, string command )
{
    string uid = player.GetUID()
    if ( uid in PLAYER_ALLOWED_COMMANDS )
    {
        array<string> allowedCommands = PLAYER_ALLOWED_COMMANDS[ uid ]
        return allowedCommands.contains( command )
    }

    return false
}

bool function ModAdmin_PlayerCanUsePrivateMatchCommand( entity player )
{
    if ( player.GetUID() in PLAYERTITLE_BETA )
        return true

    return false
}