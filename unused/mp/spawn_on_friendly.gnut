untyped
// WIP: friendly titan spawn( maybe no need? )
global function TrackPlayerFriendlyPilotSpawn
global function GetTeamFriendlyPilotSpawns

const float PILOT_SPAWN_CHECK_TICK                  = 1     // the interval for recording each point
const float PILOT_SPAWN_DURATION                    = 10    // you will likely spawn on a friendly's path within this time
const int MAX_PILOT_SPAWN_PER_TEAM                  = 30    // a team can only have this amount of friendly spawns
const float PILOT_SPAWN_SAFE_DIST_VERTICAL          = 800   // if player's position is off the ground and higher than this, we don't record the node
const float PILOT_SPAWN_SAFE_DIST_HORIZONAL         = 250   // if player is facing a wall we don't record their position
const float PILOT_SPAWN_SAFE_DOT                    = 0.7  // if vertical trace's dot is too hard, we don't record it

struct
{
    table< int, array<entity> > teamFriendlyPilotSpawns
    table< entity, array<entity> > playerOwnedFriendlySpawns
} file

void function TrackPlayerFriendlyPilotSpawn( entity player )
{
    thread TrackPlayerFriendlyPilotSpawn_Threaded( player )
}

void function TrackPlayerFriendlyPilotSpawn_Threaded( entity player )
{
    player.EndSignal( "OnDestroy" )

    if ( !( player in file.playerOwnedFriendlySpawns ) )
        file.playerOwnedFriendlySpawns[ player ] <- [] // init
    thread ClearPlayerOwnedSpawnsOnDeath( player )

    bool successThisLoop = false
    while ( true )
    {
        if ( !successThisLoop )
            WaitFrame() // whatever we do, a WaitFrame() is needed at the start of a loop

        successThisLoop = false

        if ( !IsAlive( player ) ) // wait for player alive
            continue
        if ( player.GetVelocity() == < 0, 0, 0 > ) // this player is not moving...
            continue // don't record nodes
        if ( player.GetOutOfBoundsDeadTime() != 0 ) // the player is out of bounds!
            continue
        
        vector startPos = player.GetOrigin() // the trace's start position
        vector endPos = startPos + < 0, 0, -PILOT_SPAWN_SAFE_DIST_VERTICAL > // the trace's end position
        TraceResults verticalTrace = TraceLine( startPos, endPos, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
        entity hitEnt = verticalTrace.hitEnt
        float dot = verticalTrace.surfaceNormal.Dot( Vector( 0, 0, 1 ) )
        //print( "verticalTrace.hitEnt is: " + string( hitEnt ) )
        //print( "verticalTrace's dot is: " + string( dot ) )
        if ( !IsValid( hitEnt ) ) // player away from ground?
            continue
        if ( !hitEnt.IsWorld() ) // the hitEnt is not worldSpawn!
            continue
        if ( dot < PILOT_SPAWN_SAFE_DOT ) // the spawn is too steep for a player to stand!
            continue

        startPos = player.EyePosition()
        endPos = startPos + AnglesToForward( < 0, player.EyeAngles().y, 0 > ) * PILOT_SPAWN_SAFE_DIST_HORIZONAL
        TraceResults horizonalTrace = TraceLine( startPos, endPos, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
        hitEnt = horizonalTrace.hitEnt
        //print( "horizonalTrace.hitEnt is: " + string( hitEnt ) )
        if ( IsValid( hitEnt ) ) // player facing a wall or something?
            continue
    
        int team = player.GetTeam()
        vector position = verticalTrace.endPos // use our traceResult
        vector angles = < 0, player.EyeAngles().y, 0 > // always make players facing horizonally

        // create the spawn
        entity spawn = CreateFriendlyPilotSpawn( team, position, angles )
        //PutEntityInSafeSpot( spawn, attacker, null, attacker.GetOrigin(), target.GetOrigin() ) // try putting it to a safe spot?
        file.playerOwnedFriendlySpawns[ player ].append( spawn )
        //print( "spawn point created! at " + string( position ) + ", angles " + string( angles ) )
        successThisLoop = true // mark as succeeded
        wait PILOT_SPAWN_CHECK_TICK // wait an extra time
    }
}

void function ClearPlayerOwnedSpawnsOnDeath( entity player )
{
    player.EndSignal( "OnDestroy" )

    while ( true )
    {
        player.WaitSignal( "OnDeath" )

        foreach ( entity spawn in file.playerOwnedFriendlySpawns[ player ] ) // remove owned spawns, for player already dead!
        {
            if ( IsValid( spawn ) )
            {
                //print( "removing owned spawn: " + string( spawn ) )
                RemoveFriendlySpawn( spawn )
            }
        }
        file.playerOwnedFriendlySpawns[ player ].clear()
        //print( "player friendly spawns has been cleared!" )
    }
}

entity function CreateFriendlyPilotSpawn( int team, vector origin, vector angles )
{
    entity spawn = CreateEntity( "info_spawnpoint_human" )
    spawn.SetOrigin( origin )
    spawn.SetAngles( angles )
    spawn.kv.ignoreGamemode = 1 // so game can get points through "SpawnPoint_GetPilot()"?
    SetTeam( spawn, team )
    spawn.SetScriptName( "friendly_spawn" )
    spawn.s.lastUsedTime <- -999
    //DispatchSpawn( spawn )
    //spawn.SetModel( $"models/weapons/titan_trip_wire/titan_trip_wire.mdl" ) // visualize
    
    if ( !( team in file.teamFriendlyPilotSpawns ) )
        file.teamFriendlyPilotSpawns[ team ] <- [] // init
    file.teamFriendlyPilotSpawns[ team ].append( spawn )
    CheckTeamFriendlySpawnLimit( team )
    thread FriendlySpawnLifeTime( spawn, PILOT_SPAWN_DURATION )

    return spawn
}

void function CheckTeamFriendlySpawnLimit( int team )
{
    // update the spawnpoint array
    UpdateSpawnPointArrayOfTeam( team )

    int spawnCount = file.teamFriendlyPilotSpawns[ team ].len()
    if ( spawnCount > MAX_PILOT_SPAWN_PER_TEAM )
    {
        // try remove oldest one
        entity oldestSpawn = file.teamFriendlyPilotSpawns[ team ][0]
        if ( IsValid( oldestSpawn ) )
        {
            file.teamFriendlyPilotSpawns[ team ].remove( 0 )
            oldestSpawn.Destroy()
        }
    }
}

void function FriendlySpawnLifeTime( entity spawn, float lifetime )
{
    spawn.EndSignal( "OnDestroy" )
    wait lifetime
    RemoveFriendlySpawn( spawn )
}

void function RemoveFriendlySpawn( entity spawn )
{
    int team = spawn.GetTeam()
    file.teamFriendlyPilotSpawns[ team ].removebyvalue( spawn )
    spawn.Destroy()
}

array<entity> function GetTeamFriendlyPilotSpawns( int team )
{
    if ( !( team in file.teamFriendlyPilotSpawns ) )
        return []
    
    // update the spawnpoint array
    UpdateSpawnPointArrayOfTeam( team )

    return file.teamFriendlyPilotSpawns[ team ]
}

void function UpdateSpawnPointArrayOfTeam( int team )
{
    array<entity> updatedPilotSpawns
    foreach ( entity spawn in file.teamFriendlyPilotSpawns[ team ] )
    {
        if ( !IsValid( spawn ) )
            continue // remove null spawnpoints
        updatedPilotSpawns.append( spawn )
    }
    file.teamFriendlyPilotSpawns[ team ] = updatedPilotSpawns
}